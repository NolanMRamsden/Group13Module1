
Module1Code.elf:     file format elf32-littlenios2
Module1Code.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00003d58 memsz 0x00003d58 flags r-x
    LOAD off    0x00004d78 vaddr 0x01003d78 paddr 0x01005464 align 2**12
         filesz 0x000016ec memsz 0x000016ec flags rw-
    LOAD off    0x00006b50 vaddr 0x01006b50 paddr 0x01006b50 align 2**12
         filesz 0x00000000 memsz 0x000002c4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000039f0  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001d4  01003ba4  01003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016ec  01003d78  01005464  00004d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002c4  01006b50  01006b50  00006b50  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00006464  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000758  00000000  00000000  00006490  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000c23  00000000  00000000  00006be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000cf65  00000000  00000000  0000780b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000377b  00000000  00000000  00014770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007fb9  00000000  00000000  00017eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d28  00000000  00000000  0001fea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000e95  00000000  00000000  00020bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000018aa  00000000  00000000  00021a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0002330c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00023340  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000255d5  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000255d8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000255e4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000255e5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000255e6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000255f1  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000255fc  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00025607  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000036  00000000  00000000  00025612  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007621b  00000000  00000000  00025648  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
01003ba4 l    d  .rodata	00000000 .rodata
01003d78 l    d  .rwdata	00000000 .rwdata
01006b50 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Ball.c
00000000 l    df *ABS*	00000000 Brick.c
00000000 l    df *ABS*	00000000 Input.c
00000000 l    df *ABS*	00000000 Interrupt.c
01006b6c l     O .bss	00000018 alarm
00000000 l    df *ABS*	00000000 Paddle.c
00000000 l    df *ABS*	00000000 entryPoint.c
00000000 l    df *ABS*	00000000 fp-bit.c
01000854 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01000c94 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
01001304 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
01003d78 l     O .rwdata	00001060 jtag_uart_0
01004dd8 l     O .rwdata	00000048 video_character_buffer_with_dma_0
01004e20 l     O .rwdata	00000054 video_pixel_buffer_dma_0
010018c0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01001b00 l     F .text	00000228 altera_avalon_jtag_uart_irq
01001d28 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010023a4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_close.c
010028a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
01002948 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01002a28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01002ee0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100301c l     F .text	000000dc alt_file_locked
01003280 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0100501c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100398c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
01003b40 l     F .text	00000040 alt_sim_halt
01000554 g     F .text	00000078 getSwitchIndex
01001370 g     F .text	0000006c alt_main
01006b84 g     O .bss	00000100 alt_irq
01003ba4 g     O .rodata	00000010 scalars
01005464 g       *ABS*	00000000 __flash_rwdata_start
01002638 g     F .text	00000114 alt_up_char_buffer_string
010003b4 g     F .text	00000034 bounceWall
01002568 g     F .text	000000d0 alt_up_char_buffer_draw
00000000  w      *UND*	00000000 __errno
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01006b68 g     O .bss	00000004 errno
01006b54 g     O .bss	00000004 alt_argv
0100d41c g       *ABS*	00000000 _gp
01000a38 g     F .text	00000070 __subsf3
01005420 g     O .rwdata	00000004 brickHeight
01004e9c g     O .rwdata	00000180 alt_fd_list
01002b50 g     F .text	00000094 alt_find_dev
01003688 g     F .text	000000a0 memcpy
0100274c g     F .text	0000005c alt_up_char_buffer_clear
01002fa4 g     F .text	00000078 alt_io_redirect
01003ba4 g       *ABS*	00000000 __DTOR_END__
01001f40 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01000dd0 g     F .text	00000008 __udivsi3
01000b84 g     F .text	00000078 __lesf2
01003538 g     F .text	00000090 alt_icache_flush
010007ac g     F .text	00000088 moveHorizontal
01005450 g     O .rwdata	00000004 alt_max_fd
01005460 g     O .rwdata	00000004 _global_impure_ptr
01006e14 g       *ABS*	00000000 __bss_end
01002de8 g     F .text	000000f8 alt_iic_isr_register
01001474 g     F .text	0000010c alt_tick
01002da0 g     F .text	00000048 alt_ic_irq_enabled
010013dc g     F .text	00000098 alt_alarm_stop
01006b64 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
01004e74 g     O .rwdata	00000028 alt_dev_null
01000fc0 g     F .text	000000c8 __unpack_f
01002904 g     F .text	00000044 alt_dcache_flush_all
01005464 g       *ABS*	00000000 __ram_rwdata_end
01005448 g     O .rwdata	00000008 alt_dev_list
01003d78 g       *ABS*	00000000 __ram_rodata_end
0100041c g     F .text	00000064 initBrick
01000dd8 g     F .text	00000008 __umodsi3
01006e14 g       *ABS*	00000000 end
01000e60 g     F .text	00000160 __pack_f
010024a4 g     F .text	00000084 alt_up_char_buffer_init
01001a40 g     F .text	000000c0 altera_avalon_jtag_uart_init
01003ba0 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01002414 g     F .text	00000090 alt_avalon_timer_sc_init
01000de0 g     F .text	00000080 __clzsi2
01002164 g     F .text	00000240 altera_avalon_jtag_uart_write
01003990 g     F .text	000001b0 __call_exitprocs
010001b4 g     F .text	0000004c _start
01006b5c g     O .bss	00000004 _alt_tick_rate
01005434 g     O .rwdata	00000004 paddleStartWidth
01005424 g     O .rwdata	00000004 brickWidth
01006b60 g     O .bss	00000004 _alt_nticks
010015b4 g     F .text	0000030c alt_sys_init
01000bfc g     F .text	00000098 __floatsisf
01003858 g     F .text	00000134 __register_exitproc
01000200 g     F .text	0000006c startBall
01001dd8 g     F .text	00000074 altera_avalon_jtag_uart_close
01003d78 g       *ABS*	00000000 __ram_rwdata_start
01003ba4 g       *ABS*	00000000 __ram_rodata_start
010018f8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01003480 g     F .text	000000b8 alt_get_fd
01003614 g     F .text	00000074 memcmp
010019a8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01006e14 g       *ABS*	00000000 __alt_stack_base
010019f0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0100542c g     O .rwdata	00000004 paddleMoveScale
01003bb4 g     O .rodata	00000010 __thenan_sf
01003360 g     F .text	00000120 alt_find_file
01002974 g     F .text	000000b4 alt_dev_llist_insert
010003e8 g     F .text	00000034 bounceRoof
01006b50 g       *ABS*	00000000 __bss_start
01000834 g     F .text	00000020 main
01006b58 g     O .bss	00000004 alt_envp
01002528 g     F .text	00000040 alt_up_char_buffer_open_dev
01001950 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01005428 g     O .rwdata	00000004 startBrickHealth
01006c84 g     O .bss	00000190 _atexit0
01005454 g     O .rwdata	00000004 alt_errno
01000d10 g     F .text	00000060 __divsi3
01003ba4 g       *ABS*	00000000 __CTOR_END__
01000480 g     F .text	0000004c hit
01003728 g     F .text	000000bc strcmp
01003ba4 g       *ABS*	00000000 __flash_rodata_start
01003ba4 g       *ABS*	00000000 __DTOR_LIST__
010004cc g     F .text	00000088 getUserInput
01001580 g     F .text	00000034 alt_irq_init
010032e0 g     F .text	00000060 alt_release_fd
01003bc4 g     O .rodata	00000100 __clz_tab
0100068c g     F .text	00000040 interruptFunction
010035c8 g     F .text	00000014 atexit
01000b0c g     F .text	00000078 __gesf2
0100026c g     F .text	00000148 updatePosition
0100545c g     O .rwdata	00000004 _impure_ptr
01006b50 g     O .bss	00000004 alt_argc
01002aec g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01005440 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01000628 g     F .text	00000064 turnOffLED
01002c14 g     F .text	00000050 alt_ic_isr_register
01005430 g     O .rwdata	00000004 paddleHeight
01005464 g       *ABS*	00000000 _edata
01006e14 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
01001e4c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01002d00 g     F .text	000000a0 alt_ic_irq_disable
01003340 g     F .text	00000020 altera_nios2_qsys_irq_init
010035dc g     F .text	00000038 exit
01000d70 g     F .text	00000060 __modsi3
010006cc g     F .text	00000058 initInterrupt
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
01000754 g     F .text	00000058 initPaddle
01001088 g     F .text	000000a8 __fpcmp_parts_f
01003b80 g     F .text	00000020 _exit
01001130 g     F .text	00000154 alt_alarm_start
010037e4 g     F .text	00000074 strlen
010030f8 g     F .text	00000188 open
0100541c g     O .rwdata	00000004 ballMoveScale
01002be4 g     F .text	00000030 alt_icache_flush_all
01000724 g     F .text	00000030 stopInterrupt
01005458 g     O .rwdata	00000004 alt_priority_mask
01002c64 g     F .text	0000009c alt_ic_irq_enable
010005cc g     F .text	0000005c turnOnLED
01005438 g     O .rwdata	00000008 alt_alarm_list
01002a88 g     F .text	00000064 _do_ctors
010027a8 g     F .text	000000fc close
01000aa8 g     F .text	00000064 __addsf3
01001284 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406d14 	ori	at,at,436
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04034 	movhi	r3,256
 1000134:	18dae104 	addi	r3,r3,27524
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04034 	movhi	r3,256
 100014c:	18dae104 	addi	r3,r3,27524
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c0:	00bffd16 	blt	zero,r2,10001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001cc:	06804034 	movhi	gp,256
    ori gp, gp, %lo(_gp)
 10001d0:	d6b50714 	ori	gp,gp,54300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d4:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001d8:	109ad414 	ori	r2,r2,27472

    movhi r3, %hi(__bss_end)
 10001dc:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001e0:	18db8514 	ori	r3,r3,28180

    beq r2, r3, 1f
 10001e4:	10c00326 	beq	r2,r3,10001f4 <_start+0x40>

0:
    stw zero, (r2)
 10001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f0:	10fffd36 	bltu	r2,r3,10001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f4:	10012840 	call	1001284 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001f8:	10013700 	call	1001370 <alt_main>

010001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001fc:	003fff06 	br	10001fc <alt_after_alt_main>

01000200 <startBall>:
 *      Author: Nolan
 */
#include "../Headers/Ball.h"

Ball *startBall(float x, float y, float xVelo, float yVelo)
{
 1000200:	defffa04 	addi	sp,sp,-24
 1000204:	df000515 	stw	fp,20(sp)
 1000208:	df000504 	addi	fp,sp,20
 100020c:	e13ffc15 	stw	r4,-16(fp)
 1000210:	e17ffd15 	stw	r5,-12(fp)
 1000214:	e1bffe15 	stw	r6,-8(fp)
 1000218:	e1ffff15 	stw	r7,-4(fp)
	Ball *ball;
	ball->x = x;
 100021c:	e0fffb17 	ldw	r3,-20(fp)
 1000220:	e0bffc17 	ldw	r2,-16(fp)
 1000224:	18800015 	stw	r2,0(r3)
	ball->y = y;
 1000228:	e0fffb17 	ldw	r3,-20(fp)
 100022c:	e0bffd17 	ldw	r2,-12(fp)
 1000230:	18800115 	stw	r2,4(r3)
	ball->xVelo = xVelo;
 1000234:	e0fffb17 	ldw	r3,-20(fp)
 1000238:	e0bffe17 	ldw	r2,-8(fp)
 100023c:	18800215 	stw	r2,8(r3)
	ball->yVelo = yVelo;
 1000240:	e0fffb17 	ldw	r3,-20(fp)
 1000244:	e0bfff17 	ldw	r2,-4(fp)
 1000248:	18800315 	stw	r2,12(r3)
	ball->alive = 1;
 100024c:	e0fffb17 	ldw	r3,-20(fp)
 1000250:	00800044 	movi	r2,1
 1000254:	18800415 	stw	r2,16(r3)
	return ball;
 1000258:	e0bffb17 	ldw	r2,-20(fp)
}
 100025c:	e037883a 	mov	sp,fp
 1000260:	df000017 	ldw	fp,0(sp)
 1000264:	dec00104 	addi	sp,sp,4
 1000268:	f800283a 	ret

0100026c <updatePosition>:

void updatePosition(Ball *ball)
{
 100026c:	defffd04 	addi	sp,sp,-12
 1000270:	dfc00215 	stw	ra,8(sp)
 1000274:	df000115 	stw	fp,4(sp)
 1000278:	df000104 	addi	fp,sp,4
 100027c:	e13fff15 	stw	r4,-4(fp)
	ball->x += ball->xVelo;
 1000280:	e0bfff17 	ldw	r2,-4(fp)
 1000284:	10c00017 	ldw	r3,0(r2)
 1000288:	e0bfff17 	ldw	r2,-4(fp)
 100028c:	10800217 	ldw	r2,8(r2)
 1000290:	1809883a 	mov	r4,r3
 1000294:	100b883a 	mov	r5,r2
 1000298:	1000aa80 	call	1000aa8 <__addsf3>
 100029c:	1007883a 	mov	r3,r2
 10002a0:	e0bfff17 	ldw	r2,-4(fp)
 10002a4:	10c00015 	stw	r3,0(r2)
	ball->y += ball->yVelo;
 10002a8:	e0bfff17 	ldw	r2,-4(fp)
 10002ac:	10c00117 	ldw	r3,4(r2)
 10002b0:	e0bfff17 	ldw	r2,-4(fp)
 10002b4:	10800317 	ldw	r2,12(r2)
 10002b8:	1809883a 	mov	r4,r3
 10002bc:	100b883a 	mov	r5,r2
 10002c0:	1000aa80 	call	1000aa8 <__addsf3>
 10002c4:	1007883a 	mov	r3,r2
 10002c8:	e0bfff17 	ldw	r2,-4(fp)
 10002cc:	10c00115 	stw	r3,4(r2)

	if (ball->x <= leftScreenBound)
 10002d0:	e0bfff17 	ldw	r2,-4(fp)
 10002d4:	10800017 	ldw	r2,0(r2)
 10002d8:	1009883a 	mov	r4,r2
 10002dc:	000b883a 	mov	r5,zero
 10002e0:	1000b840 	call	1000b84 <__lesf2>
 10002e4:	10800050 	cmplti	r2,r2,1
 10002e8:	1000011e 	bne	r2,zero,10002f0 <updatePosition+0x84>
 10002ec:	00000506 	br	1000304 <updatePosition+0x98>
	{
		ball->x = leftScreenBound;
 10002f0:	e0bfff17 	ldw	r2,-4(fp)
 10002f4:	10000015 	stw	zero,0(r2)
		bounceWall(ball);
 10002f8:	e13fff17 	ldw	r4,-4(fp)
 10002fc:	10003b40 	call	10003b4 <bounceWall>
 1000300:	00000d06 	br	1000338 <updatePosition+0xcc>
	}
	else if (ball->x >= rightScreenBound)
 1000304:	e0bfff17 	ldw	r2,-4(fp)
 1000308:	10800017 	ldw	r2,0(r2)
 100030c:	1009883a 	mov	r4,r2
 1000310:	0150e834 	movhi	r5,17312
 1000314:	1000b0c0 	call	1000b0c <__gesf2>
 1000318:	1004403a 	cmpge	r2,r2,zero
 100031c:	1000011e 	bne	r2,zero,1000324 <updatePosition+0xb8>
 1000320:	00000506 	br	1000338 <updatePosition+0xcc>
	{
		ball->x = rightScreenBound;
 1000324:	e0ffff17 	ldw	r3,-4(fp)
 1000328:	0090e834 	movhi	r2,17312
 100032c:	18800015 	stw	r2,0(r3)
		bounceWall(ball);
 1000330:	e13fff17 	ldw	r4,-4(fp)
 1000334:	10003b40 	call	10003b4 <bounceWall>
	}
	if (ball->y <= bottomScreenBound)
 1000338:	e0bfff17 	ldw	r2,-4(fp)
 100033c:	10800117 	ldw	r2,4(r2)
 1000340:	1009883a 	mov	r4,r2
 1000344:	0150e834 	movhi	r5,17312
 1000348:	1000b840 	call	1000b84 <__lesf2>
 100034c:	10800050 	cmplti	r2,r2,1
 1000350:	1000011e 	bne	r2,zero,1000358 <updatePosition+0xec>
 1000354:	00000606 	br	1000370 <updatePosition+0x104>
	{
		ball->y = bottomScreenBound;
 1000358:	e0ffff17 	ldw	r3,-4(fp)
 100035c:	0090e834 	movhi	r2,17312
 1000360:	18800115 	stw	r2,4(r3)
		bounceWall(ball);
 1000364:	e13fff17 	ldw	r4,-4(fp)
 1000368:	10003b40 	call	10003b4 <bounceWall>
 100036c:	00000c06 	br	10003a0 <updatePosition+0x134>
	}
	else if (ball->y >= topScreenBound)
 1000370:	e0bfff17 	ldw	r2,-4(fp)
 1000374:	10800117 	ldw	r2,4(r2)
 1000378:	1009883a 	mov	r4,r2
 100037c:	000b883a 	mov	r5,zero
 1000380:	1000b0c0 	call	1000b0c <__gesf2>
 1000384:	1004403a 	cmpge	r2,r2,zero
 1000388:	1000011e 	bne	r2,zero,1000390 <updatePosition+0x124>
 100038c:	00000406 	br	10003a0 <updatePosition+0x134>
	{
		ball->y = topScreenBound;
 1000390:	e0bfff17 	ldw	r2,-4(fp)
 1000394:	10000115 	stw	zero,4(r2)
		bounceWall(ball);
 1000398:	e13fff17 	ldw	r4,-4(fp)
 100039c:	10003b40 	call	10003b4 <bounceWall>
	}
}
 10003a0:	e037883a 	mov	sp,fp
 10003a4:	dfc00117 	ldw	ra,4(sp)
 10003a8:	df000017 	ldw	fp,0(sp)
 10003ac:	dec00204 	addi	sp,sp,8
 10003b0:	f800283a 	ret

010003b4 <bounceWall>:

void bounceWall(Ball *ball)
{
 10003b4:	defffe04 	addi	sp,sp,-8
 10003b8:	df000115 	stw	fp,4(sp)
 10003bc:	df000104 	addi	fp,sp,4
 10003c0:	e13fff15 	stw	r4,-4(fp)
	ball->xVelo = -ball->xVelo;
 10003c4:	e0bfff17 	ldw	r2,-4(fp)
 10003c8:	10800217 	ldw	r2,8(r2)
 10003cc:	10e0003c 	xorhi	r3,r2,32768
 10003d0:	e0bfff17 	ldw	r2,-4(fp)
 10003d4:	10c00215 	stw	r3,8(r2)
}
 10003d8:	e037883a 	mov	sp,fp
 10003dc:	df000017 	ldw	fp,0(sp)
 10003e0:	dec00104 	addi	sp,sp,4
 10003e4:	f800283a 	ret

010003e8 <bounceRoof>:

void bounceRoof(Ball *ball)
{
 10003e8:	defffe04 	addi	sp,sp,-8
 10003ec:	df000115 	stw	fp,4(sp)
 10003f0:	df000104 	addi	fp,sp,4
 10003f4:	e13fff15 	stw	r4,-4(fp)
	ball->yVelo = -ball->yVelo;
 10003f8:	e0bfff17 	ldw	r2,-4(fp)
 10003fc:	10800317 	ldw	r2,12(r2)
 1000400:	10e0003c 	xorhi	r3,r2,32768
 1000404:	e0bfff17 	ldw	r2,-4(fp)
 1000408:	10c00315 	stw	r3,12(r2)
}
 100040c:	e037883a 	mov	sp,fp
 1000410:	df000017 	ldw	fp,0(sp)
 1000414:	dec00104 	addi	sp,sp,4
 1000418:	f800283a 	ret

0100041c <initBrick>:


#include "../Headers/Brick.h"

Brick *initBrick(int x, int y)
{
 100041c:	defffc04 	addi	sp,sp,-16
 1000420:	df000315 	stw	fp,12(sp)
 1000424:	df000304 	addi	fp,sp,12
 1000428:	e13ffe15 	stw	r4,-8(fp)
 100042c:	e17fff15 	stw	r5,-4(fp)
	Brick *brick;
	brick->x = x;
 1000430:	e0fffd17 	ldw	r3,-12(fp)
 1000434:	e0bffe17 	ldw	r2,-8(fp)
 1000438:	18800015 	stw	r2,0(r3)
	brick->y = y;
 100043c:	e0fffd17 	ldw	r3,-12(fp)
 1000440:	e0bfff17 	ldw	r2,-4(fp)
 1000444:	18800115 	stw	r2,4(r3)
	brick->width = brickWidth;
 1000448:	d0e00217 	ldw	r3,-32760(gp)
 100044c:	e0bffd17 	ldw	r2,-12(fp)
 1000450:	10c00215 	stw	r3,8(r2)
	brick->height = brickHeight;
 1000454:	d0e00117 	ldw	r3,-32764(gp)
 1000458:	e0bffd17 	ldw	r2,-12(fp)
 100045c:	10c00315 	stw	r3,12(r2)
	brick->health = startBrickHealth;
 1000460:	d0e00317 	ldw	r3,-32756(gp)
 1000464:	e0bffd17 	ldw	r2,-12(fp)
 1000468:	10c00415 	stw	r3,16(r2)
	return brick;
 100046c:	e0bffd17 	ldw	r2,-12(fp)
}
 1000470:	e037883a 	mov	sp,fp
 1000474:	df000017 	ldw	fp,0(sp)
 1000478:	dec00104 	addi	sp,sp,4
 100047c:	f800283a 	ret

01000480 <hit>:

void hit(Brick *brick)
{
 1000480:	defffe04 	addi	sp,sp,-8
 1000484:	df000115 	stw	fp,4(sp)
 1000488:	df000104 	addi	fp,sp,4
 100048c:	e13fff15 	stw	r4,-4(fp)
	brick->health--;
 1000490:	e0bfff17 	ldw	r2,-4(fp)
 1000494:	10800417 	ldw	r2,16(r2)
 1000498:	10ffffc4 	addi	r3,r2,-1
 100049c:	e0bfff17 	ldw	r2,-4(fp)
 10004a0:	10c00415 	stw	r3,16(r2)
	if(brick->health < 0)
 10004a4:	e0bfff17 	ldw	r2,-4(fp)
 10004a8:	10800417 	ldw	r2,16(r2)
 10004ac:	1004403a 	cmpge	r2,r2,zero
 10004b0:	1000021e 	bne	r2,zero,10004bc <hit+0x3c>
		brick->health=0;
 10004b4:	e0bfff17 	ldw	r2,-4(fp)
 10004b8:	10000415 	stw	zero,16(r2)
}
 10004bc:	e037883a 	mov	sp,fp
 10004c0:	df000017 	ldw	fp,0(sp)
 10004c4:	dec00104 	addi	sp,sp,4
 10004c8:	f800283a 	ret

010004cc <getUserInput>:
#include "io.h"

const int scalars[4] = {-5,-2,2,5};
//returns a number from -10 to 10 for the scalar value of horizontal movement
int getUserInput()
{
 10004cc:	defffd04 	addi	sp,sp,-12
 10004d0:	df000215 	stw	fp,8(sp)
 10004d4:	df000204 	addi	fp,sp,8
	int i=0;
 10004d8:	e03ffe15 	stw	zero,-8(fp)
	for(i=0;i<4;i++)
 10004dc:	e03ffe15 	stw	zero,-8(fp)
 10004e0:	00001306 	br	1000530 <getUserInput+0x64>
	{
		if( ((IORD_8DIRECT(pushbutton,0) >> i) & 1) == 0)
 10004e4:	00900004 	movi	r2,16384
 10004e8:	10c00023 	ldbuio	r3,0(r2)
 10004ec:	e0bffe17 	ldw	r2,-8(fp)
 10004f0:	1885d83a 	sra	r2,r3,r2
 10004f4:	1080004c 	andi	r2,r2,1
 10004f8:	1004c03a 	cmpne	r2,r2,zero
 10004fc:	1000091e 	bne	r2,zero,1000524 <getUserInput+0x58>
			return scalars[i];
 1000500:	e0bffe17 	ldw	r2,-8(fp)
 1000504:	00c04034 	movhi	r3,256
 1000508:	18cee904 	addi	r3,r3,15268
 100050c:	1085883a 	add	r2,r2,r2
 1000510:	1085883a 	add	r2,r2,r2
 1000514:	10c5883a 	add	r2,r2,r3
 1000518:	10800017 	ldw	r2,0(r2)
 100051c:	e0bfff15 	stw	r2,-4(fp)
 1000520:	00000706 	br	1000540 <getUserInput+0x74>
const int scalars[4] = {-5,-2,2,5};
//returns a number from -10 to 10 for the scalar value of horizontal movement
int getUserInput()
{
	int i=0;
	for(i=0;i<4;i++)
 1000524:	e0bffe17 	ldw	r2,-8(fp)
 1000528:	10800044 	addi	r2,r2,1
 100052c:	e0bffe15 	stw	r2,-8(fp)
 1000530:	e0bffe17 	ldw	r2,-8(fp)
 1000534:	10800110 	cmplti	r2,r2,4
 1000538:	103fea1e 	bne	r2,zero,10004e4 <getUserInput+0x18>
	{
		if( ((IORD_8DIRECT(pushbutton,0) >> i) & 1) == 0)
			return scalars[i];
	}
	return 0;
 100053c:	e03fff15 	stw	zero,-4(fp)
 1000540:	e0bfff17 	ldw	r2,-4(fp)
}
 1000544:	e037883a 	mov	sp,fp
 1000548:	df000017 	ldw	fp,0(sp)
 100054c:	dec00104 	addi	sp,sp,4
 1000550:	f800283a 	ret

01000554 <getSwitchIndex>:

int getSwitchIndex()
{
 1000554:	defffd04 	addi	sp,sp,-12
 1000558:	df000215 	stw	fp,8(sp)
 100055c:	df000204 	addi	fp,sp,8
	int i=0;
 1000560:	e03ffe15 	stw	zero,-8(fp)
	for(i=0;i<8;i++)
 1000564:	e03ffe15 	stw	zero,-8(fp)
 1000568:	00000e06 	br	10005a4 <getSwitchIndex+0x50>
	{
		if( ((IORD_8DIRECT(switches,0) >> i) & 1) == 1)
 100056c:	00900c04 	movi	r2,16432
 1000570:	10c00023 	ldbuio	r3,0(r2)
 1000574:	e0bffe17 	ldw	r2,-8(fp)
 1000578:	1885d83a 	sra	r2,r3,r2
 100057c:	1080004c 	andi	r2,r2,1
 1000580:	10803fcc 	andi	r2,r2,255
 1000584:	1005003a 	cmpeq	r2,r2,zero
 1000588:	1000031e 	bne	r2,zero,1000598 <getSwitchIndex+0x44>
			return i;
 100058c:	e0bffe17 	ldw	r2,-8(fp)
 1000590:	e0bfff15 	stw	r2,-4(fp)
 1000594:	00000806 	br	10005b8 <getSwitchIndex+0x64>
}

int getSwitchIndex()
{
	int i=0;
	for(i=0;i<8;i++)
 1000598:	e0bffe17 	ldw	r2,-8(fp)
 100059c:	10800044 	addi	r2,r2,1
 10005a0:	e0bffe15 	stw	r2,-8(fp)
 10005a4:	e0bffe17 	ldw	r2,-8(fp)
 10005a8:	10800210 	cmplti	r2,r2,8
 10005ac:	103fef1e 	bne	r2,zero,100056c <getSwitchIndex+0x18>
	{
		if( ((IORD_8DIRECT(switches,0) >> i) & 1) == 1)
			return i;
	}
	return -1;
 10005b0:	00bfffc4 	movi	r2,-1
 10005b4:	e0bfff15 	stw	r2,-4(fp)
 10005b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10005bc:	e037883a 	mov	sp,fp
 10005c0:	df000017 	ldw	fp,0(sp)
 10005c4:	dec00104 	addi	sp,sp,4
 10005c8:	f800283a 	ret

010005cc <turnOnLED>:

void turnOnLED(int index)
{
 10005cc:	defffe04 	addi	sp,sp,-8
 10005d0:	df000115 	stw	fp,4(sp)
 10005d4:	df000104 	addi	fp,sp,4
 10005d8:	e13fff15 	stw	r4,-4(fp)
	if (index > 8 || index < 0)
 10005dc:	e0bfff17 	ldw	r2,-4(fp)
 10005e0:	10800248 	cmpgei	r2,r2,9
 10005e4:	10000c1e 	bne	r2,zero,1000618 <turnOnLED+0x4c>
 10005e8:	e0bfff17 	ldw	r2,-4(fp)
 10005ec:	1004403a 	cmpge	r2,r2,zero
 10005f0:	1000011e 	bne	r2,zero,10005f8 <turnOnLED+0x2c>
		return;
 10005f4:	00000806 	br	1000618 <turnOnLED+0x4c>
	IOWR_8DIRECT(leds,0,IORD_8DIRECT(leds,0) | (1 << index));
 10005f8:	00900804 	movi	r2,16416
 10005fc:	11000023 	ldbuio	r4,0(r2)
 1000600:	00c00044 	movi	r3,1
 1000604:	e0bfff17 	ldw	r2,-4(fp)
 1000608:	1884983a 	sll	r2,r3,r2
 100060c:	2086b03a 	or	r3,r4,r2
 1000610:	00900804 	movi	r2,16416
 1000614:	10c00025 	stbio	r3,0(r2)
}
 1000618:	e037883a 	mov	sp,fp
 100061c:	df000017 	ldw	fp,0(sp)
 1000620:	dec00104 	addi	sp,sp,4
 1000624:	f800283a 	ret

01000628 <turnOffLED>:

void turnOffLED(int index)
{
 1000628:	defffe04 	addi	sp,sp,-8
 100062c:	df000115 	stw	fp,4(sp)
 1000630:	df000104 	addi	fp,sp,4
 1000634:	e13fff15 	stw	r4,-4(fp)
	if (index > 8 || index < 0)
 1000638:	e0bfff17 	ldw	r2,-4(fp)
 100063c:	10800248 	cmpgei	r2,r2,9
 1000640:	10000e1e 	bne	r2,zero,100067c <turnOffLED+0x54>
 1000644:	e0bfff17 	ldw	r2,-4(fp)
 1000648:	1004403a 	cmpge	r2,r2,zero
 100064c:	1000011e 	bne	r2,zero,1000654 <turnOffLED+0x2c>
		return;
 1000650:	00000a06 	br	100067c <turnOffLED+0x54>
	IOWR_8DIRECT(leds,0,IORD_8DIRECT(leds,0) & (256 & ~(1<<index)));
 1000654:	00900804 	movi	r2,16416
 1000658:	11000023 	ldbuio	r4,0(r2)
 100065c:	00c00044 	movi	r3,1
 1000660:	e0bfff17 	ldw	r2,-4(fp)
 1000664:	1884983a 	sll	r2,r3,r2
 1000668:	0084303a 	nor	r2,zero,r2
 100066c:	2084703a 	and	r2,r4,r2
 1000670:	10c0400c 	andi	r3,r2,256
 1000674:	00900804 	movi	r2,16416
 1000678:	10c00025 	stbio	r3,0(r2)
}
 100067c:	e037883a 	mov	sp,fp
 1000680:	df000017 	ldw	fp,0(sp)
 1000684:	dec00104 	addi	sp,sp,4
 1000688:	f800283a 	ret

0100068c <interruptFunction>:

static alt_alarm alarm;


alt_u32 interruptFunction(void* context)
{
 100068c:	defffd04 	addi	sp,sp,-12
 1000690:	dfc00215 	stw	ra,8(sp)
 1000694:	df000115 	stw	fp,4(sp)
 1000698:	df000104 	addi	fp,sp,4
 100069c:	e13fff15 	stw	r4,-4(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10006a0:	00804034 	movhi	r2,256
 10006a4:	109ad704 	addi	r2,r2,27484
 10006a8:	10800017 	ldw	r2,0(r2)
 10006ac:	1009883a 	mov	r4,r2

	return alt_ticks_per_second()/screenRefreshRate;
 10006b0:	01400504 	movi	r5,20
 10006b4:	1000dd00 	call	1000dd0 <__udivsi3>
}
 10006b8:	e037883a 	mov	sp,fp
 10006bc:	dfc00117 	ldw	ra,4(sp)
 10006c0:	df000017 	ldw	fp,0(sp)
 10006c4:	dec00204 	addi	sp,sp,8
 10006c8:	f800283a 	ret

010006cc <initInterrupt>:

void initInterrupt()
{
 10006cc:	defffe04 	addi	sp,sp,-8
 10006d0:	dfc00115 	stw	ra,4(sp)
 10006d4:	df000015 	stw	fp,0(sp)
 10006d8:	d839883a 	mov	fp,sp
 10006dc:	00804034 	movhi	r2,256
 10006e0:	109ad704 	addi	r2,r2,27484
 10006e4:	10800017 	ldw	r2,0(r2)
 10006e8:	1009883a 	mov	r4,r2
	alt_alarm_start (&alarm, alt_ticks_per_second()/screenRefreshRate, interruptFunction, NULL );
 10006ec:	01400504 	movi	r5,20
 10006f0:	1000dd00 	call	1000dd0 <__udivsi3>
 10006f4:	100b883a 	mov	r5,r2
 10006f8:	01004034 	movhi	r4,256
 10006fc:	211adb04 	addi	r4,r4,27500
 1000700:	01804034 	movhi	r6,256
 1000704:	3181a304 	addi	r6,r6,1676
 1000708:	000f883a 	mov	r7,zero
 100070c:	10011300 	call	1001130 <alt_alarm_start>
}
 1000710:	e037883a 	mov	sp,fp
 1000714:	dfc00117 	ldw	ra,4(sp)
 1000718:	df000017 	ldw	fp,0(sp)
 100071c:	dec00204 	addi	sp,sp,8
 1000720:	f800283a 	ret

01000724 <stopInterrupt>:

void stopInterrupt()
{
 1000724:	defffe04 	addi	sp,sp,-8
 1000728:	dfc00115 	stw	ra,4(sp)
 100072c:	df000015 	stw	fp,0(sp)
 1000730:	d839883a 	mov	fp,sp
	alt_alarm_stop (&alarm);
 1000734:	01004034 	movhi	r4,256
 1000738:	211adb04 	addi	r4,r4,27500
 100073c:	10013dc0 	call	10013dc <alt_alarm_stop>
}
 1000740:	e037883a 	mov	sp,fp
 1000744:	dfc00117 	ldw	ra,4(sp)
 1000748:	df000017 	ldw	fp,0(sp)
 100074c:	dec00204 	addi	sp,sp,8
 1000750:	f800283a 	ret

01000754 <initPaddle>:
 *      Author: Nolan
 */
#include "../Headers/Paddle.h"

Paddle *initPaddle(float x)
{
 1000754:	defffc04 	addi	sp,sp,-16
 1000758:	dfc00315 	stw	ra,12(sp)
 100075c:	df000215 	stw	fp,8(sp)
 1000760:	df000204 	addi	fp,sp,8
 1000764:	e13fff15 	stw	r4,-4(fp)
	Paddle *paddle;
	paddle->x = x;
 1000768:	e0fffe17 	ldw	r3,-8(fp)
 100076c:	e0bfff17 	ldw	r2,-4(fp)
 1000770:	18800015 	stw	r2,0(r3)
	paddle->y = paddleHeight;
 1000774:	d1200517 	ldw	r4,-32748(gp)
 1000778:	1000bfc0 	call	1000bfc <__floatsisf>
 100077c:	1007883a 	mov	r3,r2
 1000780:	e0bffe17 	ldw	r2,-8(fp)
 1000784:	10c00115 	stw	r3,4(r2)
	paddle->width = paddleStartWidth;
 1000788:	d0e00617 	ldw	r3,-32744(gp)
 100078c:	e0bffe17 	ldw	r2,-8(fp)
 1000790:	10c00215 	stw	r3,8(r2)
	return paddle;
 1000794:	e0bffe17 	ldw	r2,-8(fp)
}
 1000798:	e037883a 	mov	sp,fp
 100079c:	dfc00117 	ldw	ra,4(sp)
 10007a0:	df000017 	ldw	fp,0(sp)
 10007a4:	dec00204 	addi	sp,sp,8
 10007a8:	f800283a 	ret

010007ac <moveHorizontal>:

void moveHorizontal(Paddle *paddle, int x)
{
 10007ac:	defffb04 	addi	sp,sp,-20
 10007b0:	dfc00415 	stw	ra,16(sp)
 10007b4:	df000315 	stw	fp,12(sp)
 10007b8:	dc000215 	stw	r16,8(sp)
 10007bc:	df000204 	addi	fp,sp,8
 10007c0:	e13ffe15 	stw	r4,-8(fp)
 10007c4:	e17fff15 	stw	r5,-4(fp)
	paddle->x += (x*paddleMoveScale);
 10007c8:	e0bffe17 	ldw	r2,-8(fp)
 10007cc:	14000017 	ldw	r16,0(r2)
 10007d0:	d0e00417 	ldw	r3,-32752(gp)
 10007d4:	e0bfff17 	ldw	r2,-4(fp)
 10007d8:	1889383a 	mul	r4,r3,r2
 10007dc:	1000bfc0 	call	1000bfc <__floatsisf>
 10007e0:	8009883a 	mov	r4,r16
 10007e4:	100b883a 	mov	r5,r2
 10007e8:	1000aa80 	call	1000aa8 <__addsf3>
 10007ec:	1007883a 	mov	r3,r2
 10007f0:	e0bffe17 	ldw	r2,-8(fp)
 10007f4:	10c00015 	stw	r3,0(r2)
	if ( x < leftScreenBound)
 10007f8:	e0bfff17 	ldw	r2,-4(fp)
 10007fc:	1004403a 	cmpge	r2,r2,zero
 1000800:	1000011e 	bne	r2,zero,1000808 <moveHorizontal+0x5c>
		x = leftScreenBound;
 1000804:	e03fff15 	stw	zero,-4(fp)
	if ( x > rightScreenBound )
 1000808:	e0bfff17 	ldw	r2,-4(fp)
 100080c:	10805050 	cmplti	r2,r2,321
 1000810:	1000021e 	bne	r2,zero,100081c <moveHorizontal+0x70>
		x = rightScreenBound;
 1000814:	00805004 	movi	r2,320
 1000818:	e0bfff15 	stw	r2,-4(fp)
}
 100081c:	e037883a 	mov	sp,fp
 1000820:	dfc00217 	ldw	ra,8(sp)
 1000824:	df000117 	ldw	fp,4(sp)
 1000828:	dc000017 	ldw	r16,0(sp)
 100082c:	dec00304 	addi	sp,sp,12
 1000830:	f800283a 	ret

01000834 <main>:

#include "Headers/Definitions.h"

int main()
{
 1000834:	defffe04 	addi	sp,sp,-8
 1000838:	dfc00115 	stw	ra,4(sp)
 100083c:	df000015 	stw	fp,0(sp)
 1000840:	d839883a 	mov	fp,sp
	while (1)
	{
		turnOnLED(getSwitchIndex());
 1000844:	10005540 	call	1000554 <getSwitchIndex>
 1000848:	1009883a 	mov	r4,r2
 100084c:	10005cc0 	call	10005cc <turnOnLED>
	}
 1000850:	003ffc06 	br	1000844 <main+0x10>

01000854 <_fpadd_parts>:
 1000854:	21c00017 	ldw	r7,0(r4)
 1000858:	02000044 	movi	r8,1
 100085c:	41c0332e 	bgeu	r8,r7,100092c <_fpadd_parts+0xd8>
 1000860:	28800017 	ldw	r2,0(r5)
 1000864:	4080462e 	bgeu	r8,r2,1000980 <_fpadd_parts+0x12c>
 1000868:	00c00104 	movi	r3,4
 100086c:	38c06b26 	beq	r7,r3,1000a1c <_fpadd_parts+0x1c8>
 1000870:	10c04326 	beq	r2,r3,1000980 <_fpadd_parts+0x12c>
 1000874:	00c00084 	movi	r3,2
 1000878:	10c02e26 	beq	r2,r3,1000934 <_fpadd_parts+0xe0>
 100087c:	38c04026 	beq	r7,r3,1000980 <_fpadd_parts+0x12c>
 1000880:	22800217 	ldw	r10,8(r4)
 1000884:	28c00217 	ldw	r3,8(r5)
 1000888:	23000317 	ldw	r12,12(r4)
 100088c:	2a400317 	ldw	r9,12(r5)
 1000890:	50cfc83a 	sub	r7,r10,r3
 1000894:	3817883a 	mov	r11,r7
 1000898:	38004f16 	blt	r7,zero,10009d8 <_fpadd_parts+0x184>
 100089c:	008007c4 	movi	r2,31
 10008a0:	11c03316 	blt	r2,r7,1000970 <_fpadd_parts+0x11c>
 10008a4:	02c0540e 	bge	zero,r11,10009f8 <_fpadd_parts+0x1a4>
 10008a8:	41c4983a 	sll	r2,r8,r7
 10008ac:	49c6d83a 	srl	r3,r9,r7
 10008b0:	10bfffc4 	addi	r2,r2,-1
 10008b4:	4884703a 	and	r2,r9,r2
 10008b8:	1004c03a 	cmpne	r2,r2,zero
 10008bc:	1892b03a 	or	r9,r3,r2
 10008c0:	20c00117 	ldw	r3,4(r4)
 10008c4:	28800117 	ldw	r2,4(r5)
 10008c8:	18803c26 	beq	r3,r2,10009bc <_fpadd_parts+0x168>
 10008cc:	18002f26 	beq	r3,zero,100098c <_fpadd_parts+0x138>
 10008d0:	4b05c83a 	sub	r2,r9,r12
 10008d4:	10004216 	blt	r2,zero,10009e0 <_fpadd_parts+0x18c>
 10008d8:	32800215 	stw	r10,8(r6)
 10008dc:	30800315 	stw	r2,12(r6)
 10008e0:	30000115 	stw	zero,4(r6)
 10008e4:	31000317 	ldw	r4,12(r6)
 10008e8:	01d00034 	movhi	r7,16384
 10008ec:	39ffff84 	addi	r7,r7,-2
 10008f0:	20bfffc4 	addi	r2,r4,-1
 10008f4:	2007883a 	mov	r3,r4
 10008f8:	38800836 	bltu	r7,r2,100091c <_fpadd_parts+0xc8>
 10008fc:	31400217 	ldw	r5,8(r6)
 1000900:	18c9883a 	add	r4,r3,r3
 1000904:	20bfffc4 	addi	r2,r4,-1
 1000908:	297fffc4 	addi	r5,r5,-1
 100090c:	2007883a 	mov	r3,r4
 1000910:	38bffb2e 	bgeu	r7,r2,1000900 <_fpadd_parts+0xac>
 1000914:	31400215 	stw	r5,8(r6)
 1000918:	31000315 	stw	r4,12(r6)
 100091c:	008000c4 	movi	r2,3
 1000920:	30800015 	stw	r2,0(r6)
 1000924:	20001b16 	blt	r4,zero,1000994 <_fpadd_parts+0x140>
 1000928:	3009883a 	mov	r4,r6
 100092c:	2005883a 	mov	r2,r4
 1000930:	f800283a 	ret
 1000934:	38fffd1e 	bne	r7,r3,100092c <_fpadd_parts+0xd8>
 1000938:	31c00015 	stw	r7,0(r6)
 100093c:	20800117 	ldw	r2,4(r4)
 1000940:	30800115 	stw	r2,4(r6)
 1000944:	20c00217 	ldw	r3,8(r4)
 1000948:	30c00215 	stw	r3,8(r6)
 100094c:	20800317 	ldw	r2,12(r4)
 1000950:	30800315 	stw	r2,12(r6)
 1000954:	20c00117 	ldw	r3,4(r4)
 1000958:	28800117 	ldw	r2,4(r5)
 100095c:	3009883a 	mov	r4,r6
 1000960:	1886703a 	and	r3,r3,r2
 1000964:	2005883a 	mov	r2,r4
 1000968:	30c00115 	stw	r3,4(r6)
 100096c:	f800283a 	ret
 1000970:	1a801716 	blt	r3,r10,10009d0 <_fpadd_parts+0x17c>
 1000974:	1815883a 	mov	r10,r3
 1000978:	0019883a 	mov	r12,zero
 100097c:	003fd006 	br	10008c0 <_fpadd_parts+0x6c>
 1000980:	2809883a 	mov	r4,r5
 1000984:	2005883a 	mov	r2,r4
 1000988:	f800283a 	ret
 100098c:	6245c83a 	sub	r2,r12,r9
 1000990:	003fd006 	br	10008d4 <_fpadd_parts+0x80>
 1000994:	30800217 	ldw	r2,8(r6)
 1000998:	2006d07a 	srli	r3,r4,1
 100099c:	2100004c 	andi	r4,r4,1
 10009a0:	10800044 	addi	r2,r2,1
 10009a4:	1906b03a 	or	r3,r3,r4
 10009a8:	3009883a 	mov	r4,r6
 10009ac:	30800215 	stw	r2,8(r6)
 10009b0:	2005883a 	mov	r2,r4
 10009b4:	30c00315 	stw	r3,12(r6)
 10009b8:	f800283a 	ret
 10009bc:	4b09883a 	add	r4,r9,r12
 10009c0:	30c00115 	stw	r3,4(r6)
 10009c4:	32800215 	stw	r10,8(r6)
 10009c8:	31000315 	stw	r4,12(r6)
 10009cc:	003fd306 	br	100091c <_fpadd_parts+0xc8>
 10009d0:	0013883a 	mov	r9,zero
 10009d4:	003fba06 	br	10008c0 <_fpadd_parts+0x6c>
 10009d8:	01cfc83a 	sub	r7,zero,r7
 10009dc:	003faf06 	br	100089c <_fpadd_parts+0x48>
 10009e0:	0089c83a 	sub	r4,zero,r2
 10009e4:	00800044 	movi	r2,1
 10009e8:	30800115 	stw	r2,4(r6)
 10009ec:	32800215 	stw	r10,8(r6)
 10009f0:	31000315 	stw	r4,12(r6)
 10009f4:	003fbb06 	br	10008e4 <_fpadd_parts+0x90>
 10009f8:	583fb126 	beq	r11,zero,10008c0 <_fpadd_parts+0x6c>
 10009fc:	41c4983a 	sll	r2,r8,r7
 1000a00:	61c6d83a 	srl	r3,r12,r7
 1000a04:	51d5883a 	add	r10,r10,r7
 1000a08:	10bfffc4 	addi	r2,r2,-1
 1000a0c:	6084703a 	and	r2,r12,r2
 1000a10:	1004c03a 	cmpne	r2,r2,zero
 1000a14:	1898b03a 	or	r12,r3,r2
 1000a18:	003fa906 	br	10008c0 <_fpadd_parts+0x6c>
 1000a1c:	11ffc31e 	bne	r2,r7,100092c <_fpadd_parts+0xd8>
 1000a20:	28c00117 	ldw	r3,4(r5)
 1000a24:	20800117 	ldw	r2,4(r4)
 1000a28:	10ffc026 	beq	r2,r3,100092c <_fpadd_parts+0xd8>
 1000a2c:	01004034 	movhi	r4,256
 1000a30:	210eed04 	addi	r4,r4,15284
 1000a34:	003fbd06 	br	100092c <_fpadd_parts+0xd8>

01000a38 <__subsf3>:
 1000a38:	deffef04 	addi	sp,sp,-68
 1000a3c:	dcc00f15 	stw	r19,60(sp)
 1000a40:	dcc00204 	addi	r19,sp,8
 1000a44:	dc400e15 	stw	r17,56(sp)
 1000a48:	d9000015 	stw	r4,0(sp)
 1000a4c:	d9400115 	stw	r5,4(sp)
 1000a50:	d809883a 	mov	r4,sp
 1000a54:	980b883a 	mov	r5,r19
 1000a58:	dc400604 	addi	r17,sp,24
 1000a5c:	dfc01015 	stw	ra,64(sp)
 1000a60:	1000fc00 	call	1000fc0 <__unpack_f>
 1000a64:	d9000104 	addi	r4,sp,4
 1000a68:	880b883a 	mov	r5,r17
 1000a6c:	1000fc00 	call	1000fc0 <__unpack_f>
 1000a70:	d8800717 	ldw	r2,28(sp)
 1000a74:	9809883a 	mov	r4,r19
 1000a78:	880b883a 	mov	r5,r17
 1000a7c:	d9800a04 	addi	r6,sp,40
 1000a80:	1080005c 	xori	r2,r2,1
 1000a84:	d8800715 	stw	r2,28(sp)
 1000a88:	10008540 	call	1000854 <_fpadd_parts>
 1000a8c:	1009883a 	mov	r4,r2
 1000a90:	1000e600 	call	1000e60 <__pack_f>
 1000a94:	dfc01017 	ldw	ra,64(sp)
 1000a98:	dcc00f17 	ldw	r19,60(sp)
 1000a9c:	dc400e17 	ldw	r17,56(sp)
 1000aa0:	dec01104 	addi	sp,sp,68
 1000aa4:	f800283a 	ret

01000aa8 <__addsf3>:
 1000aa8:	deffef04 	addi	sp,sp,-68
 1000aac:	dcc00f15 	stw	r19,60(sp)
 1000ab0:	dcc00204 	addi	r19,sp,8
 1000ab4:	dc400e15 	stw	r17,56(sp)
 1000ab8:	d9000015 	stw	r4,0(sp)
 1000abc:	d9400115 	stw	r5,4(sp)
 1000ac0:	d809883a 	mov	r4,sp
 1000ac4:	980b883a 	mov	r5,r19
 1000ac8:	dc400604 	addi	r17,sp,24
 1000acc:	dfc01015 	stw	ra,64(sp)
 1000ad0:	1000fc00 	call	1000fc0 <__unpack_f>
 1000ad4:	d9000104 	addi	r4,sp,4
 1000ad8:	880b883a 	mov	r5,r17
 1000adc:	1000fc00 	call	1000fc0 <__unpack_f>
 1000ae0:	d9800a04 	addi	r6,sp,40
 1000ae4:	9809883a 	mov	r4,r19
 1000ae8:	880b883a 	mov	r5,r17
 1000aec:	10008540 	call	1000854 <_fpadd_parts>
 1000af0:	1009883a 	mov	r4,r2
 1000af4:	1000e600 	call	1000e60 <__pack_f>
 1000af8:	dfc01017 	ldw	ra,64(sp)
 1000afc:	dcc00f17 	ldw	r19,60(sp)
 1000b00:	dc400e17 	ldw	r17,56(sp)
 1000b04:	dec01104 	addi	sp,sp,68
 1000b08:	f800283a 	ret

01000b0c <__gesf2>:
 1000b0c:	defff304 	addi	sp,sp,-52
 1000b10:	dc400b15 	stw	r17,44(sp)
 1000b14:	dc400204 	addi	r17,sp,8
 1000b18:	dc000a15 	stw	r16,40(sp)
 1000b1c:	d9000015 	stw	r4,0(sp)
 1000b20:	d9400115 	stw	r5,4(sp)
 1000b24:	d809883a 	mov	r4,sp
 1000b28:	880b883a 	mov	r5,r17
 1000b2c:	dc000604 	addi	r16,sp,24
 1000b30:	dfc00c15 	stw	ra,48(sp)
 1000b34:	1000fc00 	call	1000fc0 <__unpack_f>
 1000b38:	d9000104 	addi	r4,sp,4
 1000b3c:	800b883a 	mov	r5,r16
 1000b40:	1000fc00 	call	1000fc0 <__unpack_f>
 1000b44:	d8800217 	ldw	r2,8(sp)
 1000b48:	00c00044 	movi	r3,1
 1000b4c:	01bfffc4 	movi	r6,-1
 1000b50:	1880062e 	bgeu	r3,r2,1000b6c <__gesf2+0x60>
 1000b54:	d8800617 	ldw	r2,24(sp)
 1000b58:	8809883a 	mov	r4,r17
 1000b5c:	800b883a 	mov	r5,r16
 1000b60:	1880022e 	bgeu	r3,r2,1000b6c <__gesf2+0x60>
 1000b64:	10010880 	call	1001088 <__fpcmp_parts_f>
 1000b68:	100d883a 	mov	r6,r2
 1000b6c:	3005883a 	mov	r2,r6
 1000b70:	dfc00c17 	ldw	ra,48(sp)
 1000b74:	dc400b17 	ldw	r17,44(sp)
 1000b78:	dc000a17 	ldw	r16,40(sp)
 1000b7c:	dec00d04 	addi	sp,sp,52
 1000b80:	f800283a 	ret

01000b84 <__lesf2>:
 1000b84:	defff304 	addi	sp,sp,-52
 1000b88:	dc400b15 	stw	r17,44(sp)
 1000b8c:	dc400204 	addi	r17,sp,8
 1000b90:	dc000a15 	stw	r16,40(sp)
 1000b94:	d9000015 	stw	r4,0(sp)
 1000b98:	d9400115 	stw	r5,4(sp)
 1000b9c:	d809883a 	mov	r4,sp
 1000ba0:	880b883a 	mov	r5,r17
 1000ba4:	dc000604 	addi	r16,sp,24
 1000ba8:	dfc00c15 	stw	ra,48(sp)
 1000bac:	1000fc00 	call	1000fc0 <__unpack_f>
 1000bb0:	d9000104 	addi	r4,sp,4
 1000bb4:	800b883a 	mov	r5,r16
 1000bb8:	1000fc00 	call	1000fc0 <__unpack_f>
 1000bbc:	d8800217 	ldw	r2,8(sp)
 1000bc0:	00c00044 	movi	r3,1
 1000bc4:	180d883a 	mov	r6,r3
 1000bc8:	1880062e 	bgeu	r3,r2,1000be4 <__lesf2+0x60>
 1000bcc:	d8800617 	ldw	r2,24(sp)
 1000bd0:	8809883a 	mov	r4,r17
 1000bd4:	800b883a 	mov	r5,r16
 1000bd8:	1880022e 	bgeu	r3,r2,1000be4 <__lesf2+0x60>
 1000bdc:	10010880 	call	1001088 <__fpcmp_parts_f>
 1000be0:	100d883a 	mov	r6,r2
 1000be4:	3005883a 	mov	r2,r6
 1000be8:	dfc00c17 	ldw	ra,48(sp)
 1000bec:	dc400b17 	ldw	r17,44(sp)
 1000bf0:	dc000a17 	ldw	r16,40(sp)
 1000bf4:	dec00d04 	addi	sp,sp,52
 1000bf8:	f800283a 	ret

01000bfc <__floatsisf>:
 1000bfc:	2006d7fa 	srli	r3,r4,31
 1000c00:	defffa04 	addi	sp,sp,-24
 1000c04:	008000c4 	movi	r2,3
 1000c08:	dfc00515 	stw	ra,20(sp)
 1000c0c:	dc000415 	stw	r16,16(sp)
 1000c10:	d8800015 	stw	r2,0(sp)
 1000c14:	d8c00115 	stw	r3,4(sp)
 1000c18:	2000081e 	bne	r4,zero,1000c3c <__floatsisf+0x40>
 1000c1c:	00800084 	movi	r2,2
 1000c20:	d8800015 	stw	r2,0(sp)
 1000c24:	d809883a 	mov	r4,sp
 1000c28:	1000e600 	call	1000e60 <__pack_f>
 1000c2c:	dfc00517 	ldw	ra,20(sp)
 1000c30:	dc000417 	ldw	r16,16(sp)
 1000c34:	dec00604 	addi	sp,sp,24
 1000c38:	f800283a 	ret
 1000c3c:	00800784 	movi	r2,30
 1000c40:	1807003a 	cmpeq	r3,r3,zero
 1000c44:	d8800215 	stw	r2,8(sp)
 1000c48:	18000e1e 	bne	r3,zero,1000c84 <__floatsisf+0x88>
 1000c4c:	00a00034 	movhi	r2,32768
 1000c50:	20800e26 	beq	r4,r2,1000c8c <__floatsisf+0x90>
 1000c54:	0121c83a 	sub	r16,zero,r4
 1000c58:	8009883a 	mov	r4,r16
 1000c5c:	dc000315 	stw	r16,12(sp)
 1000c60:	1000de00 	call	1000de0 <__clzsi2>
 1000c64:	117fffc4 	addi	r5,r2,-1
 1000c68:	017fee0e 	bge	zero,r5,1000c24 <__floatsisf+0x28>
 1000c6c:	d8800217 	ldw	r2,8(sp)
 1000c70:	8146983a 	sll	r3,r16,r5
 1000c74:	1145c83a 	sub	r2,r2,r5
 1000c78:	d8c00315 	stw	r3,12(sp)
 1000c7c:	d8800215 	stw	r2,8(sp)
 1000c80:	003fe806 	br	1000c24 <__floatsisf+0x28>
 1000c84:	2021883a 	mov	r16,r4
 1000c88:	003ff306 	br	1000c58 <__floatsisf+0x5c>
 1000c8c:	00b3c034 	movhi	r2,52992
 1000c90:	003fe606 	br	1000c2c <__floatsisf+0x30>

01000c94 <udivmodsi4>:
 1000c94:	29001b2e 	bgeu	r5,r4,1000d04 <udivmodsi4+0x70>
 1000c98:	28001a16 	blt	r5,zero,1000d04 <udivmodsi4+0x70>
 1000c9c:	00800044 	movi	r2,1
 1000ca0:	0007883a 	mov	r3,zero
 1000ca4:	01c007c4 	movi	r7,31
 1000ca8:	00000306 	br	1000cb8 <udivmodsi4+0x24>
 1000cac:	19c01326 	beq	r3,r7,1000cfc <udivmodsi4+0x68>
 1000cb0:	18c00044 	addi	r3,r3,1
 1000cb4:	28000416 	blt	r5,zero,1000cc8 <udivmodsi4+0x34>
 1000cb8:	294b883a 	add	r5,r5,r5
 1000cbc:	1085883a 	add	r2,r2,r2
 1000cc0:	293ffa36 	bltu	r5,r4,1000cac <udivmodsi4+0x18>
 1000cc4:	10000d26 	beq	r2,zero,1000cfc <udivmodsi4+0x68>
 1000cc8:	0007883a 	mov	r3,zero
 1000ccc:	21400236 	bltu	r4,r5,1000cd8 <udivmodsi4+0x44>
 1000cd0:	2149c83a 	sub	r4,r4,r5
 1000cd4:	1886b03a 	or	r3,r3,r2
 1000cd8:	1004d07a 	srli	r2,r2,1
 1000cdc:	280ad07a 	srli	r5,r5,1
 1000ce0:	103ffa1e 	bne	r2,zero,1000ccc <udivmodsi4+0x38>
 1000ce4:	30000226 	beq	r6,zero,1000cf0 <udivmodsi4+0x5c>
 1000ce8:	2005883a 	mov	r2,r4
 1000cec:	f800283a 	ret
 1000cf0:	1809883a 	mov	r4,r3
 1000cf4:	2005883a 	mov	r2,r4
 1000cf8:	f800283a 	ret
 1000cfc:	0007883a 	mov	r3,zero
 1000d00:	003ff806 	br	1000ce4 <udivmodsi4+0x50>
 1000d04:	00800044 	movi	r2,1
 1000d08:	0007883a 	mov	r3,zero
 1000d0c:	003fef06 	br	1000ccc <udivmodsi4+0x38>

01000d10 <__divsi3>:
 1000d10:	defffe04 	addi	sp,sp,-8
 1000d14:	dc000015 	stw	r16,0(sp)
 1000d18:	dfc00115 	stw	ra,4(sp)
 1000d1c:	0021883a 	mov	r16,zero
 1000d20:	20000c16 	blt	r4,zero,1000d54 <__divsi3+0x44>
 1000d24:	000d883a 	mov	r6,zero
 1000d28:	28000e16 	blt	r5,zero,1000d64 <__divsi3+0x54>
 1000d2c:	1000c940 	call	1000c94 <udivmodsi4>
 1000d30:	1007883a 	mov	r3,r2
 1000d34:	8005003a 	cmpeq	r2,r16,zero
 1000d38:	1000011e 	bne	r2,zero,1000d40 <__divsi3+0x30>
 1000d3c:	00c7c83a 	sub	r3,zero,r3
 1000d40:	1805883a 	mov	r2,r3
 1000d44:	dfc00117 	ldw	ra,4(sp)
 1000d48:	dc000017 	ldw	r16,0(sp)
 1000d4c:	dec00204 	addi	sp,sp,8
 1000d50:	f800283a 	ret
 1000d54:	0109c83a 	sub	r4,zero,r4
 1000d58:	04000044 	movi	r16,1
 1000d5c:	000d883a 	mov	r6,zero
 1000d60:	283ff20e 	bge	r5,zero,1000d2c <__divsi3+0x1c>
 1000d64:	014bc83a 	sub	r5,zero,r5
 1000d68:	8021003a 	cmpeq	r16,r16,zero
 1000d6c:	003fef06 	br	1000d2c <__divsi3+0x1c>

01000d70 <__modsi3>:
 1000d70:	deffff04 	addi	sp,sp,-4
 1000d74:	dfc00015 	stw	ra,0(sp)
 1000d78:	01800044 	movi	r6,1
 1000d7c:	2807883a 	mov	r3,r5
 1000d80:	20000416 	blt	r4,zero,1000d94 <__modsi3+0x24>
 1000d84:	28000c16 	blt	r5,zero,1000db8 <__modsi3+0x48>
 1000d88:	dfc00017 	ldw	ra,0(sp)
 1000d8c:	dec00104 	addi	sp,sp,4
 1000d90:	1000c941 	jmpi	1000c94 <udivmodsi4>
 1000d94:	0109c83a 	sub	r4,zero,r4
 1000d98:	28000b16 	blt	r5,zero,1000dc8 <__modsi3+0x58>
 1000d9c:	180b883a 	mov	r5,r3
 1000da0:	01800044 	movi	r6,1
 1000da4:	1000c940 	call	1000c94 <udivmodsi4>
 1000da8:	0085c83a 	sub	r2,zero,r2
 1000dac:	dfc00017 	ldw	ra,0(sp)
 1000db0:	dec00104 	addi	sp,sp,4
 1000db4:	f800283a 	ret
 1000db8:	014bc83a 	sub	r5,zero,r5
 1000dbc:	dfc00017 	ldw	ra,0(sp)
 1000dc0:	dec00104 	addi	sp,sp,4
 1000dc4:	1000c941 	jmpi	1000c94 <udivmodsi4>
 1000dc8:	0147c83a 	sub	r3,zero,r5
 1000dcc:	003ff306 	br	1000d9c <__modsi3+0x2c>

01000dd0 <__udivsi3>:
 1000dd0:	000d883a 	mov	r6,zero
 1000dd4:	1000c941 	jmpi	1000c94 <udivmodsi4>

01000dd8 <__umodsi3>:
 1000dd8:	01800044 	movi	r6,1
 1000ddc:	1000c941 	jmpi	1000c94 <udivmodsi4>

01000de0 <__clzsi2>:
 1000de0:	00bfffd4 	movui	r2,65535
 1000de4:	11000e36 	bltu	r2,r4,1000e20 <__clzsi2+0x40>
 1000de8:	00803fc4 	movi	r2,255
 1000dec:	01400204 	movi	r5,8
 1000df0:	0007883a 	mov	r3,zero
 1000df4:	11001036 	bltu	r2,r4,1000e38 <__clzsi2+0x58>
 1000df8:	000b883a 	mov	r5,zero
 1000dfc:	20c6d83a 	srl	r3,r4,r3
 1000e00:	00804034 	movhi	r2,256
 1000e04:	108ef104 	addi	r2,r2,15300
 1000e08:	1887883a 	add	r3,r3,r2
 1000e0c:	18800003 	ldbu	r2,0(r3)
 1000e10:	00c00804 	movi	r3,32
 1000e14:	2885883a 	add	r2,r5,r2
 1000e18:	1885c83a 	sub	r2,r3,r2
 1000e1c:	f800283a 	ret
 1000e20:	01400404 	movi	r5,16
 1000e24:	00804034 	movhi	r2,256
 1000e28:	10bfffc4 	addi	r2,r2,-1
 1000e2c:	2807883a 	mov	r3,r5
 1000e30:	113ff22e 	bgeu	r2,r4,1000dfc <__clzsi2+0x1c>
 1000e34:	01400604 	movi	r5,24
 1000e38:	2807883a 	mov	r3,r5
 1000e3c:	20c6d83a 	srl	r3,r4,r3
 1000e40:	00804034 	movhi	r2,256
 1000e44:	108ef104 	addi	r2,r2,15300
 1000e48:	1887883a 	add	r3,r3,r2
 1000e4c:	18800003 	ldbu	r2,0(r3)
 1000e50:	00c00804 	movi	r3,32
 1000e54:	2885883a 	add	r2,r5,r2
 1000e58:	1885c83a 	sub	r2,r3,r2
 1000e5c:	f800283a 	ret

01000e60 <__pack_f>:
 1000e60:	20c00017 	ldw	r3,0(r4)
 1000e64:	01c00044 	movi	r7,1
 1000e68:	21800317 	ldw	r6,12(r4)
 1000e6c:	21400117 	ldw	r5,4(r4)
 1000e70:	38c02d2e 	bgeu	r7,r3,1000f28 <__pack_f+0xc8>
 1000e74:	00800104 	movi	r2,4
 1000e78:	18802826 	beq	r3,r2,1000f1c <__pack_f+0xbc>
 1000e7c:	00800084 	movi	r2,2
 1000e80:	18800126 	beq	r3,r2,1000e88 <__pack_f+0x28>
 1000e84:	3000101e 	bne	r6,zero,1000ec8 <__pack_f+0x68>
 1000e88:	000d883a 	mov	r6,zero
 1000e8c:	0007883a 	mov	r3,zero
 1000e90:	19003fcc 	andi	r4,r3,255
 1000e94:	200895fa 	slli	r4,r4,23
 1000e98:	00c02034 	movhi	r3,128
 1000e9c:	18ffffc4 	addi	r3,r3,-1
 1000ea0:	30c6703a 	and	r3,r6,r3
 1000ea4:	10a0002c 	andhi	r2,r2,32768
 1000ea8:	10c4b03a 	or	r2,r2,r3
 1000eac:	280a97fa 	slli	r5,r5,31
 1000eb0:	1104b03a 	or	r2,r2,r4
 1000eb4:	00e00034 	movhi	r3,32768
 1000eb8:	18ffffc4 	addi	r3,r3,-1
 1000ebc:	10c4703a 	and	r2,r2,r3
 1000ec0:	1144b03a 	or	r2,r2,r5
 1000ec4:	f800283a 	ret
 1000ec8:	21000217 	ldw	r4,8(r4)
 1000ecc:	00bfe084 	movi	r2,-126
 1000ed0:	20801b16 	blt	r4,r2,1000f40 <__pack_f+0xe0>
 1000ed4:	00801fc4 	movi	r2,127
 1000ed8:	11001016 	blt	r2,r4,1000f1c <__pack_f+0xbc>
 1000edc:	308e703a 	and	r7,r6,r2
 1000ee0:	2087883a 	add	r3,r4,r2
 1000ee4:	00801004 	movi	r2,64
 1000ee8:	38800526 	beq	r7,r2,1000f00 <__pack_f+0xa0>
 1000eec:	31800fc4 	addi	r6,r6,63
 1000ef0:	30000716 	blt	r6,zero,1000f10 <__pack_f+0xb0>
 1000ef4:	300490ba 	slli	r2,r6,2
 1000ef8:	100cd27a 	srli	r6,r2,9
 1000efc:	003fe406 	br	1000e90 <__pack_f+0x30>
 1000f00:	3080200c 	andi	r2,r6,128
 1000f04:	103ffa26 	beq	r2,zero,1000ef0 <__pack_f+0x90>
 1000f08:	31cd883a 	add	r6,r6,r7
 1000f0c:	003ff806 	br	1000ef0 <__pack_f+0x90>
 1000f10:	300cd07a 	srli	r6,r6,1
 1000f14:	18c00044 	addi	r3,r3,1
 1000f18:	003ff606 	br	1000ef4 <__pack_f+0x94>
 1000f1c:	000d883a 	mov	r6,zero
 1000f20:	00ffffc4 	movi	r3,-1
 1000f24:	003fda06 	br	1000e90 <__pack_f+0x30>
 1000f28:	31800434 	orhi	r6,r6,16
 1000f2c:	00802034 	movhi	r2,128
 1000f30:	10bfffc4 	addi	r2,r2,-1
 1000f34:	308c703a 	and	r6,r6,r2
 1000f38:	00ffffc4 	movi	r3,-1
 1000f3c:	003fd406 	br	1000e90 <__pack_f+0x30>
 1000f40:	1109c83a 	sub	r4,r2,r4
 1000f44:	00800644 	movi	r2,25
 1000f48:	11001216 	blt	r2,r4,1000f94 <__pack_f+0x134>
 1000f4c:	3904983a 	sll	r2,r7,r4
 1000f50:	3106d83a 	srl	r3,r6,r4
 1000f54:	10bfffc4 	addi	r2,r2,-1
 1000f58:	3084703a 	and	r2,r6,r2
 1000f5c:	1004c03a 	cmpne	r2,r2,zero
 1000f60:	1886b03a 	or	r3,r3,r2
 1000f64:	19001fcc 	andi	r4,r3,127
 1000f68:	00801004 	movi	r2,64
 1000f6c:	20800c26 	beq	r4,r2,1000fa0 <__pack_f+0x140>
 1000f70:	18c00fc4 	addi	r3,r3,63
 1000f74:	00900034 	movhi	r2,16384
 1000f78:	10bfffc4 	addi	r2,r2,-1
 1000f7c:	180cd1fa 	srli	r6,r3,7
 1000f80:	10c7803a 	cmpltu	r3,r2,r3
 1000f84:	00802034 	movhi	r2,128
 1000f88:	10bfffc4 	addi	r2,r2,-1
 1000f8c:	308c703a 	and	r6,r6,r2
 1000f90:	003fbf06 	br	1000e90 <__pack_f+0x30>
 1000f94:	0007883a 	mov	r3,zero
 1000f98:	000d883a 	mov	r6,zero
 1000f9c:	003ff906 	br	1000f84 <__pack_f+0x124>
 1000fa0:	1880200c 	andi	r2,r3,128
 1000fa4:	10000126 	beq	r2,zero,1000fac <__pack_f+0x14c>
 1000fa8:	1907883a 	add	r3,r3,r4
 1000fac:	180cd1fa 	srli	r6,r3,7
 1000fb0:	00900034 	movhi	r2,16384
 1000fb4:	10bfffc4 	addi	r2,r2,-1
 1000fb8:	10c7803a 	cmpltu	r3,r2,r3
 1000fbc:	003ff106 	br	1000f84 <__pack_f+0x124>

01000fc0 <__unpack_f>:
 1000fc0:	21800017 	ldw	r6,0(r4)
 1000fc4:	00c02034 	movhi	r3,128
 1000fc8:	18ffffc4 	addi	r3,r3,-1
 1000fcc:	3004d5fa 	srli	r2,r6,23
 1000fd0:	3008d7fa 	srli	r4,r6,31
 1000fd4:	30ce703a 	and	r7,r6,r3
 1000fd8:	10c03fcc 	andi	r3,r2,255
 1000fdc:	29000115 	stw	r4,4(r5)
 1000fe0:	1800131e 	bne	r3,zero,1001030 <__unpack_f+0x70>
 1000fe4:	38000f26 	beq	r7,zero,1001024 <__unpack_f+0x64>
 1000fe8:	380691fa 	slli	r3,r7,7
 1000fec:	01bfe084 	movi	r6,-126
 1000ff0:	008000c4 	movi	r2,3
 1000ff4:	01100034 	movhi	r4,16384
 1000ff8:	213fffc4 	addi	r4,r4,-1
 1000ffc:	28800015 	stw	r2,0(r5)
 1001000:	29800215 	stw	r6,8(r5)
 1001004:	20c00536 	bltu	r4,r3,100101c <__unpack_f+0x5c>
 1001008:	3005883a 	mov	r2,r6
 100100c:	18c7883a 	add	r3,r3,r3
 1001010:	10bfffc4 	addi	r2,r2,-1
 1001014:	20fffd2e 	bgeu	r4,r3,100100c <__unpack_f+0x4c>
 1001018:	28800215 	stw	r2,8(r5)
 100101c:	28c00315 	stw	r3,12(r5)
 1001020:	f800283a 	ret
 1001024:	00800084 	movi	r2,2
 1001028:	28800015 	stw	r2,0(r5)
 100102c:	f800283a 	ret
 1001030:	00803fc4 	movi	r2,255
 1001034:	18800826 	beq	r3,r2,1001058 <__unpack_f+0x98>
 1001038:	380491fa 	slli	r2,r7,7
 100103c:	18ffe044 	addi	r3,r3,-127
 1001040:	28c00215 	stw	r3,8(r5)
 1001044:	10900034 	orhi	r2,r2,16384
 1001048:	28800315 	stw	r2,12(r5)
 100104c:	008000c4 	movi	r2,3
 1001050:	28800015 	stw	r2,0(r5)
 1001054:	f800283a 	ret
 1001058:	3800031e 	bne	r7,zero,1001068 <__unpack_f+0xa8>
 100105c:	00800104 	movi	r2,4
 1001060:	28800015 	stw	r2,0(r5)
 1001064:	f800283a 	ret
 1001068:	3080042c 	andhi	r2,r6,16
 100106c:	10000426 	beq	r2,zero,1001080 <__unpack_f+0xc0>
 1001070:	00800044 	movi	r2,1
 1001074:	28800015 	stw	r2,0(r5)
 1001078:	29c00315 	stw	r7,12(r5)
 100107c:	f800283a 	ret
 1001080:	28000015 	stw	zero,0(r5)
 1001084:	003ffc06 	br	1001078 <__unpack_f+0xb8>

01001088 <__fpcmp_parts_f>:
 1001088:	21800017 	ldw	r6,0(r4)
 100108c:	00c00044 	movi	r3,1
 1001090:	19800a2e 	bgeu	r3,r6,10010bc <__fpcmp_parts_f+0x34>
 1001094:	28800017 	ldw	r2,0(r5)
 1001098:	1880082e 	bgeu	r3,r2,10010bc <__fpcmp_parts_f+0x34>
 100109c:	00c00104 	movi	r3,4
 10010a0:	30c01e26 	beq	r6,r3,100111c <__fpcmp_parts_f+0x94>
 10010a4:	10c01a26 	beq	r2,r3,1001110 <__fpcmp_parts_f+0x88>
 10010a8:	00c00084 	movi	r3,2
 10010ac:	30c00526 	beq	r6,r3,10010c4 <__fpcmp_parts_f+0x3c>
 10010b0:	10c0071e 	bne	r2,r3,10010d0 <__fpcmp_parts_f+0x48>
 10010b4:	20800117 	ldw	r2,4(r4)
 10010b8:	1000091e 	bne	r2,zero,10010e0 <__fpcmp_parts_f+0x58>
 10010bc:	00800044 	movi	r2,1
 10010c0:	f800283a 	ret
 10010c4:	10c0121e 	bne	r2,r3,1001110 <__fpcmp_parts_f+0x88>
 10010c8:	0005883a 	mov	r2,zero
 10010cc:	f800283a 	ret
 10010d0:	20c00117 	ldw	r3,4(r4)
 10010d4:	28800117 	ldw	r2,4(r5)
 10010d8:	18800326 	beq	r3,r2,10010e8 <__fpcmp_parts_f+0x60>
 10010dc:	183ff726 	beq	r3,zero,10010bc <__fpcmp_parts_f+0x34>
 10010e0:	00bfffc4 	movi	r2,-1
 10010e4:	f800283a 	ret
 10010e8:	21800217 	ldw	r6,8(r4)
 10010ec:	28800217 	ldw	r2,8(r5)
 10010f0:	11bffa16 	blt	r2,r6,10010dc <__fpcmp_parts_f+0x54>
 10010f4:	30800416 	blt	r6,r2,1001108 <__fpcmp_parts_f+0x80>
 10010f8:	21000317 	ldw	r4,12(r4)
 10010fc:	29400317 	ldw	r5,12(r5)
 1001100:	293ff636 	bltu	r5,r4,10010dc <__fpcmp_parts_f+0x54>
 1001104:	217ff02e 	bgeu	r4,r5,10010c8 <__fpcmp_parts_f+0x40>
 1001108:	183fec1e 	bne	r3,zero,10010bc <__fpcmp_parts_f+0x34>
 100110c:	003ff406 	br	10010e0 <__fpcmp_parts_f+0x58>
 1001110:	28800117 	ldw	r2,4(r5)
 1001114:	103fe91e 	bne	r2,zero,10010bc <__fpcmp_parts_f+0x34>
 1001118:	003ff106 	br	10010e0 <__fpcmp_parts_f+0x58>
 100111c:	11bfe51e 	bne	r2,r6,10010b4 <__fpcmp_parts_f+0x2c>
 1001120:	28c00117 	ldw	r3,4(r5)
 1001124:	20800117 	ldw	r2,4(r4)
 1001128:	1885c83a 	sub	r2,r3,r2
 100112c:	f800283a 	ret

01001130 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1001130:	defff404 	addi	sp,sp,-48
 1001134:	df000b15 	stw	fp,44(sp)
 1001138:	df000b04 	addi	fp,sp,44
 100113c:	e13ffb15 	stw	r4,-20(fp)
 1001140:	e17ffc15 	stw	r5,-16(fp)
 1001144:	e1bffd15 	stw	r6,-12(fp)
 1001148:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100114c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1001150:	00804034 	movhi	r2,256
 1001154:	109ad704 	addi	r2,r2,27484
 1001158:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100115c:	1005003a 	cmpeq	r2,r2,zero
 1001160:	1000411e 	bne	r2,zero,1001268 <alt_alarm_start+0x138>
  {
    if (alarm)
 1001164:	e0bffb17 	ldw	r2,-20(fp)
 1001168:	1005003a 	cmpeq	r2,r2,zero
 100116c:	10003b1e 	bne	r2,zero,100125c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1001170:	e0fffb17 	ldw	r3,-20(fp)
 1001174:	e0bffd17 	ldw	r2,-12(fp)
 1001178:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100117c:	e0fffb17 	ldw	r3,-20(fp)
 1001180:	e0bffe17 	ldw	r2,-8(fp)
 1001184:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1001188:	0005303a 	rdctl	r2,status
 100118c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1001190:	e0fff817 	ldw	r3,-32(fp)
 1001194:	00bfff84 	movi	r2,-2
 1001198:	1884703a 	and	r2,r3,r2
 100119c:	1001703a 	wrctl	status,r2
  
  return context;
 10011a0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10011a4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10011a8:	00804034 	movhi	r2,256
 10011ac:	109ad804 	addi	r2,r2,27488
 10011b0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10011b4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10011b8:	e0fffc17 	ldw	r3,-16(fp)
 10011bc:	e0bff917 	ldw	r2,-28(fp)
 10011c0:	1885883a 	add	r2,r3,r2
 10011c4:	10c00044 	addi	r3,r2,1
 10011c8:	e0bffb17 	ldw	r2,-20(fp)
 10011cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10011d0:	e0bffb17 	ldw	r2,-20(fp)
 10011d4:	10c00217 	ldw	r3,8(r2)
 10011d8:	e0bff917 	ldw	r2,-28(fp)
 10011dc:	1880042e 	bgeu	r3,r2,10011f0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 10011e0:	e0fffb17 	ldw	r3,-20(fp)
 10011e4:	00800044 	movi	r2,1
 10011e8:	18800405 	stb	r2,16(r3)
 10011ec:	00000206 	br	10011f8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10011f0:	e0bffb17 	ldw	r2,-20(fp)
 10011f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10011f8:	e0fffb17 	ldw	r3,-20(fp)
 10011fc:	00804034 	movhi	r2,256
 1001200:	10950e04 	addi	r2,r2,21560
 1001204:	e0bff615 	stw	r2,-40(fp)
 1001208:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100120c:	e0fff717 	ldw	r3,-36(fp)
 1001210:	e0bff617 	ldw	r2,-40(fp)
 1001214:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1001218:	e0bff617 	ldw	r2,-40(fp)
 100121c:	10c00017 	ldw	r3,0(r2)
 1001220:	e0bff717 	ldw	r2,-36(fp)
 1001224:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1001228:	e0bff617 	ldw	r2,-40(fp)
 100122c:	10c00017 	ldw	r3,0(r2)
 1001230:	e0bff717 	ldw	r2,-36(fp)
 1001234:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1001238:	e0fff617 	ldw	r3,-40(fp)
 100123c:	e0bff717 	ldw	r2,-36(fp)
 1001240:	18800015 	stw	r2,0(r3)
 1001244:	e0bffa17 	ldw	r2,-24(fp)
 1001248:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100124c:	e0bff517 	ldw	r2,-44(fp)
 1001250:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1001254:	e03fff15 	stw	zero,-4(fp)
 1001258:	00000506 	br	1001270 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100125c:	00bffa84 	movi	r2,-22
 1001260:	e0bfff15 	stw	r2,-4(fp)
 1001264:	00000206 	br	1001270 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1001268:	00bfde84 	movi	r2,-134
 100126c:	e0bfff15 	stw	r2,-4(fp)
 1001270:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1001274:	e037883a 	mov	sp,fp
 1001278:	df000017 	ldw	fp,0(sp)
 100127c:	dec00104 	addi	sp,sp,4
 1001280:	f800283a 	ret

01001284 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1001284:	defffe04 	addi	sp,sp,-8
 1001288:	dfc00115 	stw	ra,4(sp)
 100128c:	df000015 	stw	fp,0(sp)
 1001290:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1001294:	01004034 	movhi	r4,256
 1001298:	21151904 	addi	r4,r4,21604
 100129c:	01404034 	movhi	r5,256
 10012a0:	294f5e04 	addi	r5,r5,15736
 10012a4:	01804034 	movhi	r6,256
 10012a8:	31951904 	addi	r6,r6,21604
 10012ac:	10013040 	call	1001304 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10012b0:	01004034 	movhi	r4,256
 10012b4:	21000804 	addi	r4,r4,32
 10012b8:	01404034 	movhi	r5,256
 10012bc:	29400804 	addi	r5,r5,32
 10012c0:	01804034 	movhi	r6,256
 10012c4:	31806d04 	addi	r6,r6,436
 10012c8:	10013040 	call	1001304 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 10012cc:	01004034 	movhi	r4,256
 10012d0:	210ee904 	addi	r4,r4,15268
 10012d4:	01404034 	movhi	r5,256
 10012d8:	294ee904 	addi	r5,r5,15268
 10012dc:	01804034 	movhi	r6,256
 10012e0:	318f5e04 	addi	r6,r6,15736
 10012e4:	10013040 	call	1001304 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10012e8:	10029040 	call	1002904 <alt_dcache_flush_all>
  alt_icache_flush_all();
 10012ec:	1002be40 	call	1002be4 <alt_icache_flush_all>
}
 10012f0:	e037883a 	mov	sp,fp
 10012f4:	dfc00117 	ldw	ra,4(sp)
 10012f8:	df000017 	ldw	fp,0(sp)
 10012fc:	dec00204 	addi	sp,sp,8
 1001300:	f800283a 	ret

01001304 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1001304:	defffc04 	addi	sp,sp,-16
 1001308:	df000315 	stw	fp,12(sp)
 100130c:	df000304 	addi	fp,sp,12
 1001310:	e13ffd15 	stw	r4,-12(fp)
 1001314:	e17ffe15 	stw	r5,-8(fp)
 1001318:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100131c:	e0fffe17 	ldw	r3,-8(fp)
 1001320:	e0bffd17 	ldw	r2,-12(fp)
 1001324:	18800e26 	beq	r3,r2,1001360 <alt_load_section+0x5c>
  {
    while( to != end )
 1001328:	00000a06 	br	1001354 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100132c:	e0bffd17 	ldw	r2,-12(fp)
 1001330:	10c00017 	ldw	r3,0(r2)
 1001334:	e0bffe17 	ldw	r2,-8(fp)
 1001338:	10c00015 	stw	r3,0(r2)
 100133c:	e0bffe17 	ldw	r2,-8(fp)
 1001340:	10800104 	addi	r2,r2,4
 1001344:	e0bffe15 	stw	r2,-8(fp)
 1001348:	e0bffd17 	ldw	r2,-12(fp)
 100134c:	10800104 	addi	r2,r2,4
 1001350:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1001354:	e0fffe17 	ldw	r3,-8(fp)
 1001358:	e0bfff17 	ldw	r2,-4(fp)
 100135c:	18bff31e 	bne	r3,r2,100132c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1001360:	e037883a 	mov	sp,fp
 1001364:	df000017 	ldw	fp,0(sp)
 1001368:	dec00104 	addi	sp,sp,4
 100136c:	f800283a 	ret

01001370 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1001370:	defffd04 	addi	sp,sp,-12
 1001374:	dfc00215 	stw	ra,8(sp)
 1001378:	df000115 	stw	fp,4(sp)
 100137c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1001380:	0009883a 	mov	r4,zero
 1001384:	10015800 	call	1001580 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1001388:	10015b40 	call	10015b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100138c:	01004034 	movhi	r4,256
 1001390:	210f3104 	addi	r4,r4,15556
 1001394:	01404034 	movhi	r5,256
 1001398:	294f3104 	addi	r5,r5,15556
 100139c:	01804034 	movhi	r6,256
 10013a0:	318f3104 	addi	r6,r6,15556
 10013a4:	1002fa40 	call	1002fa4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 10013a8:	1002a880 	call	1002a88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 10013ac:	01004034 	movhi	r4,256
 10013b0:	210abb04 	addi	r4,r4,10988
 10013b4:	10035c80 	call	10035c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10013b8:	d125cd17 	ldw	r4,-26828(gp)
 10013bc:	d165ce17 	ldw	r5,-26824(gp)
 10013c0:	d1a5cf17 	ldw	r6,-26820(gp)
 10013c4:	10008340 	call	1000834 <main>
 10013c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10013cc:	01000044 	movi	r4,1
 10013d0:	10027a80 	call	10027a8 <close>
  exit (result);
 10013d4:	e13fff17 	ldw	r4,-4(fp)
 10013d8:	10035dc0 	call	10035dc <exit>

010013dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10013dc:	defffa04 	addi	sp,sp,-24
 10013e0:	df000515 	stw	fp,20(sp)
 10013e4:	df000504 	addi	fp,sp,20
 10013e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10013ec:	0005303a 	rdctl	r2,status
 10013f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10013f4:	e0fffd17 	ldw	r3,-12(fp)
 10013f8:	00bfff84 	movi	r2,-2
 10013fc:	1884703a 	and	r2,r3,r2
 1001400:	1001703a 	wrctl	status,r2
  
  return context;
 1001404:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1001408:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100140c:	e0bfff17 	ldw	r2,-4(fp)
 1001410:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1001414:	e0bffc17 	ldw	r2,-16(fp)
 1001418:	10c00017 	ldw	r3,0(r2)
 100141c:	e0bffc17 	ldw	r2,-16(fp)
 1001420:	10800117 	ldw	r2,4(r2)
 1001424:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1001428:	e0bffc17 	ldw	r2,-16(fp)
 100142c:	10c00117 	ldw	r3,4(r2)
 1001430:	e0bffc17 	ldw	r2,-16(fp)
 1001434:	10800017 	ldw	r2,0(r2)
 1001438:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100143c:	e0fffc17 	ldw	r3,-16(fp)
 1001440:	e0bffc17 	ldw	r2,-16(fp)
 1001444:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1001448:	e0fffc17 	ldw	r3,-16(fp)
 100144c:	e0bffc17 	ldw	r2,-16(fp)
 1001450:	18800015 	stw	r2,0(r3)
 1001454:	e0bffe17 	ldw	r2,-8(fp)
 1001458:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100145c:	e0bffb17 	ldw	r2,-20(fp)
 1001460:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1001464:	e037883a 	mov	sp,fp
 1001468:	df000017 	ldw	fp,0(sp)
 100146c:	dec00104 	addi	sp,sp,4
 1001470:	f800283a 	ret

01001474 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1001474:	defffb04 	addi	sp,sp,-20
 1001478:	dfc00415 	stw	ra,16(sp)
 100147c:	df000315 	stw	fp,12(sp)
 1001480:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1001484:	d0a00717 	ldw	r2,-32740(gp)
 1001488:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100148c:	d0a5d117 	ldw	r2,-26812(gp)
 1001490:	10800044 	addi	r2,r2,1
 1001494:	d0a5d115 	stw	r2,-26812(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1001498:	00003106 	br	1001560 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 100149c:	e0bffe17 	ldw	r2,-8(fp)
 10014a0:	10800017 	ldw	r2,0(r2)
 10014a4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10014a8:	e0bffe17 	ldw	r2,-8(fp)
 10014ac:	10800403 	ldbu	r2,16(r2)
 10014b0:	10803fcc 	andi	r2,r2,255
 10014b4:	1005003a 	cmpeq	r2,r2,zero
 10014b8:	1000051e 	bne	r2,zero,10014d0 <alt_tick+0x5c>
 10014bc:	d0a5d117 	ldw	r2,-26812(gp)
 10014c0:	1004c03a 	cmpne	r2,r2,zero
 10014c4:	1000021e 	bne	r2,zero,10014d0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 10014c8:	e0bffe17 	ldw	r2,-8(fp)
 10014cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10014d0:	e0bffe17 	ldw	r2,-8(fp)
 10014d4:	10c00217 	ldw	r3,8(r2)
 10014d8:	d0a5d117 	ldw	r2,-26812(gp)
 10014dc:	10c01e36 	bltu	r2,r3,1001558 <alt_tick+0xe4>
 10014e0:	e0bffe17 	ldw	r2,-8(fp)
 10014e4:	10800403 	ldbu	r2,16(r2)
 10014e8:	10803fcc 	andi	r2,r2,255
 10014ec:	1004c03a 	cmpne	r2,r2,zero
 10014f0:	1000191e 	bne	r2,zero,1001558 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 10014f4:	e0bffe17 	ldw	r2,-8(fp)
 10014f8:	10c00317 	ldw	r3,12(r2)
 10014fc:	e0bffe17 	ldw	r2,-8(fp)
 1001500:	11000517 	ldw	r4,20(r2)
 1001504:	183ee83a 	callr	r3
 1001508:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100150c:	e0bffd17 	ldw	r2,-12(fp)
 1001510:	1004c03a 	cmpne	r2,r2,zero
 1001514:	1000031e 	bne	r2,zero,1001524 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1001518:	e13ffe17 	ldw	r4,-8(fp)
 100151c:	10013dc0 	call	10013dc <alt_alarm_stop>
 1001520:	00000d06 	br	1001558 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1001524:	e0bffe17 	ldw	r2,-8(fp)
 1001528:	10c00217 	ldw	r3,8(r2)
 100152c:	e0bffd17 	ldw	r2,-12(fp)
 1001530:	1887883a 	add	r3,r3,r2
 1001534:	e0bffe17 	ldw	r2,-8(fp)
 1001538:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100153c:	e0bffe17 	ldw	r2,-8(fp)
 1001540:	10c00217 	ldw	r3,8(r2)
 1001544:	d0a5d117 	ldw	r2,-26812(gp)
 1001548:	1880032e 	bgeu	r3,r2,1001558 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 100154c:	e0fffe17 	ldw	r3,-8(fp)
 1001550:	00800044 	movi	r2,1
 1001554:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1001558:	e0bfff17 	ldw	r2,-4(fp)
 100155c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1001560:	d0e00704 	addi	r3,gp,-32740
 1001564:	e0bffe17 	ldw	r2,-8(fp)
 1001568:	10ffcc1e 	bne	r2,r3,100149c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 100156c:	e037883a 	mov	sp,fp
 1001570:	dfc00117 	ldw	ra,4(sp)
 1001574:	df000017 	ldw	fp,0(sp)
 1001578:	dec00204 	addi	sp,sp,8
 100157c:	f800283a 	ret

01001580 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1001580:	defffd04 	addi	sp,sp,-12
 1001584:	dfc00215 	stw	ra,8(sp)
 1001588:	df000115 	stw	fp,4(sp)
 100158c:	df000104 	addi	fp,sp,4
 1001590:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1001594:	10033400 	call	1003340 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1001598:	00800044 	movi	r2,1
 100159c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 10015a0:	e037883a 	mov	sp,fp
 10015a4:	dfc00117 	ldw	ra,4(sp)
 10015a8:	df000017 	ldw	fp,0(sp)
 10015ac:	dec00204 	addi	sp,sp,8
 10015b0:	f800283a 	ret

010015b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 10015b4:	defffd04 	addi	sp,sp,-12
 10015b8:	dfc00215 	stw	ra,8(sp)
 10015bc:	df000115 	stw	fp,4(sp)
 10015c0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 10015c4:	01101004 	movi	r4,16448
 10015c8:	000b883a 	mov	r5,zero
 10015cc:	018000c4 	movi	r6,3
 10015d0:	01c0fa04 	movi	r7,1000
 10015d4:	10024140 	call	1002414 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10015d8:	01004034 	movhi	r4,256
 10015dc:	210f6804 	addi	r4,r4,15776
 10015e0:	000b883a 	mov	r5,zero
 10015e4:	01800144 	movi	r6,5
 10015e8:	1001a400 	call	1001a40 <altera_avalon_jtag_uart_init>
 10015ec:	01004034 	movhi	r4,256
 10015f0:	210f5e04 	addi	r4,r4,15736
 10015f4:	10018c00 	call	10018c0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 10015f8:	00804034 	movhi	r2,256
 10015fc:	10937604 	addi	r2,r2,19928
 1001600:	10800a17 	ldw	r2,40(r2)
 1001604:	10800104 	addi	r2,r2,4
 1001608:	10800017 	ldw	r2,0(r2)
 100160c:	10ffffcc 	andi	r3,r2,65535
 1001610:	00804034 	movhi	r2,256
 1001614:	10937604 	addi	r2,r2,19928
 1001618:	10c00c15 	stw	r3,48(r2)
 100161c:	00804034 	movhi	r2,256
 1001620:	10937604 	addi	r2,r2,19928
 1001624:	10800a17 	ldw	r2,40(r2)
 1001628:	10800104 	addi	r2,r2,4
 100162c:	10800017 	ldw	r2,0(r2)
 1001630:	1005d43a 	srai	r2,r2,16
 1001634:	10ffffcc 	andi	r3,r2,65535
 1001638:	00804034 	movhi	r2,256
 100163c:	10937604 	addi	r2,r2,19928
 1001640:	10c00d15 	stw	r3,52(r2)
 1001644:	00804034 	movhi	r2,256
 1001648:	10937604 	addi	r2,r2,19928
 100164c:	10800c17 	ldw	r2,48(r2)
 1001650:	10801068 	cmpgeui	r2,r2,65
 1001654:	1000081e 	bne	r2,zero,1001678 <alt_sys_init+0xc4>
 1001658:	00c04034 	movhi	r3,256
 100165c:	18d37604 	addi	r3,r3,19928
 1001660:	00800fc4 	movi	r2,63
 1001664:	18800f15 	stw	r2,60(r3)
 1001668:	00c04034 	movhi	r3,256
 100166c:	18d37604 	addi	r3,r3,19928
 1001670:	00800184 	movi	r2,6
 1001674:	18801015 	stw	r2,64(r3)
 1001678:	00804034 	movhi	r2,256
 100167c:	10937604 	addi	r2,r2,19928
 1001680:	10800d17 	ldw	r2,52(r2)
 1001684:	10800868 	cmpgeui	r2,r2,33
 1001688:	1000041e 	bne	r2,zero,100169c <alt_sys_init+0xe8>
 100168c:	00c04034 	movhi	r3,256
 1001690:	18d37604 	addi	r3,r3,19928
 1001694:	008007c4 	movi	r2,31
 1001698:	18801115 	stw	r2,68(r3)
 100169c:	01004034 	movhi	r4,256
 10016a0:	21137604 	addi	r4,r4,19928
 10016a4:	10024a40 	call	10024a4 <alt_up_char_buffer_init>
 10016a8:	01004034 	movhi	r4,256
 10016ac:	21137604 	addi	r4,r4,19928
 10016b0:	10018c00 	call	10018c0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 10016b4:	00804034 	movhi	r2,256
 10016b8:	10938804 	addi	r2,r2,20000
 10016bc:	10800a17 	ldw	r2,40(r2)
 10016c0:	10800017 	ldw	r2,0(r2)
 10016c4:	1007883a 	mov	r3,r2
 10016c8:	00804034 	movhi	r2,256
 10016cc:	10938804 	addi	r2,r2,20000
 10016d0:	10c00b15 	stw	r3,44(r2)
 10016d4:	00804034 	movhi	r2,256
 10016d8:	10938804 	addi	r2,r2,20000
 10016dc:	10800a17 	ldw	r2,40(r2)
 10016e0:	10800104 	addi	r2,r2,4
 10016e4:	10800017 	ldw	r2,0(r2)
 10016e8:	1007883a 	mov	r3,r2
 10016ec:	00804034 	movhi	r2,256
 10016f0:	10938804 	addi	r2,r2,20000
 10016f4:	10c00c15 	stw	r3,48(r2)
 10016f8:	00804034 	movhi	r2,256
 10016fc:	10938804 	addi	r2,r2,20000
 1001700:	10800a17 	ldw	r2,40(r2)
 1001704:	10800204 	addi	r2,r2,8
 1001708:	10800017 	ldw	r2,0(r2)
 100170c:	10ffffcc 	andi	r3,r2,65535
 1001710:	00804034 	movhi	r2,256
 1001714:	10938804 	addi	r2,r2,20000
 1001718:	10c00f15 	stw	r3,60(r2)
 100171c:	00804034 	movhi	r2,256
 1001720:	10938804 	addi	r2,r2,20000
 1001724:	10800a17 	ldw	r2,40(r2)
 1001728:	10800204 	addi	r2,r2,8
 100172c:	10800017 	ldw	r2,0(r2)
 1001730:	1005d43a 	srai	r2,r2,16
 1001734:	10ffffcc 	andi	r3,r2,65535
 1001738:	00804034 	movhi	r2,256
 100173c:	10938804 	addi	r2,r2,20000
 1001740:	10c01015 	stw	r3,64(r2)
 1001744:	00804034 	movhi	r2,256
 1001748:	10938804 	addi	r2,r2,20000
 100174c:	10800a17 	ldw	r2,40(r2)
 1001750:	10800304 	addi	r2,r2,12
 1001754:	10800017 	ldw	r2,0(r2)
 1001758:	1005d07a 	srai	r2,r2,1
 100175c:	10c0004c 	andi	r3,r2,1
 1001760:	00804034 	movhi	r2,256
 1001764:	10938804 	addi	r2,r2,20000
 1001768:	10c00d15 	stw	r3,52(r2)
 100176c:	00804034 	movhi	r2,256
 1001770:	10938804 	addi	r2,r2,20000
 1001774:	10800a17 	ldw	r2,40(r2)
 1001778:	10800304 	addi	r2,r2,12
 100177c:	10800017 	ldw	r2,0(r2)
 1001780:	1005d13a 	srai	r2,r2,4
 1001784:	10c003cc 	andi	r3,r2,15
 1001788:	00804034 	movhi	r2,256
 100178c:	10938804 	addi	r2,r2,20000
 1001790:	10c00e15 	stw	r3,56(r2)
 1001794:	00804034 	movhi	r2,256
 1001798:	10938804 	addi	r2,r2,20000
 100179c:	10800a17 	ldw	r2,40(r2)
 10017a0:	10800304 	addi	r2,r2,12
 10017a4:	10800017 	ldw	r2,0(r2)
 10017a8:	1005d43a 	srai	r2,r2,16
 10017ac:	1007883a 	mov	r3,r2
 10017b0:	00bfffc4 	movi	r2,-1
 10017b4:	1884703a 	and	r2,r3,r2
 10017b8:	e0bfff45 	stb	r2,-3(fp)
 10017bc:	00804034 	movhi	r2,256
 10017c0:	10938804 	addi	r2,r2,20000
 10017c4:	10800a17 	ldw	r2,40(r2)
 10017c8:	10800304 	addi	r2,r2,12
 10017cc:	10800017 	ldw	r2,0(r2)
 10017d0:	1005d63a 	srai	r2,r2,24
 10017d4:	1007883a 	mov	r3,r2
 10017d8:	00bfffc4 	movi	r2,-1
 10017dc:	1884703a 	and	r2,r3,r2
 10017e0:	e0bfff05 	stb	r2,-4(fp)
 10017e4:	00804034 	movhi	r2,256
 10017e8:	10938804 	addi	r2,r2,20000
 10017ec:	10800e17 	ldw	r2,56(r2)
 10017f0:	10800058 	cmpnei	r2,r2,1
 10017f4:	1000041e 	bne	r2,zero,1001808 <alt_sys_init+0x254>
 10017f8:	00804034 	movhi	r2,256
 10017fc:	10938804 	addi	r2,r2,20000
 1001800:	10001115 	stw	zero,68(r2)
 1001804:	00000e06 	br	1001840 <alt_sys_init+0x28c>
 1001808:	00804034 	movhi	r2,256
 100180c:	10938804 	addi	r2,r2,20000
 1001810:	10800e17 	ldw	r2,56(r2)
 1001814:	10800098 	cmpnei	r2,r2,2
 1001818:	1000051e 	bne	r2,zero,1001830 <alt_sys_init+0x27c>
 100181c:	00c04034 	movhi	r3,256
 1001820:	18d38804 	addi	r3,r3,20000
 1001824:	00800044 	movi	r2,1
 1001828:	18801115 	stw	r2,68(r3)
 100182c:	00000406 	br	1001840 <alt_sys_init+0x28c>
 1001830:	00c04034 	movhi	r3,256
 1001834:	18d38804 	addi	r3,r3,20000
 1001838:	00800084 	movi	r2,2
 100183c:	18801115 	stw	r2,68(r3)
 1001840:	e0ffff43 	ldbu	r3,-3(fp)
 1001844:	00800804 	movi	r2,32
 1001848:	10c7c83a 	sub	r3,r2,r3
 100184c:	00bfffc4 	movi	r2,-1
 1001850:	10c6d83a 	srl	r3,r2,r3
 1001854:	00804034 	movhi	r2,256
 1001858:	10938804 	addi	r2,r2,20000
 100185c:	10c01215 	stw	r3,72(r2)
 1001860:	e0ffff43 	ldbu	r3,-3(fp)
 1001864:	00804034 	movhi	r2,256
 1001868:	10938804 	addi	r2,r2,20000
 100186c:	10801117 	ldw	r2,68(r2)
 1001870:	1887883a 	add	r3,r3,r2
 1001874:	00804034 	movhi	r2,256
 1001878:	10938804 	addi	r2,r2,20000
 100187c:	10c01315 	stw	r3,76(r2)
 1001880:	e0ffff03 	ldbu	r3,-4(fp)
 1001884:	00800804 	movi	r2,32
 1001888:	10c7c83a 	sub	r3,r2,r3
 100188c:	00bfffc4 	movi	r2,-1
 1001890:	10c6d83a 	srl	r3,r2,r3
 1001894:	00804034 	movhi	r2,256
 1001898:	10938804 	addi	r2,r2,20000
 100189c:	10c01415 	stw	r3,80(r2)
 10018a0:	01004034 	movhi	r4,256
 10018a4:	21138804 	addi	r4,r4,20000
 10018a8:	10018c00 	call	10018c0 <alt_dev_reg>
}
 10018ac:	e037883a 	mov	sp,fp
 10018b0:	dfc00117 	ldw	ra,4(sp)
 10018b4:	df000017 	ldw	fp,0(sp)
 10018b8:	dec00204 	addi	sp,sp,8
 10018bc:	f800283a 	ret

010018c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10018c0:	defffd04 	addi	sp,sp,-12
 10018c4:	dfc00215 	stw	ra,8(sp)
 10018c8:	df000115 	stw	fp,4(sp)
 10018cc:	df000104 	addi	fp,sp,4
 10018d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10018d4:	e13fff17 	ldw	r4,-4(fp)
 10018d8:	01404034 	movhi	r5,256
 10018dc:	29551204 	addi	r5,r5,21576
 10018e0:	10029740 	call	1002974 <alt_dev_llist_insert>
}
 10018e4:	e037883a 	mov	sp,fp
 10018e8:	dfc00117 	ldw	ra,4(sp)
 10018ec:	df000017 	ldw	fp,0(sp)
 10018f0:	dec00204 	addi	sp,sp,8
 10018f4:	f800283a 	ret

010018f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10018f8:	defffa04 	addi	sp,sp,-24
 10018fc:	dfc00515 	stw	ra,20(sp)
 1001900:	df000415 	stw	fp,16(sp)
 1001904:	df000404 	addi	fp,sp,16
 1001908:	e13ffd15 	stw	r4,-12(fp)
 100190c:	e17ffe15 	stw	r5,-8(fp)
 1001910:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1001914:	e0bffd17 	ldw	r2,-12(fp)
 1001918:	10800017 	ldw	r2,0(r2)
 100191c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1001920:	e0bffc17 	ldw	r2,-16(fp)
 1001924:	11000a04 	addi	r4,r2,40
 1001928:	e0bffd17 	ldw	r2,-12(fp)
 100192c:	11c00217 	ldw	r7,8(r2)
 1001930:	e17ffe17 	ldw	r5,-8(fp)
 1001934:	e1bfff17 	ldw	r6,-4(fp)
 1001938:	1001f400 	call	1001f40 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100193c:	e037883a 	mov	sp,fp
 1001940:	dfc00117 	ldw	ra,4(sp)
 1001944:	df000017 	ldw	fp,0(sp)
 1001948:	dec00204 	addi	sp,sp,8
 100194c:	f800283a 	ret

01001950 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1001950:	defffa04 	addi	sp,sp,-24
 1001954:	dfc00515 	stw	ra,20(sp)
 1001958:	df000415 	stw	fp,16(sp)
 100195c:	df000404 	addi	fp,sp,16
 1001960:	e13ffd15 	stw	r4,-12(fp)
 1001964:	e17ffe15 	stw	r5,-8(fp)
 1001968:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100196c:	e0bffd17 	ldw	r2,-12(fp)
 1001970:	10800017 	ldw	r2,0(r2)
 1001974:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1001978:	e0bffc17 	ldw	r2,-16(fp)
 100197c:	11000a04 	addi	r4,r2,40
 1001980:	e0bffd17 	ldw	r2,-12(fp)
 1001984:	11c00217 	ldw	r7,8(r2)
 1001988:	e17ffe17 	ldw	r5,-8(fp)
 100198c:	e1bfff17 	ldw	r6,-4(fp)
 1001990:	10021640 	call	1002164 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1001994:	e037883a 	mov	sp,fp
 1001998:	dfc00117 	ldw	ra,4(sp)
 100199c:	df000017 	ldw	fp,0(sp)
 10019a0:	dec00204 	addi	sp,sp,8
 10019a4:	f800283a 	ret

010019a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 10019a8:	defffc04 	addi	sp,sp,-16
 10019ac:	dfc00315 	stw	ra,12(sp)
 10019b0:	df000215 	stw	fp,8(sp)
 10019b4:	df000204 	addi	fp,sp,8
 10019b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10019bc:	e0bfff17 	ldw	r2,-4(fp)
 10019c0:	10800017 	ldw	r2,0(r2)
 10019c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 10019c8:	e0bffe17 	ldw	r2,-8(fp)
 10019cc:	11000a04 	addi	r4,r2,40
 10019d0:	e0bfff17 	ldw	r2,-4(fp)
 10019d4:	11400217 	ldw	r5,8(r2)
 10019d8:	1001dd80 	call	1001dd8 <altera_avalon_jtag_uart_close>
}
 10019dc:	e037883a 	mov	sp,fp
 10019e0:	dfc00117 	ldw	ra,4(sp)
 10019e4:	df000017 	ldw	fp,0(sp)
 10019e8:	dec00204 	addi	sp,sp,8
 10019ec:	f800283a 	ret

010019f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10019f0:	defffa04 	addi	sp,sp,-24
 10019f4:	dfc00515 	stw	ra,20(sp)
 10019f8:	df000415 	stw	fp,16(sp)
 10019fc:	df000404 	addi	fp,sp,16
 1001a00:	e13ffd15 	stw	r4,-12(fp)
 1001a04:	e17ffe15 	stw	r5,-8(fp)
 1001a08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1001a0c:	e0bffd17 	ldw	r2,-12(fp)
 1001a10:	10800017 	ldw	r2,0(r2)
 1001a14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1001a18:	e0bffc17 	ldw	r2,-16(fp)
 1001a1c:	11000a04 	addi	r4,r2,40
 1001a20:	e17ffe17 	ldw	r5,-8(fp)
 1001a24:	e1bfff17 	ldw	r6,-4(fp)
 1001a28:	1001e4c0 	call	1001e4c <altera_avalon_jtag_uart_ioctl>
}
 1001a2c:	e037883a 	mov	sp,fp
 1001a30:	dfc00117 	ldw	ra,4(sp)
 1001a34:	df000017 	ldw	fp,0(sp)
 1001a38:	dec00204 	addi	sp,sp,8
 1001a3c:	f800283a 	ret

01001a40 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1001a40:	defffa04 	addi	sp,sp,-24
 1001a44:	dfc00515 	stw	ra,20(sp)
 1001a48:	df000415 	stw	fp,16(sp)
 1001a4c:	df000404 	addi	fp,sp,16
 1001a50:	e13ffd15 	stw	r4,-12(fp)
 1001a54:	e17ffe15 	stw	r5,-8(fp)
 1001a58:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1001a5c:	e0fffd17 	ldw	r3,-12(fp)
 1001a60:	00800044 	movi	r2,1
 1001a64:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1001a68:	e0bffd17 	ldw	r2,-12(fp)
 1001a6c:	10800017 	ldw	r2,0(r2)
 1001a70:	11000104 	addi	r4,r2,4
 1001a74:	e0bffd17 	ldw	r2,-12(fp)
 1001a78:	10800817 	ldw	r2,32(r2)
 1001a7c:	1007883a 	mov	r3,r2
 1001a80:	2005883a 	mov	r2,r4
 1001a84:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1001a88:	e13ffe17 	ldw	r4,-8(fp)
 1001a8c:	e17fff17 	ldw	r5,-4(fp)
 1001a90:	d8000015 	stw	zero,0(sp)
 1001a94:	01804034 	movhi	r6,256
 1001a98:	3186c004 	addi	r6,r6,6912
 1001a9c:	e1fffd17 	ldw	r7,-12(fp)
 1001aa0:	1002c140 	call	1002c14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1001aa4:	e0bffd17 	ldw	r2,-12(fp)
 1001aa8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1001aac:	e0bffd17 	ldw	r2,-12(fp)
 1001ab0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1001ab4:	00804034 	movhi	r2,256
 1001ab8:	109ad704 	addi	r2,r2,27484
 1001abc:	10800017 	ldw	r2,0(r2)
 1001ac0:	100b883a 	mov	r5,r2
 1001ac4:	01804034 	movhi	r6,256
 1001ac8:	31874a04 	addi	r6,r6,7464
 1001acc:	e1fffd17 	ldw	r7,-12(fp)
 1001ad0:	10011300 	call	1001130 <alt_alarm_start>
 1001ad4:	1004403a 	cmpge	r2,r2,zero
 1001ad8:	1000041e 	bne	r2,zero,1001aec <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1001adc:	e0fffd17 	ldw	r3,-12(fp)
 1001ae0:	00a00034 	movhi	r2,32768
 1001ae4:	10bfffc4 	addi	r2,r2,-1
 1001ae8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1001aec:	e037883a 	mov	sp,fp
 1001af0:	dfc00117 	ldw	ra,4(sp)
 1001af4:	df000017 	ldw	fp,0(sp)
 1001af8:	dec00204 	addi	sp,sp,8
 1001afc:	f800283a 	ret

01001b00 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1001b00:	defff804 	addi	sp,sp,-32
 1001b04:	df000715 	stw	fp,28(sp)
 1001b08:	df000704 	addi	fp,sp,28
 1001b0c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1001b10:	e0bfff17 	ldw	r2,-4(fp)
 1001b14:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 1001b18:	e0bffe17 	ldw	r2,-8(fp)
 1001b1c:	10800017 	ldw	r2,0(r2)
 1001b20:	e0bffd15 	stw	r2,-12(fp)
 1001b24:	00000006 	br	1001b28 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1001b28:	e0bffd17 	ldw	r2,-12(fp)
 1001b2c:	10800104 	addi	r2,r2,4
 1001b30:	10800037 	ldwio	r2,0(r2)
 1001b34:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1001b38:	e0bffc17 	ldw	r2,-16(fp)
 1001b3c:	1080c00c 	andi	r2,r2,768
 1001b40:	1005003a 	cmpeq	r2,r2,zero
 1001b44:	1000741e 	bne	r2,zero,1001d18 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1001b48:	e0bffc17 	ldw	r2,-16(fp)
 1001b4c:	1080400c 	andi	r2,r2,256
 1001b50:	1005003a 	cmpeq	r2,r2,zero
 1001b54:	1000351e 	bne	r2,zero,1001c2c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1001b58:	00800074 	movhi	r2,1
 1001b5c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1001b60:	e0bffe17 	ldw	r2,-8(fp)
 1001b64:	10800a17 	ldw	r2,40(r2)
 1001b68:	10800044 	addi	r2,r2,1
 1001b6c:	1081ffcc 	andi	r2,r2,2047
 1001b70:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 1001b74:	e0bffe17 	ldw	r2,-8(fp)
 1001b78:	10c00b17 	ldw	r3,44(r2)
 1001b7c:	e0bffa17 	ldw	r2,-24(fp)
 1001b80:	18801626 	beq	r3,r2,1001bdc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1001b84:	e0bffd17 	ldw	r2,-12(fp)
 1001b88:	10800037 	ldwio	r2,0(r2)
 1001b8c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1001b90:	e0bffb17 	ldw	r2,-20(fp)
 1001b94:	10a0000c 	andi	r2,r2,32768
 1001b98:	1005003a 	cmpeq	r2,r2,zero
 1001b9c:	10000f1e 	bne	r2,zero,1001bdc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1001ba0:	e0bffe17 	ldw	r2,-8(fp)
 1001ba4:	10c00a17 	ldw	r3,40(r2)
 1001ba8:	e0bffb17 	ldw	r2,-20(fp)
 1001bac:	1009883a 	mov	r4,r2
 1001bb0:	e0bffe17 	ldw	r2,-8(fp)
 1001bb4:	1885883a 	add	r2,r3,r2
 1001bb8:	10800e04 	addi	r2,r2,56
 1001bbc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1001bc0:	e0bffe17 	ldw	r2,-8(fp)
 1001bc4:	10800a17 	ldw	r2,40(r2)
 1001bc8:	10800044 	addi	r2,r2,1
 1001bcc:	10c1ffcc 	andi	r3,r2,2047
 1001bd0:	e0bffe17 	ldw	r2,-8(fp)
 1001bd4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1001bd8:	003fe106 	br	1001b60 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1001bdc:	e0bffb17 	ldw	r2,-20(fp)
 1001be0:	10bfffec 	andhi	r2,r2,65535
 1001be4:	1005003a 	cmpeq	r2,r2,zero
 1001be8:	1000101e 	bne	r2,zero,1001c2c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1001bec:	e0bffe17 	ldw	r2,-8(fp)
 1001bf0:	10c00817 	ldw	r3,32(r2)
 1001bf4:	00bfff84 	movi	r2,-2
 1001bf8:	1886703a 	and	r3,r3,r2
 1001bfc:	e0bffe17 	ldw	r2,-8(fp)
 1001c00:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1001c04:	e0bffd17 	ldw	r2,-12(fp)
 1001c08:	11000104 	addi	r4,r2,4
 1001c0c:	e0bffe17 	ldw	r2,-8(fp)
 1001c10:	10800817 	ldw	r2,32(r2)
 1001c14:	1007883a 	mov	r3,r2
 1001c18:	2005883a 	mov	r2,r4
 1001c1c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1001c20:	e0bffd17 	ldw	r2,-12(fp)
 1001c24:	10800104 	addi	r2,r2,4
 1001c28:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1001c2c:	e0bffc17 	ldw	r2,-16(fp)
 1001c30:	1080800c 	andi	r2,r2,512
 1001c34:	1005003a 	cmpeq	r2,r2,zero
 1001c38:	103fbb1e 	bne	r2,zero,1001b28 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1001c3c:	e0bffc17 	ldw	r2,-16(fp)
 1001c40:	10bfffec 	andhi	r2,r2,65535
 1001c44:	1004d43a 	srli	r2,r2,16
 1001c48:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1001c4c:	00001506 	br	1001ca4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1001c50:	e13ffd17 	ldw	r4,-12(fp)
 1001c54:	e0bffe17 	ldw	r2,-8(fp)
 1001c58:	10c00d17 	ldw	r3,52(r2)
 1001c5c:	e0bffe17 	ldw	r2,-8(fp)
 1001c60:	1885883a 	add	r2,r3,r2
 1001c64:	10820e04 	addi	r2,r2,2104
 1001c68:	10800003 	ldbu	r2,0(r2)
 1001c6c:	10c03fcc 	andi	r3,r2,255
 1001c70:	18c0201c 	xori	r3,r3,128
 1001c74:	18ffe004 	addi	r3,r3,-128
 1001c78:	2005883a 	mov	r2,r4
 1001c7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1001c80:	e0bffe17 	ldw	r2,-8(fp)
 1001c84:	10800d17 	ldw	r2,52(r2)
 1001c88:	10800044 	addi	r2,r2,1
 1001c8c:	10c1ffcc 	andi	r3,r2,2047
 1001c90:	e0bffe17 	ldw	r2,-8(fp)
 1001c94:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1001c98:	e0bff917 	ldw	r2,-28(fp)
 1001c9c:	10bfffc4 	addi	r2,r2,-1
 1001ca0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1001ca4:	e0bff917 	ldw	r2,-28(fp)
 1001ca8:	1005003a 	cmpeq	r2,r2,zero
 1001cac:	1000051e 	bne	r2,zero,1001cc4 <altera_avalon_jtag_uart_irq+0x1c4>
 1001cb0:	e0bffe17 	ldw	r2,-8(fp)
 1001cb4:	10c00d17 	ldw	r3,52(r2)
 1001cb8:	e0bffe17 	ldw	r2,-8(fp)
 1001cbc:	10800c17 	ldw	r2,48(r2)
 1001cc0:	18bfe31e 	bne	r3,r2,1001c50 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1001cc4:	e0bff917 	ldw	r2,-28(fp)
 1001cc8:	1005003a 	cmpeq	r2,r2,zero
 1001ccc:	103f961e 	bne	r2,zero,1001b28 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1001cd0:	e0bffe17 	ldw	r2,-8(fp)
 1001cd4:	10c00817 	ldw	r3,32(r2)
 1001cd8:	00bfff44 	movi	r2,-3
 1001cdc:	1886703a 	and	r3,r3,r2
 1001ce0:	e0bffe17 	ldw	r2,-8(fp)
 1001ce4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1001ce8:	e0bffe17 	ldw	r2,-8(fp)
 1001cec:	10800017 	ldw	r2,0(r2)
 1001cf0:	11000104 	addi	r4,r2,4
 1001cf4:	e0bffe17 	ldw	r2,-8(fp)
 1001cf8:	10800817 	ldw	r2,32(r2)
 1001cfc:	1007883a 	mov	r3,r2
 1001d00:	2005883a 	mov	r2,r4
 1001d04:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1001d08:	e0bffd17 	ldw	r2,-12(fp)
 1001d0c:	10800104 	addi	r2,r2,4
 1001d10:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1001d14:	003f8406 	br	1001b28 <altera_avalon_jtag_uart_irq+0x28>
}
 1001d18:	e037883a 	mov	sp,fp
 1001d1c:	df000017 	ldw	fp,0(sp)
 1001d20:	dec00104 	addi	sp,sp,4
 1001d24:	f800283a 	ret

01001d28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1001d28:	defffc04 	addi	sp,sp,-16
 1001d2c:	df000315 	stw	fp,12(sp)
 1001d30:	df000304 	addi	fp,sp,12
 1001d34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1001d38:	e0bfff17 	ldw	r2,-4(fp)
 1001d3c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1001d40:	e0bffe17 	ldw	r2,-8(fp)
 1001d44:	10800017 	ldw	r2,0(r2)
 1001d48:	10800104 	addi	r2,r2,4
 1001d4c:	10800037 	ldwio	r2,0(r2)
 1001d50:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1001d54:	e0bffd17 	ldw	r2,-12(fp)
 1001d58:	1081000c 	andi	r2,r2,1024
 1001d5c:	1005003a 	cmpeq	r2,r2,zero
 1001d60:	10000c1e 	bne	r2,zero,1001d94 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1001d64:	e0bffe17 	ldw	r2,-8(fp)
 1001d68:	10800017 	ldw	r2,0(r2)
 1001d6c:	11000104 	addi	r4,r2,4
 1001d70:	e0bffe17 	ldw	r2,-8(fp)
 1001d74:	10800817 	ldw	r2,32(r2)
 1001d78:	10810014 	ori	r2,r2,1024
 1001d7c:	1007883a 	mov	r3,r2
 1001d80:	2005883a 	mov	r2,r4
 1001d84:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1001d88:	e0bffe17 	ldw	r2,-8(fp)
 1001d8c:	10000915 	stw	zero,36(r2)
 1001d90:	00000a06 	br	1001dbc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1001d94:	e0bffe17 	ldw	r2,-8(fp)
 1001d98:	10c00917 	ldw	r3,36(r2)
 1001d9c:	00a00034 	movhi	r2,32768
 1001da0:	10bfff04 	addi	r2,r2,-4
 1001da4:	10c00536 	bltu	r2,r3,1001dbc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1001da8:	e0bffe17 	ldw	r2,-8(fp)
 1001dac:	10800917 	ldw	r2,36(r2)
 1001db0:	10c00044 	addi	r3,r2,1
 1001db4:	e0bffe17 	ldw	r2,-8(fp)
 1001db8:	10c00915 	stw	r3,36(r2)
 1001dbc:	00804034 	movhi	r2,256
 1001dc0:	109ad704 	addi	r2,r2,27484
 1001dc4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1001dc8:	e037883a 	mov	sp,fp
 1001dcc:	df000017 	ldw	fp,0(sp)
 1001dd0:	dec00104 	addi	sp,sp,4
 1001dd4:	f800283a 	ret

01001dd8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1001dd8:	defffc04 	addi	sp,sp,-16
 1001ddc:	df000315 	stw	fp,12(sp)
 1001de0:	df000304 	addi	fp,sp,12
 1001de4:	e13ffd15 	stw	r4,-12(fp)
 1001de8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1001dec:	00000706 	br	1001e0c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1001df0:	e0bffe17 	ldw	r2,-8(fp)
 1001df4:	1090000c 	andi	r2,r2,16384
 1001df8:	1005003a 	cmpeq	r2,r2,zero
 1001dfc:	1000031e 	bne	r2,zero,1001e0c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1001e00:	00bffd44 	movi	r2,-11
 1001e04:	e0bfff15 	stw	r2,-4(fp)
 1001e08:	00000b06 	br	1001e38 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1001e0c:	e0bffd17 	ldw	r2,-12(fp)
 1001e10:	10c00d17 	ldw	r3,52(r2)
 1001e14:	e0bffd17 	ldw	r2,-12(fp)
 1001e18:	10800c17 	ldw	r2,48(r2)
 1001e1c:	18800526 	beq	r3,r2,1001e34 <altera_avalon_jtag_uart_close+0x5c>
 1001e20:	e0bffd17 	ldw	r2,-12(fp)
 1001e24:	10c00917 	ldw	r3,36(r2)
 1001e28:	e0bffd17 	ldw	r2,-12(fp)
 1001e2c:	10800117 	ldw	r2,4(r2)
 1001e30:	18bfef36 	bltu	r3,r2,1001df0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1001e34:	e03fff15 	stw	zero,-4(fp)
 1001e38:	e0bfff17 	ldw	r2,-4(fp)
}
 1001e3c:	e037883a 	mov	sp,fp
 1001e40:	df000017 	ldw	fp,0(sp)
 1001e44:	dec00104 	addi	sp,sp,4
 1001e48:	f800283a 	ret

01001e4c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1001e4c:	defff804 	addi	sp,sp,-32
 1001e50:	df000715 	stw	fp,28(sp)
 1001e54:	df000704 	addi	fp,sp,28
 1001e58:	e13ffb15 	stw	r4,-20(fp)
 1001e5c:	e17ffc15 	stw	r5,-16(fp)
 1001e60:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1001e64:	00bff9c4 	movi	r2,-25
 1001e68:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1001e6c:	e0bffc17 	ldw	r2,-16(fp)
 1001e70:	e0bfff15 	stw	r2,-4(fp)
 1001e74:	e0ffff17 	ldw	r3,-4(fp)
 1001e78:	189a8060 	cmpeqi	r2,r3,27137
 1001e7c:	1000041e 	bne	r2,zero,1001e90 <altera_avalon_jtag_uart_ioctl+0x44>
 1001e80:	e0ffff17 	ldw	r3,-4(fp)
 1001e84:	189a80a0 	cmpeqi	r2,r3,27138
 1001e88:	10001b1e 	bne	r2,zero,1001ef8 <altera_avalon_jtag_uart_ioctl+0xac>
 1001e8c:	00002706 	br	1001f2c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1001e90:	e0bffb17 	ldw	r2,-20(fp)
 1001e94:	10c00117 	ldw	r3,4(r2)
 1001e98:	00a00034 	movhi	r2,32768
 1001e9c:	10bfffc4 	addi	r2,r2,-1
 1001ea0:	18802226 	beq	r3,r2,1001f2c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1001ea4:	e0bffd17 	ldw	r2,-12(fp)
 1001ea8:	10800017 	ldw	r2,0(r2)
 1001eac:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1001eb0:	e0bff917 	ldw	r2,-28(fp)
 1001eb4:	10800090 	cmplti	r2,r2,2
 1001eb8:	1000071e 	bne	r2,zero,1001ed8 <altera_avalon_jtag_uart_ioctl+0x8c>
 1001ebc:	e0fff917 	ldw	r3,-28(fp)
 1001ec0:	00a00034 	movhi	r2,32768
 1001ec4:	10bfffc4 	addi	r2,r2,-1
 1001ec8:	18800326 	beq	r3,r2,1001ed8 <altera_avalon_jtag_uart_ioctl+0x8c>
 1001ecc:	e0bff917 	ldw	r2,-28(fp)
 1001ed0:	e0bffe15 	stw	r2,-8(fp)
 1001ed4:	00000306 	br	1001ee4 <altera_avalon_jtag_uart_ioctl+0x98>
 1001ed8:	00e00034 	movhi	r3,32768
 1001edc:	18ffff84 	addi	r3,r3,-2
 1001ee0:	e0fffe15 	stw	r3,-8(fp)
 1001ee4:	e0bffb17 	ldw	r2,-20(fp)
 1001ee8:	e0fffe17 	ldw	r3,-8(fp)
 1001eec:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1001ef0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1001ef4:	00000d06 	br	1001f2c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1001ef8:	e0bffb17 	ldw	r2,-20(fp)
 1001efc:	10c00117 	ldw	r3,4(r2)
 1001f00:	00a00034 	movhi	r2,32768
 1001f04:	10bfffc4 	addi	r2,r2,-1
 1001f08:	18800826 	beq	r3,r2,1001f2c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1001f0c:	e13ffd17 	ldw	r4,-12(fp)
 1001f10:	e0bffb17 	ldw	r2,-20(fp)
 1001f14:	10c00917 	ldw	r3,36(r2)
 1001f18:	e0bffb17 	ldw	r2,-20(fp)
 1001f1c:	10800117 	ldw	r2,4(r2)
 1001f20:	1885803a 	cmpltu	r2,r3,r2
 1001f24:	20800015 	stw	r2,0(r4)
      rc = 0;
 1001f28:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1001f2c:	e0bffa17 	ldw	r2,-24(fp)
}
 1001f30:	e037883a 	mov	sp,fp
 1001f34:	df000017 	ldw	fp,0(sp)
 1001f38:	dec00104 	addi	sp,sp,4
 1001f3c:	f800283a 	ret

01001f40 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1001f40:	defff204 	addi	sp,sp,-56
 1001f44:	dfc00d15 	stw	ra,52(sp)
 1001f48:	df000c15 	stw	fp,48(sp)
 1001f4c:	df000c04 	addi	fp,sp,48
 1001f50:	e13ffb15 	stw	r4,-20(fp)
 1001f54:	e17ffc15 	stw	r5,-16(fp)
 1001f58:	e1bffd15 	stw	r6,-12(fp)
 1001f5c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1001f60:	e0bffc17 	ldw	r2,-16(fp)
 1001f64:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1001f68:	00004806 	br	100208c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1001f6c:	e0bffb17 	ldw	r2,-20(fp)
 1001f70:	10800a17 	ldw	r2,40(r2)
 1001f74:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1001f78:	e0bffb17 	ldw	r2,-20(fp)
 1001f7c:	10800b17 	ldw	r2,44(r2)
 1001f80:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1001f84:	e0fff717 	ldw	r3,-36(fp)
 1001f88:	e0bff617 	ldw	r2,-40(fp)
 1001f8c:	18800536 	bltu	r3,r2,1001fa4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1001f90:	e0bff717 	ldw	r2,-36(fp)
 1001f94:	e0fff617 	ldw	r3,-40(fp)
 1001f98:	10c5c83a 	sub	r2,r2,r3
 1001f9c:	e0bff815 	stw	r2,-32(fp)
 1001fa0:	00000406 	br	1001fb4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1001fa4:	00820004 	movi	r2,2048
 1001fa8:	e0fff617 	ldw	r3,-40(fp)
 1001fac:	10c5c83a 	sub	r2,r2,r3
 1001fb0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1001fb4:	e0bff817 	ldw	r2,-32(fp)
 1001fb8:	1005003a 	cmpeq	r2,r2,zero
 1001fbc:	10001f1e 	bne	r2,zero,100203c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1001fc0:	e0fffd17 	ldw	r3,-12(fp)
 1001fc4:	e0bff817 	ldw	r2,-32(fp)
 1001fc8:	1880022e 	bgeu	r3,r2,1001fd4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1001fcc:	e0bffd17 	ldw	r2,-12(fp)
 1001fd0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1001fd4:	e0bffb17 	ldw	r2,-20(fp)
 1001fd8:	10c00e04 	addi	r3,r2,56
 1001fdc:	e0bff617 	ldw	r2,-40(fp)
 1001fe0:	1887883a 	add	r3,r3,r2
 1001fe4:	e0bffa17 	ldw	r2,-24(fp)
 1001fe8:	1009883a 	mov	r4,r2
 1001fec:	180b883a 	mov	r5,r3
 1001ff0:	e1bff817 	ldw	r6,-32(fp)
 1001ff4:	10036880 	call	1003688 <memcpy>
      ptr   += n;
 1001ff8:	e0fff817 	ldw	r3,-32(fp)
 1001ffc:	e0bffa17 	ldw	r2,-24(fp)
 1002000:	10c5883a 	add	r2,r2,r3
 1002004:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1002008:	e0fffd17 	ldw	r3,-12(fp)
 100200c:	e0bff817 	ldw	r2,-32(fp)
 1002010:	1885c83a 	sub	r2,r3,r2
 1002014:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1002018:	e0fff617 	ldw	r3,-40(fp)
 100201c:	e0bff817 	ldw	r2,-32(fp)
 1002020:	1885883a 	add	r2,r3,r2
 1002024:	10c1ffcc 	andi	r3,r2,2047
 1002028:	e0bffb17 	ldw	r2,-20(fp)
 100202c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1002030:	e0bffd17 	ldw	r2,-12(fp)
 1002034:	10800048 	cmpgei	r2,r2,1
 1002038:	103fcc1e 	bne	r2,zero,1001f6c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100203c:	e0fffa17 	ldw	r3,-24(fp)
 1002040:	e0bffc17 	ldw	r2,-16(fp)
 1002044:	1880141e 	bne	r3,r2,1002098 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1002048:	e0bffe17 	ldw	r2,-8(fp)
 100204c:	1090000c 	andi	r2,r2,16384
 1002050:	1004c03a 	cmpne	r2,r2,zero
 1002054:	1000101e 	bne	r2,zero,1002098 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1002058:	e0bffb17 	ldw	r2,-20(fp)
 100205c:	10c00a17 	ldw	r3,40(r2)
 1002060:	e0bff717 	ldw	r2,-36(fp)
 1002064:	1880051e 	bne	r3,r2,100207c <altera_avalon_jtag_uart_read+0x13c>
 1002068:	e0bffb17 	ldw	r2,-20(fp)
 100206c:	10c00917 	ldw	r3,36(r2)
 1002070:	e0bffb17 	ldw	r2,-20(fp)
 1002074:	10800117 	ldw	r2,4(r2)
 1002078:	18bff736 	bltu	r3,r2,1002058 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100207c:	e0bffb17 	ldw	r2,-20(fp)
 1002080:	10c00a17 	ldw	r3,40(r2)
 1002084:	e0bff717 	ldw	r2,-36(fp)
 1002088:	18800326 	beq	r3,r2,1002098 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100208c:	e0bffd17 	ldw	r2,-12(fp)
 1002090:	10800048 	cmpgei	r2,r2,1
 1002094:	103fb51e 	bne	r2,zero,1001f6c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1002098:	e0fffa17 	ldw	r3,-24(fp)
 100209c:	e0bffc17 	ldw	r2,-16(fp)
 10020a0:	18801926 	beq	r3,r2,1002108 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10020a4:	0005303a 	rdctl	r2,status
 10020a8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10020ac:	e0fff517 	ldw	r3,-44(fp)
 10020b0:	00bfff84 	movi	r2,-2
 10020b4:	1884703a 	and	r2,r3,r2
 10020b8:	1001703a 	wrctl	status,r2
  
  return context;
 10020bc:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10020c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10020c4:	e0bffb17 	ldw	r2,-20(fp)
 10020c8:	10800817 	ldw	r2,32(r2)
 10020cc:	10c00054 	ori	r3,r2,1
 10020d0:	e0bffb17 	ldw	r2,-20(fp)
 10020d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10020d8:	e0bffb17 	ldw	r2,-20(fp)
 10020dc:	10800017 	ldw	r2,0(r2)
 10020e0:	11000104 	addi	r4,r2,4
 10020e4:	e0bffb17 	ldw	r2,-20(fp)
 10020e8:	10800817 	ldw	r2,32(r2)
 10020ec:	1007883a 	mov	r3,r2
 10020f0:	2005883a 	mov	r2,r4
 10020f4:	10c00035 	stwio	r3,0(r2)
 10020f8:	e0bff917 	ldw	r2,-28(fp)
 10020fc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1002100:	e0bff417 	ldw	r2,-48(fp)
 1002104:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1002108:	e0fffa17 	ldw	r3,-24(fp)
 100210c:	e0bffc17 	ldw	r2,-16(fp)
 1002110:	18800526 	beq	r3,r2,1002128 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1002114:	e0fffa17 	ldw	r3,-24(fp)
 1002118:	e0bffc17 	ldw	r2,-16(fp)
 100211c:	1887c83a 	sub	r3,r3,r2
 1002120:	e0ffff15 	stw	r3,-4(fp)
 1002124:	00000906 	br	100214c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1002128:	e0bffe17 	ldw	r2,-8(fp)
 100212c:	1090000c 	andi	r2,r2,16384
 1002130:	1005003a 	cmpeq	r2,r2,zero
 1002134:	1000031e 	bne	r2,zero,1002144 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1002138:	00bffd44 	movi	r2,-11
 100213c:	e0bfff15 	stw	r2,-4(fp)
 1002140:	00000206 	br	100214c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1002144:	00bffec4 	movi	r2,-5
 1002148:	e0bfff15 	stw	r2,-4(fp)
 100214c:	e0bfff17 	ldw	r2,-4(fp)
}
 1002150:	e037883a 	mov	sp,fp
 1002154:	dfc00117 	ldw	ra,4(sp)
 1002158:	df000017 	ldw	fp,0(sp)
 100215c:	dec00204 	addi	sp,sp,8
 1002160:	f800283a 	ret

01002164 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1002164:	defff204 	addi	sp,sp,-56
 1002168:	dfc00d15 	stw	ra,52(sp)
 100216c:	df000c15 	stw	fp,48(sp)
 1002170:	df000c04 	addi	fp,sp,48
 1002174:	e13ffb15 	stw	r4,-20(fp)
 1002178:	e17ffc15 	stw	r5,-16(fp)
 100217c:	e1bffd15 	stw	r6,-12(fp)
 1002180:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1002184:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1002188:	e0bffc17 	ldw	r2,-16(fp)
 100218c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1002190:	00003a06 	br	100227c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1002194:	e0bffb17 	ldw	r2,-20(fp)
 1002198:	10800c17 	ldw	r2,48(r2)
 100219c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 10021a0:	e0bffb17 	ldw	r2,-20(fp)
 10021a4:	10800d17 	ldw	r2,52(r2)
 10021a8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 10021ac:	e0fffa17 	ldw	r3,-24(fp)
 10021b0:	e0bff917 	ldw	r2,-28(fp)
 10021b4:	1880062e 	bgeu	r3,r2,10021d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10021b8:	e0fff917 	ldw	r3,-28(fp)
 10021bc:	e0bffa17 	ldw	r2,-24(fp)
 10021c0:	1885c83a 	sub	r2,r3,r2
 10021c4:	10bfffc4 	addi	r2,r2,-1
 10021c8:	e0bff815 	stw	r2,-32(fp)
 10021cc:	00000c06 	br	1002200 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 10021d0:	e0bff917 	ldw	r2,-28(fp)
 10021d4:	1005003a 	cmpeq	r2,r2,zero
 10021d8:	1000051e 	bne	r2,zero,10021f0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10021dc:	00820004 	movi	r2,2048
 10021e0:	e0fffa17 	ldw	r3,-24(fp)
 10021e4:	10c5c83a 	sub	r2,r2,r3
 10021e8:	e0bff815 	stw	r2,-32(fp)
 10021ec:	00000406 	br	1002200 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10021f0:	0081ffc4 	movi	r2,2047
 10021f4:	e0fffa17 	ldw	r3,-24(fp)
 10021f8:	10c5c83a 	sub	r2,r2,r3
 10021fc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1002200:	e0bff817 	ldw	r2,-32(fp)
 1002204:	1005003a 	cmpeq	r2,r2,zero
 1002208:	10001f1e 	bne	r2,zero,1002288 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100220c:	e0fffd17 	ldw	r3,-12(fp)
 1002210:	e0bff817 	ldw	r2,-32(fp)
 1002214:	1880022e 	bgeu	r3,r2,1002220 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 1002218:	e0bffd17 	ldw	r2,-12(fp)
 100221c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1002220:	e0bffb17 	ldw	r2,-20(fp)
 1002224:	10c20e04 	addi	r3,r2,2104
 1002228:	e0bffa17 	ldw	r2,-24(fp)
 100222c:	1885883a 	add	r2,r3,r2
 1002230:	e0fffc17 	ldw	r3,-16(fp)
 1002234:	1009883a 	mov	r4,r2
 1002238:	180b883a 	mov	r5,r3
 100223c:	e1bff817 	ldw	r6,-32(fp)
 1002240:	10036880 	call	1003688 <memcpy>
      ptr   += n;
 1002244:	e0fff817 	ldw	r3,-32(fp)
 1002248:	e0bffc17 	ldw	r2,-16(fp)
 100224c:	10c5883a 	add	r2,r2,r3
 1002250:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1002254:	e0fffd17 	ldw	r3,-12(fp)
 1002258:	e0bff817 	ldw	r2,-32(fp)
 100225c:	1885c83a 	sub	r2,r3,r2
 1002260:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1002264:	e0fffa17 	ldw	r3,-24(fp)
 1002268:	e0bff817 	ldw	r2,-32(fp)
 100226c:	1885883a 	add	r2,r3,r2
 1002270:	10c1ffcc 	andi	r3,r2,2047
 1002274:	e0bffb17 	ldw	r2,-20(fp)
 1002278:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100227c:	e0bffd17 	ldw	r2,-12(fp)
 1002280:	10800048 	cmpgei	r2,r2,1
 1002284:	103fc31e 	bne	r2,zero,1002194 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1002288:	0005303a 	rdctl	r2,status
 100228c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1002290:	e0fff517 	ldw	r3,-44(fp)
 1002294:	00bfff84 	movi	r2,-2
 1002298:	1884703a 	and	r2,r3,r2
 100229c:	1001703a 	wrctl	status,r2
  
  return context;
 10022a0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10022a4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10022a8:	e0bffb17 	ldw	r2,-20(fp)
 10022ac:	10800817 	ldw	r2,32(r2)
 10022b0:	10c00094 	ori	r3,r2,2
 10022b4:	e0bffb17 	ldw	r2,-20(fp)
 10022b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10022bc:	e0bffb17 	ldw	r2,-20(fp)
 10022c0:	10800017 	ldw	r2,0(r2)
 10022c4:	11000104 	addi	r4,r2,4
 10022c8:	e0bffb17 	ldw	r2,-20(fp)
 10022cc:	10800817 	ldw	r2,32(r2)
 10022d0:	1007883a 	mov	r3,r2
 10022d4:	2005883a 	mov	r2,r4
 10022d8:	10c00035 	stwio	r3,0(r2)
 10022dc:	e0bff717 	ldw	r2,-36(fp)
 10022e0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10022e4:	e0bff417 	ldw	r2,-48(fp)
 10022e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10022ec:	e0bffd17 	ldw	r2,-12(fp)
 10022f0:	10800050 	cmplti	r2,r2,1
 10022f4:	1000111e 	bne	r2,zero,100233c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 10022f8:	e0bffe17 	ldw	r2,-8(fp)
 10022fc:	1090000c 	andi	r2,r2,16384
 1002300:	1004c03a 	cmpne	r2,r2,zero
 1002304:	1000101e 	bne	r2,zero,1002348 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1002308:	e0bffb17 	ldw	r2,-20(fp)
 100230c:	10c00d17 	ldw	r3,52(r2)
 1002310:	e0bff917 	ldw	r2,-28(fp)
 1002314:	1880051e 	bne	r3,r2,100232c <altera_avalon_jtag_uart_write+0x1c8>
 1002318:	e0bffb17 	ldw	r2,-20(fp)
 100231c:	10c00917 	ldw	r3,36(r2)
 1002320:	e0bffb17 	ldw	r2,-20(fp)
 1002324:	10800117 	ldw	r2,4(r2)
 1002328:	18bff736 	bltu	r3,r2,1002308 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100232c:	e0bffb17 	ldw	r2,-20(fp)
 1002330:	10c00d17 	ldw	r3,52(r2)
 1002334:	e0bff917 	ldw	r2,-28(fp)
 1002338:	18800326 	beq	r3,r2,1002348 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 100233c:	e0bffd17 	ldw	r2,-12(fp)
 1002340:	10800048 	cmpgei	r2,r2,1
 1002344:	103fcd1e 	bne	r2,zero,100227c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1002348:	e0fffc17 	ldw	r3,-16(fp)
 100234c:	e0bff617 	ldw	r2,-40(fp)
 1002350:	18800526 	beq	r3,r2,1002368 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1002354:	e0fffc17 	ldw	r3,-16(fp)
 1002358:	e0bff617 	ldw	r2,-40(fp)
 100235c:	1887c83a 	sub	r3,r3,r2
 1002360:	e0ffff15 	stw	r3,-4(fp)
 1002364:	00000906 	br	100238c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1002368:	e0bffe17 	ldw	r2,-8(fp)
 100236c:	1090000c 	andi	r2,r2,16384
 1002370:	1005003a 	cmpeq	r2,r2,zero
 1002374:	1000031e 	bne	r2,zero,1002384 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1002378:	00bffd44 	movi	r2,-11
 100237c:	e0bfff15 	stw	r2,-4(fp)
 1002380:	00000206 	br	100238c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1002384:	00bffec4 	movi	r2,-5
 1002388:	e0bfff15 	stw	r2,-4(fp)
 100238c:	e0bfff17 	ldw	r2,-4(fp)
}
 1002390:	e037883a 	mov	sp,fp
 1002394:	dfc00117 	ldw	ra,4(sp)
 1002398:	df000017 	ldw	fp,0(sp)
 100239c:	dec00204 	addi	sp,sp,8
 10023a0:	f800283a 	ret

010023a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10023a4:	defffa04 	addi	sp,sp,-24
 10023a8:	dfc00515 	stw	ra,20(sp)
 10023ac:	df000415 	stw	fp,16(sp)
 10023b0:	df000404 	addi	fp,sp,16
 10023b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10023b8:	e0bfff17 	ldw	r2,-4(fp)
 10023bc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10023c0:	e0bfff17 	ldw	r2,-4(fp)
 10023c4:	10800104 	addi	r2,r2,4
 10023c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10023cc:	0005303a 	rdctl	r2,status
 10023d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10023d4:	e0fffd17 	ldw	r3,-12(fp)
 10023d8:	00bfff84 	movi	r2,-2
 10023dc:	1884703a 	and	r2,r3,r2
 10023e0:	1001703a 	wrctl	status,r2
  
  return context;
 10023e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10023e8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 10023ec:	10014740 	call	1001474 <alt_tick>
 10023f0:	e0bffe17 	ldw	r2,-8(fp)
 10023f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10023f8:	e0bffc17 	ldw	r2,-16(fp)
 10023fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1002400:	e037883a 	mov	sp,fp
 1002404:	dfc00117 	ldw	ra,4(sp)
 1002408:	df000017 	ldw	fp,0(sp)
 100240c:	dec00204 	addi	sp,sp,8
 1002410:	f800283a 	ret

01002414 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1002414:	defff804 	addi	sp,sp,-32
 1002418:	dfc00715 	stw	ra,28(sp)
 100241c:	df000615 	stw	fp,24(sp)
 1002420:	df000604 	addi	fp,sp,24
 1002424:	e13ffc15 	stw	r4,-16(fp)
 1002428:	e17ffd15 	stw	r5,-12(fp)
 100242c:	e1bffe15 	stw	r6,-8(fp)
 1002430:	e1ffff15 	stw	r7,-4(fp)
 1002434:	e0bfff17 	ldw	r2,-4(fp)
 1002438:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100243c:	00804034 	movhi	r2,256
 1002440:	109ad704 	addi	r2,r2,27484
 1002444:	10800017 	ldw	r2,0(r2)
 1002448:	1004c03a 	cmpne	r2,r2,zero
 100244c:	1000041e 	bne	r2,zero,1002460 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1002450:	00c04034 	movhi	r3,256
 1002454:	18dad704 	addi	r3,r3,27484
 1002458:	e0bffb17 	ldw	r2,-20(fp)
 100245c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1002460:	e0bffc17 	ldw	r2,-16(fp)
 1002464:	10800104 	addi	r2,r2,4
 1002468:	1007883a 	mov	r3,r2
 100246c:	008001c4 	movi	r2,7
 1002470:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1002474:	d8000015 	stw	zero,0(sp)
 1002478:	e13ffd17 	ldw	r4,-12(fp)
 100247c:	e17ffe17 	ldw	r5,-8(fp)
 1002480:	01804034 	movhi	r6,256
 1002484:	3188e904 	addi	r6,r6,9124
 1002488:	e1fffc17 	ldw	r7,-16(fp)
 100248c:	1002c140 	call	1002c14 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1002490:	e037883a 	mov	sp,fp
 1002494:	dfc00117 	ldw	ra,4(sp)
 1002498:	df000017 	ldw	fp,0(sp)
 100249c:	dec00204 	addi	sp,sp,8
 10024a0:	f800283a 	ret

010024a4 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 10024a4:	defffc04 	addi	sp,sp,-16
 10024a8:	dfc00315 	stw	ra,12(sp)
 10024ac:	df000215 	stw	fp,8(sp)
 10024b0:	df000204 	addi	fp,sp,8
 10024b4:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 10024b8:	e0bfff17 	ldw	r2,-4(fp)
 10024bc:	10800217 	ldw	r2,8(r2)
 10024c0:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 10024c4:	00000c06 	br	10024f8 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 10024c8:	e13ffe17 	ldw	r4,-8(fp)
 10024cc:	01404034 	movhi	r5,256
 10024d0:	294f5304 	addi	r5,r5,15692
 10024d4:	10037280 	call	1003728 <strcmp>
 10024d8:	1004c03a 	cmpne	r2,r2,zero
 10024dc:	1000031e 	bne	r2,zero,10024ec <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 10024e0:	e0bffe17 	ldw	r2,-8(fp)
 10024e4:	10000005 	stb	zero,0(r2)
			break;
 10024e8:	00000a06 	br	1002514 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 10024ec:	e0bffe17 	ldw	r2,-8(fp)
 10024f0:	10800044 	addi	r2,r2,1
 10024f4:	e0bffe15 	stw	r2,-8(fp)
 10024f8:	e0bffe17 	ldw	r2,-8(fp)
 10024fc:	10800003 	ldbu	r2,0(r2)
 1002500:	10803fcc 	andi	r2,r2,255
 1002504:	1080201c 	xori	r2,r2,128
 1002508:	10bfe004 	addi	r2,r2,-128
 100250c:	1004c03a 	cmpne	r2,r2,zero
 1002510:	103fed1e 	bne	r2,zero,10024c8 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 1002514:	e037883a 	mov	sp,fp
 1002518:	dfc00117 	ldw	ra,4(sp)
 100251c:	df000017 	ldw	fp,0(sp)
 1002520:	dec00204 	addi	sp,sp,8
 1002524:	f800283a 	ret

01002528 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 1002528:	defffc04 	addi	sp,sp,-16
 100252c:	dfc00315 	stw	ra,12(sp)
 1002530:	df000215 	stw	fp,8(sp)
 1002534:	df000204 	addi	fp,sp,8
 1002538:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 100253c:	e13fff17 	ldw	r4,-4(fp)
 1002540:	01404034 	movhi	r5,256
 1002544:	29551204 	addi	r5,r5,21576
 1002548:	1002b500 	call	1002b50 <alt_find_dev>
 100254c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1002550:	e0bffe17 	ldw	r2,-8(fp)
}
 1002554:	e037883a 	mov	sp,fp
 1002558:	dfc00117 	ldw	ra,4(sp)
 100255c:	df000017 	ldw	fp,0(sp)
 1002560:	dec00204 	addi	sp,sp,8
 1002564:	f800283a 	ret

01002568 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 1002568:	defff904 	addi	sp,sp,-28
 100256c:	df000615 	stw	fp,24(sp)
 1002570:	df000604 	addi	fp,sp,24
 1002574:	e13ffb15 	stw	r4,-20(fp)
 1002578:	e1bffd15 	stw	r6,-12(fp)
 100257c:	e1fffe15 	stw	r7,-8(fp)
 1002580:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 1002584:	e0bffb17 	ldw	r2,-20(fp)
 1002588:	10c00c17 	ldw	r3,48(r2)
 100258c:	e0bffd17 	ldw	r2,-12(fp)
 1002590:	10c0042e 	bgeu	r2,r3,10025a4 <alt_up_char_buffer_draw+0x3c>
 1002594:	e0bffb17 	ldw	r2,-20(fp)
 1002598:	10c00d17 	ldw	r3,52(r2)
 100259c:	e0bffe17 	ldw	r2,-8(fp)
 10025a0:	10c00336 	bltu	r2,r3,10025b0 <alt_up_char_buffer_draw+0x48>
		return -1;
 10025a4:	00bfffc4 	movi	r2,-1
 10025a8:	e0bfff15 	stw	r2,-4(fp)
 10025ac:	00001d06 	br	1002624 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 10025b0:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 10025b4:	e0bffb17 	ldw	r2,-20(fp)
 10025b8:	10c00f17 	ldw	r3,60(r2)
 10025bc:	e0bffd17 	ldw	r2,-12(fp)
 10025c0:	1886703a 	and	r3,r3,r2
 10025c4:	e0bffb17 	ldw	r2,-20(fp)
 10025c8:	10800e17 	ldw	r2,56(r2)
 10025cc:	1886983a 	sll	r3,r3,r2
 10025d0:	e0bffa17 	ldw	r2,-24(fp)
 10025d4:	10c4b03a 	or	r2,r2,r3
 10025d8:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 10025dc:	e0bffb17 	ldw	r2,-20(fp)
 10025e0:	10c01117 	ldw	r3,68(r2)
 10025e4:	e0bffe17 	ldw	r2,-8(fp)
 10025e8:	1886703a 	and	r3,r3,r2
 10025ec:	e0bffb17 	ldw	r2,-20(fp)
 10025f0:	10801017 	ldw	r2,64(r2)
 10025f4:	1886983a 	sll	r3,r3,r2
 10025f8:	e0bffa17 	ldw	r2,-24(fp)
 10025fc:	10c4b03a 	or	r2,r2,r3
 1002600:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 1002604:	e0bffb17 	ldw	r2,-20(fp)
 1002608:	10800b17 	ldw	r2,44(r2)
 100260c:	1007883a 	mov	r3,r2
 1002610:	e0bffa17 	ldw	r2,-24(fp)
 1002614:	1885883a 	add	r2,r3,r2
 1002618:	e0fffc03 	ldbu	r3,-16(fp)
 100261c:	10c00025 	stbio	r3,0(r2)

	return 0;
 1002620:	e03fff15 	stw	zero,-4(fp)
 1002624:	e0bfff17 	ldw	r2,-4(fp)
}
 1002628:	e037883a 	mov	sp,fp
 100262c:	df000017 	ldw	fp,0(sp)
 1002630:	dec00104 	addi	sp,sp,4
 1002634:	f800283a 	ret

01002638 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 1002638:	defff904 	addi	sp,sp,-28
 100263c:	df000615 	stw	fp,24(sp)
 1002640:	df000604 	addi	fp,sp,24
 1002644:	e13ffb15 	stw	r4,-20(fp)
 1002648:	e17ffc15 	stw	r5,-16(fp)
 100264c:	e1bffd15 	stw	r6,-12(fp)
 1002650:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 1002654:	e0bffb17 	ldw	r2,-20(fp)
 1002658:	10c00c17 	ldw	r3,48(r2)
 100265c:	e0bffd17 	ldw	r2,-12(fp)
 1002660:	10c0042e 	bgeu	r2,r3,1002674 <alt_up_char_buffer_string+0x3c>
 1002664:	e0bffb17 	ldw	r2,-20(fp)
 1002668:	10c00d17 	ldw	r3,52(r2)
 100266c:	e0bffe17 	ldw	r2,-8(fp)
 1002670:	10c00336 	bltu	r2,r3,1002680 <alt_up_char_buffer_string+0x48>
		return -1;
 1002674:	00bfffc4 	movi	r2,-1
 1002678:	e0bfff15 	stw	r2,-4(fp)
 100267c:	00002e06 	br	1002738 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 1002680:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 1002684:	e0bffb17 	ldw	r2,-20(fp)
 1002688:	10801017 	ldw	r2,64(r2)
 100268c:	1007883a 	mov	r3,r2
 1002690:	e0bffe17 	ldw	r2,-8(fp)
 1002694:	10c6983a 	sll	r3,r2,r3
 1002698:	e0bffd17 	ldw	r2,-12(fp)
 100269c:	1885883a 	add	r2,r3,r2
 10026a0:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 10026a4:	00001c06 	br	1002718 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 10026a8:	e0bffb17 	ldw	r2,-20(fp)
 10026ac:	10800b17 	ldw	r2,44(r2)
 10026b0:	1007883a 	mov	r3,r2
 10026b4:	e0bffa17 	ldw	r2,-24(fp)
 10026b8:	1889883a 	add	r4,r3,r2
 10026bc:	e0bffc17 	ldw	r2,-16(fp)
 10026c0:	10800003 	ldbu	r2,0(r2)
 10026c4:	10c03fcc 	andi	r3,r2,255
 10026c8:	18c0201c 	xori	r3,r3,128
 10026cc:	18ffe004 	addi	r3,r3,-128
 10026d0:	2005883a 	mov	r2,r4
 10026d4:	10c00025 	stbio	r3,0(r2)
		++ptr;
 10026d8:	e0bffc17 	ldw	r2,-16(fp)
 10026dc:	10800044 	addi	r2,r2,1
 10026e0:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 10026e4:	e0bffd17 	ldw	r2,-12(fp)
 10026e8:	10800044 	addi	r2,r2,1
 10026ec:	e0bffd15 	stw	r2,-12(fp)
 10026f0:	e0bffb17 	ldw	r2,-20(fp)
 10026f4:	10c00c17 	ldw	r3,48(r2)
 10026f8:	e0bffd17 	ldw	r2,-12(fp)
 10026fc:	10c00336 	bltu	r2,r3,100270c <alt_up_char_buffer_string+0xd4>
			return -1;
 1002700:	00bfffc4 	movi	r2,-1
 1002704:	e0bfff15 	stw	r2,-4(fp)
 1002708:	00000b06 	br	1002738 <alt_up_char_buffer_string+0x100>
		++offset;
 100270c:	e0bffa17 	ldw	r2,-24(fp)
 1002710:	10800044 	addi	r2,r2,1
 1002714:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 1002718:	e0bffc17 	ldw	r2,-16(fp)
 100271c:	10800003 	ldbu	r2,0(r2)
 1002720:	10803fcc 	andi	r2,r2,255
 1002724:	1080201c 	xori	r2,r2,128
 1002728:	10bfe004 	addi	r2,r2,-128
 100272c:	1004c03a 	cmpne	r2,r2,zero
 1002730:	103fdd1e 	bne	r2,zero,10026a8 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 1002734:	e03fff15 	stw	zero,-4(fp)
 1002738:	e0bfff17 	ldw	r2,-4(fp)
}
 100273c:	e037883a 	mov	sp,fp
 1002740:	df000017 	ldw	fp,0(sp)
 1002744:	dec00104 	addi	sp,sp,4
 1002748:	f800283a 	ret

0100274c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 100274c:	defffe04 	addi	sp,sp,-8
 1002750:	df000115 	stw	fp,4(sp)
 1002754:	df000104 	addi	fp,sp,4
 1002758:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 100275c:	e0bfff17 	ldw	r2,-4(fp)
 1002760:	10800a17 	ldw	r2,40(r2)
 1002764:	10800084 	addi	r2,r2,2
 1002768:	1007883a 	mov	r3,r2
 100276c:	00800044 	movi	r2,1
 1002770:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 1002774:	e0bfff17 	ldw	r2,-4(fp)
 1002778:	10800a17 	ldw	r2,40(r2)
 100277c:	10800084 	addi	r2,r2,2
 1002780:	10800023 	ldbuio	r2,0(r2)
 1002784:	1080004c 	andi	r2,r2,1
 1002788:	10803fcc 	andi	r2,r2,255
 100278c:	1004c03a 	cmpne	r2,r2,zero
 1002790:	103ff81e 	bne	r2,zero,1002774 <alt_up_char_buffer_clear+0x28>
	return 0;
 1002794:	0005883a 	mov	r2,zero
}
 1002798:	e037883a 	mov	sp,fp
 100279c:	df000017 	ldw	fp,0(sp)
 10027a0:	dec00104 	addi	sp,sp,4
 10027a4:	f800283a 	ret

010027a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10027a8:	defff804 	addi	sp,sp,-32
 10027ac:	dfc00715 	stw	ra,28(sp)
 10027b0:	df000615 	stw	fp,24(sp)
 10027b4:	df000604 	addi	fp,sp,24
 10027b8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10027bc:	e0bffc17 	ldw	r2,-16(fp)
 10027c0:	1004803a 	cmplt	r2,r2,zero
 10027c4:	1000081e 	bne	r2,zero,10027e8 <close+0x40>
 10027c8:	e0bffc17 	ldw	r2,-16(fp)
 10027cc:	10800324 	muli	r2,r2,12
 10027d0:	1007883a 	mov	r3,r2
 10027d4:	00804034 	movhi	r2,256
 10027d8:	1093a704 	addi	r2,r2,20124
 10027dc:	1887883a 	add	r3,r3,r2
 10027e0:	e0ffff15 	stw	r3,-4(fp)
 10027e4:	00000106 	br	10027ec <close+0x44>
 10027e8:	e03fff15 	stw	zero,-4(fp)
 10027ec:	e0bfff17 	ldw	r2,-4(fp)
 10027f0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 10027f4:	e0bffb17 	ldw	r2,-20(fp)
 10027f8:	1005003a 	cmpeq	r2,r2,zero
 10027fc:	10001d1e 	bne	r2,zero,1002874 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002800:	e0bffb17 	ldw	r2,-20(fp)
 1002804:	10800017 	ldw	r2,0(r2)
 1002808:	10800417 	ldw	r2,16(r2)
 100280c:	1005003a 	cmpeq	r2,r2,zero
 1002810:	1000071e 	bne	r2,zero,1002830 <close+0x88>
 1002814:	e0bffb17 	ldw	r2,-20(fp)
 1002818:	10800017 	ldw	r2,0(r2)
 100281c:	10800417 	ldw	r2,16(r2)
 1002820:	e13ffb17 	ldw	r4,-20(fp)
 1002824:	103ee83a 	callr	r2
 1002828:	e0bffe15 	stw	r2,-8(fp)
 100282c:	00000106 	br	1002834 <close+0x8c>
 1002830:	e03ffe15 	stw	zero,-8(fp)
 1002834:	e0bffe17 	ldw	r2,-8(fp)
 1002838:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100283c:	e13ffc17 	ldw	r4,-16(fp)
 1002840:	10032e00 	call	10032e0 <alt_release_fd>
    if (rval < 0)
 1002844:	e0bffa17 	ldw	r2,-24(fp)
 1002848:	1004403a 	cmpge	r2,r2,zero
 100284c:	1000071e 	bne	r2,zero,100286c <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1002850:	10028a40 	call	10028a4 <alt_get_errno>
 1002854:	e0fffa17 	ldw	r3,-24(fp)
 1002858:	00c7c83a 	sub	r3,zero,r3
 100285c:	10c00015 	stw	r3,0(r2)
      return -1;
 1002860:	00bfffc4 	movi	r2,-1
 1002864:	e0bffd15 	stw	r2,-12(fp)
 1002868:	00000806 	br	100288c <close+0xe4>
    }
    return 0;
 100286c:	e03ffd15 	stw	zero,-12(fp)
 1002870:	00000606 	br	100288c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002874:	10028a40 	call	10028a4 <alt_get_errno>
 1002878:	1007883a 	mov	r3,r2
 100287c:	00801444 	movi	r2,81
 1002880:	18800015 	stw	r2,0(r3)
    return -1;
 1002884:	00bfffc4 	movi	r2,-1
 1002888:	e0bffd15 	stw	r2,-12(fp)
 100288c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1002890:	e037883a 	mov	sp,fp
 1002894:	dfc00117 	ldw	ra,4(sp)
 1002898:	df000017 	ldw	fp,0(sp)
 100289c:	dec00204 	addi	sp,sp,8
 10028a0:	f800283a 	ret

010028a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10028a4:	defffd04 	addi	sp,sp,-12
 10028a8:	dfc00215 	stw	ra,8(sp)
 10028ac:	df000115 	stw	fp,4(sp)
 10028b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10028b4:	00804034 	movhi	r2,256
 10028b8:	10951504 	addi	r2,r2,21588
 10028bc:	10800017 	ldw	r2,0(r2)
 10028c0:	1005003a 	cmpeq	r2,r2,zero
 10028c4:	1000061e 	bne	r2,zero,10028e0 <alt_get_errno+0x3c>
 10028c8:	00804034 	movhi	r2,256
 10028cc:	10951504 	addi	r2,r2,21588
 10028d0:	10800017 	ldw	r2,0(r2)
 10028d4:	103ee83a 	callr	r2
 10028d8:	e0bfff15 	stw	r2,-4(fp)
 10028dc:	00000306 	br	10028ec <alt_get_errno+0x48>
 10028e0:	00804034 	movhi	r2,256
 10028e4:	109ada04 	addi	r2,r2,27496
 10028e8:	e0bfff15 	stw	r2,-4(fp)
 10028ec:	e0bfff17 	ldw	r2,-4(fp)
}
 10028f0:	e037883a 	mov	sp,fp
 10028f4:	dfc00117 	ldw	ra,4(sp)
 10028f8:	df000017 	ldw	fp,0(sp)
 10028fc:	dec00204 	addi	sp,sp,8
 1002900:	f800283a 	ret

01002904 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1002904:	defffe04 	addi	sp,sp,-8
 1002908:	df000115 	stw	fp,4(sp)
 100290c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1002910:	e03fff15 	stw	zero,-4(fp)
 1002914:	00000506 	br	100292c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1002918:	e0bfff17 	ldw	r2,-4(fp)
 100291c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1002920:	e0bfff17 	ldw	r2,-4(fp)
 1002924:	10800804 	addi	r2,r2,32
 1002928:	e0bfff15 	stw	r2,-4(fp)
 100292c:	e0bfff17 	ldw	r2,-4(fp)
 1002930:	10820030 	cmpltui	r2,r2,2048
 1002934:	103ff81e 	bne	r2,zero,1002918 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1002938:	e037883a 	mov	sp,fp
 100293c:	df000017 	ldw	fp,0(sp)
 1002940:	dec00104 	addi	sp,sp,4
 1002944:	f800283a 	ret

01002948 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002948:	defffc04 	addi	sp,sp,-16
 100294c:	df000315 	stw	fp,12(sp)
 1002950:	df000304 	addi	fp,sp,12
 1002954:	e13ffd15 	stw	r4,-12(fp)
 1002958:	e17ffe15 	stw	r5,-8(fp)
 100295c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002960:	e0bfff17 	ldw	r2,-4(fp)
}
 1002964:	e037883a 	mov	sp,fp
 1002968:	df000017 	ldw	fp,0(sp)
 100296c:	dec00104 	addi	sp,sp,4
 1002970:	f800283a 	ret

01002974 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1002974:	defff904 	addi	sp,sp,-28
 1002978:	dfc00615 	stw	ra,24(sp)
 100297c:	df000515 	stw	fp,20(sp)
 1002980:	df000504 	addi	fp,sp,20
 1002984:	e13ffd15 	stw	r4,-12(fp)
 1002988:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100298c:	e0bffd17 	ldw	r2,-12(fp)
 1002990:	1005003a 	cmpeq	r2,r2,zero
 1002994:	1000041e 	bne	r2,zero,10029a8 <alt_dev_llist_insert+0x34>
 1002998:	e0bffd17 	ldw	r2,-12(fp)
 100299c:	10800217 	ldw	r2,8(r2)
 10029a0:	1004c03a 	cmpne	r2,r2,zero
 10029a4:	1000071e 	bne	r2,zero,10029c4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 10029a8:	1002a280 	call	1002a28 <alt_get_errno>
 10029ac:	1007883a 	mov	r3,r2
 10029b0:	00800584 	movi	r2,22
 10029b4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10029b8:	00bffa84 	movi	r2,-22
 10029bc:	e0bfff15 	stw	r2,-4(fp)
 10029c0:	00001306 	br	1002a10 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10029c4:	e0fffd17 	ldw	r3,-12(fp)
 10029c8:	e0bffe17 	ldw	r2,-8(fp)
 10029cc:	e0bffb15 	stw	r2,-20(fp)
 10029d0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10029d4:	e0fffc17 	ldw	r3,-16(fp)
 10029d8:	e0bffb17 	ldw	r2,-20(fp)
 10029dc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10029e0:	e0bffb17 	ldw	r2,-20(fp)
 10029e4:	10c00017 	ldw	r3,0(r2)
 10029e8:	e0bffc17 	ldw	r2,-16(fp)
 10029ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10029f0:	e0bffb17 	ldw	r2,-20(fp)
 10029f4:	10c00017 	ldw	r3,0(r2)
 10029f8:	e0bffc17 	ldw	r2,-16(fp)
 10029fc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1002a00:	e0fffb17 	ldw	r3,-20(fp)
 1002a04:	e0bffc17 	ldw	r2,-16(fp)
 1002a08:	18800015 	stw	r2,0(r3)

  return 0;  
 1002a0c:	e03fff15 	stw	zero,-4(fp)
 1002a10:	e0bfff17 	ldw	r2,-4(fp)
}
 1002a14:	e037883a 	mov	sp,fp
 1002a18:	dfc00117 	ldw	ra,4(sp)
 1002a1c:	df000017 	ldw	fp,0(sp)
 1002a20:	dec00204 	addi	sp,sp,8
 1002a24:	f800283a 	ret

01002a28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002a28:	defffd04 	addi	sp,sp,-12
 1002a2c:	dfc00215 	stw	ra,8(sp)
 1002a30:	df000115 	stw	fp,4(sp)
 1002a34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002a38:	00804034 	movhi	r2,256
 1002a3c:	10951504 	addi	r2,r2,21588
 1002a40:	10800017 	ldw	r2,0(r2)
 1002a44:	1005003a 	cmpeq	r2,r2,zero
 1002a48:	1000061e 	bne	r2,zero,1002a64 <alt_get_errno+0x3c>
 1002a4c:	00804034 	movhi	r2,256
 1002a50:	10951504 	addi	r2,r2,21588
 1002a54:	10800017 	ldw	r2,0(r2)
 1002a58:	103ee83a 	callr	r2
 1002a5c:	e0bfff15 	stw	r2,-4(fp)
 1002a60:	00000306 	br	1002a70 <alt_get_errno+0x48>
 1002a64:	00804034 	movhi	r2,256
 1002a68:	109ada04 	addi	r2,r2,27496
 1002a6c:	e0bfff15 	stw	r2,-4(fp)
 1002a70:	e0bfff17 	ldw	r2,-4(fp)
}
 1002a74:	e037883a 	mov	sp,fp
 1002a78:	dfc00117 	ldw	ra,4(sp)
 1002a7c:	df000017 	ldw	fp,0(sp)
 1002a80:	dec00204 	addi	sp,sp,8
 1002a84:	f800283a 	ret

01002a88 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1002a88:	defffd04 	addi	sp,sp,-12
 1002a8c:	dfc00215 	stw	ra,8(sp)
 1002a90:	df000115 	stw	fp,4(sp)
 1002a94:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1002a98:	00bfff04 	movi	r2,-4
 1002a9c:	00c04034 	movhi	r3,256
 1002aa0:	18cee904 	addi	r3,r3,15268
 1002aa4:	1885883a 	add	r2,r3,r2
 1002aa8:	e0bfff15 	stw	r2,-4(fp)
 1002aac:	00000606 	br	1002ac8 <_do_ctors+0x40>
        (*ctor) (); 
 1002ab0:	e0bfff17 	ldw	r2,-4(fp)
 1002ab4:	10800017 	ldw	r2,0(r2)
 1002ab8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1002abc:	e0bfff17 	ldw	r2,-4(fp)
 1002ac0:	10bfff04 	addi	r2,r2,-4
 1002ac4:	e0bfff15 	stw	r2,-4(fp)
 1002ac8:	e0ffff17 	ldw	r3,-4(fp)
 1002acc:	00804034 	movhi	r2,256
 1002ad0:	108ee804 	addi	r2,r2,15264
 1002ad4:	18bff62e 	bgeu	r3,r2,1002ab0 <_do_ctors+0x28>
        (*ctor) (); 
}
 1002ad8:	e037883a 	mov	sp,fp
 1002adc:	dfc00117 	ldw	ra,4(sp)
 1002ae0:	df000017 	ldw	fp,0(sp)
 1002ae4:	dec00204 	addi	sp,sp,8
 1002ae8:	f800283a 	ret

01002aec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1002aec:	defffd04 	addi	sp,sp,-12
 1002af0:	dfc00215 	stw	ra,8(sp)
 1002af4:	df000115 	stw	fp,4(sp)
 1002af8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1002afc:	00bfff04 	movi	r2,-4
 1002b00:	00c04034 	movhi	r3,256
 1002b04:	18cee904 	addi	r3,r3,15268
 1002b08:	1885883a 	add	r2,r3,r2
 1002b0c:	e0bfff15 	stw	r2,-4(fp)
 1002b10:	00000606 	br	1002b2c <_do_dtors+0x40>
        (*dtor) (); 
 1002b14:	e0bfff17 	ldw	r2,-4(fp)
 1002b18:	10800017 	ldw	r2,0(r2)
 1002b1c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1002b20:	e0bfff17 	ldw	r2,-4(fp)
 1002b24:	10bfff04 	addi	r2,r2,-4
 1002b28:	e0bfff15 	stw	r2,-4(fp)
 1002b2c:	e0ffff17 	ldw	r3,-4(fp)
 1002b30:	00804034 	movhi	r2,256
 1002b34:	108ee904 	addi	r2,r2,15268
 1002b38:	18bff62e 	bgeu	r3,r2,1002b14 <_do_dtors+0x28>
        (*dtor) (); 
}
 1002b3c:	e037883a 	mov	sp,fp
 1002b40:	dfc00117 	ldw	ra,4(sp)
 1002b44:	df000017 	ldw	fp,0(sp)
 1002b48:	dec00204 	addi	sp,sp,8
 1002b4c:	f800283a 	ret

01002b50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1002b50:	defff904 	addi	sp,sp,-28
 1002b54:	dfc00615 	stw	ra,24(sp)
 1002b58:	df000515 	stw	fp,20(sp)
 1002b5c:	df000504 	addi	fp,sp,20
 1002b60:	e13ffd15 	stw	r4,-12(fp)
 1002b64:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1002b68:	e0bffe17 	ldw	r2,-8(fp)
 1002b6c:	10800017 	ldw	r2,0(r2)
 1002b70:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1002b74:	e13ffd17 	ldw	r4,-12(fp)
 1002b78:	10037e40 	call	10037e4 <strlen>
 1002b7c:	10800044 	addi	r2,r2,1
 1002b80:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1002b84:	00000d06 	br	1002bbc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1002b88:	e0bffc17 	ldw	r2,-16(fp)
 1002b8c:	11000217 	ldw	r4,8(r2)
 1002b90:	e1bffb17 	ldw	r6,-20(fp)
 1002b94:	e17ffd17 	ldw	r5,-12(fp)
 1002b98:	10036140 	call	1003614 <memcmp>
 1002b9c:	1004c03a 	cmpne	r2,r2,zero
 1002ba0:	1000031e 	bne	r2,zero,1002bb0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1002ba4:	e0bffc17 	ldw	r2,-16(fp)
 1002ba8:	e0bfff15 	stw	r2,-4(fp)
 1002bac:	00000706 	br	1002bcc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1002bb0:	e0bffc17 	ldw	r2,-16(fp)
 1002bb4:	10800017 	ldw	r2,0(r2)
 1002bb8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1002bbc:	e0fffe17 	ldw	r3,-8(fp)
 1002bc0:	e0bffc17 	ldw	r2,-16(fp)
 1002bc4:	10fff01e 	bne	r2,r3,1002b88 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1002bc8:	e03fff15 	stw	zero,-4(fp)
 1002bcc:	e0bfff17 	ldw	r2,-4(fp)
}
 1002bd0:	e037883a 	mov	sp,fp
 1002bd4:	dfc00117 	ldw	ra,4(sp)
 1002bd8:	df000017 	ldw	fp,0(sp)
 1002bdc:	dec00204 	addi	sp,sp,8
 1002be0:	f800283a 	ret

01002be4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1002be4:	defffe04 	addi	sp,sp,-8
 1002be8:	dfc00115 	stw	ra,4(sp)
 1002bec:	df000015 	stw	fp,0(sp)
 1002bf0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1002bf4:	0009883a 	mov	r4,zero
 1002bf8:	01440004 	movi	r5,4096
 1002bfc:	10035380 	call	1003538 <alt_icache_flush>
#endif
}
 1002c00:	e037883a 	mov	sp,fp
 1002c04:	dfc00117 	ldw	ra,4(sp)
 1002c08:	df000017 	ldw	fp,0(sp)
 1002c0c:	dec00204 	addi	sp,sp,8
 1002c10:	f800283a 	ret

01002c14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1002c14:	defff904 	addi	sp,sp,-28
 1002c18:	dfc00615 	stw	ra,24(sp)
 1002c1c:	df000515 	stw	fp,20(sp)
 1002c20:	df000504 	addi	fp,sp,20
 1002c24:	e13ffc15 	stw	r4,-16(fp)
 1002c28:	e17ffd15 	stw	r5,-12(fp)
 1002c2c:	e1bffe15 	stw	r6,-8(fp)
 1002c30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1002c34:	e0800217 	ldw	r2,8(fp)
 1002c38:	d8800015 	stw	r2,0(sp)
 1002c3c:	e13ffc17 	ldw	r4,-16(fp)
 1002c40:	e17ffd17 	ldw	r5,-12(fp)
 1002c44:	e1bffe17 	ldw	r6,-8(fp)
 1002c48:	e1ffff17 	ldw	r7,-4(fp)
 1002c4c:	1002de80 	call	1002de8 <alt_iic_isr_register>
}  
 1002c50:	e037883a 	mov	sp,fp
 1002c54:	dfc00117 	ldw	ra,4(sp)
 1002c58:	df000017 	ldw	fp,0(sp)
 1002c5c:	dec00204 	addi	sp,sp,8
 1002c60:	f800283a 	ret

01002c64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1002c64:	defff904 	addi	sp,sp,-28
 1002c68:	df000615 	stw	fp,24(sp)
 1002c6c:	df000604 	addi	fp,sp,24
 1002c70:	e13ffe15 	stw	r4,-8(fp)
 1002c74:	e17fff15 	stw	r5,-4(fp)
 1002c78:	e0bfff17 	ldw	r2,-4(fp)
 1002c7c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1002c80:	0005303a 	rdctl	r2,status
 1002c84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1002c88:	e0fffb17 	ldw	r3,-20(fp)
 1002c8c:	00bfff84 	movi	r2,-2
 1002c90:	1884703a 	and	r2,r3,r2
 1002c94:	1001703a 	wrctl	status,r2
  
  return context;
 1002c98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1002c9c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1002ca0:	e0fffc17 	ldw	r3,-16(fp)
 1002ca4:	00800044 	movi	r2,1
 1002ca8:	10c4983a 	sll	r2,r2,r3
 1002cac:	1007883a 	mov	r3,r2
 1002cb0:	00804034 	movhi	r2,256
 1002cb4:	109ad904 	addi	r2,r2,27492
 1002cb8:	10800017 	ldw	r2,0(r2)
 1002cbc:	1886b03a 	or	r3,r3,r2
 1002cc0:	00804034 	movhi	r2,256
 1002cc4:	109ad904 	addi	r2,r2,27492
 1002cc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1002ccc:	00804034 	movhi	r2,256
 1002cd0:	109ad904 	addi	r2,r2,27492
 1002cd4:	10800017 	ldw	r2,0(r2)
 1002cd8:	100170fa 	wrctl	ienable,r2
 1002cdc:	e0bffd17 	ldw	r2,-12(fp)
 1002ce0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1002ce4:	e0bffa17 	ldw	r2,-24(fp)
 1002ce8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1002cec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1002cf0:	e037883a 	mov	sp,fp
 1002cf4:	df000017 	ldw	fp,0(sp)
 1002cf8:	dec00104 	addi	sp,sp,4
 1002cfc:	f800283a 	ret

01002d00 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1002d00:	defff904 	addi	sp,sp,-28
 1002d04:	df000615 	stw	fp,24(sp)
 1002d08:	df000604 	addi	fp,sp,24
 1002d0c:	e13ffe15 	stw	r4,-8(fp)
 1002d10:	e17fff15 	stw	r5,-4(fp)
 1002d14:	e0bfff17 	ldw	r2,-4(fp)
 1002d18:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1002d1c:	0005303a 	rdctl	r2,status
 1002d20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1002d24:	e0fffb17 	ldw	r3,-20(fp)
 1002d28:	00bfff84 	movi	r2,-2
 1002d2c:	1884703a 	and	r2,r3,r2
 1002d30:	1001703a 	wrctl	status,r2
  
  return context;
 1002d34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1002d38:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1002d3c:	e0fffc17 	ldw	r3,-16(fp)
 1002d40:	00800044 	movi	r2,1
 1002d44:	10c4983a 	sll	r2,r2,r3
 1002d48:	0084303a 	nor	r2,zero,r2
 1002d4c:	1007883a 	mov	r3,r2
 1002d50:	00804034 	movhi	r2,256
 1002d54:	109ad904 	addi	r2,r2,27492
 1002d58:	10800017 	ldw	r2,0(r2)
 1002d5c:	1886703a 	and	r3,r3,r2
 1002d60:	00804034 	movhi	r2,256
 1002d64:	109ad904 	addi	r2,r2,27492
 1002d68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1002d6c:	00804034 	movhi	r2,256
 1002d70:	109ad904 	addi	r2,r2,27492
 1002d74:	10800017 	ldw	r2,0(r2)
 1002d78:	100170fa 	wrctl	ienable,r2
 1002d7c:	e0bffd17 	ldw	r2,-12(fp)
 1002d80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1002d84:	e0bffa17 	ldw	r2,-24(fp)
 1002d88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1002d8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1002d90:	e037883a 	mov	sp,fp
 1002d94:	df000017 	ldw	fp,0(sp)
 1002d98:	dec00104 	addi	sp,sp,4
 1002d9c:	f800283a 	ret

01002da0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1002da0:	defffc04 	addi	sp,sp,-16
 1002da4:	df000315 	stw	fp,12(sp)
 1002da8:	df000304 	addi	fp,sp,12
 1002dac:	e13ffe15 	stw	r4,-8(fp)
 1002db0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1002db4:	000530fa 	rdctl	r2,ienable
 1002db8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1002dbc:	e0ffff17 	ldw	r3,-4(fp)
 1002dc0:	00800044 	movi	r2,1
 1002dc4:	10c4983a 	sll	r2,r2,r3
 1002dc8:	1007883a 	mov	r3,r2
 1002dcc:	e0bffd17 	ldw	r2,-12(fp)
 1002dd0:	1884703a 	and	r2,r3,r2
 1002dd4:	1004c03a 	cmpne	r2,r2,zero
}
 1002dd8:	e037883a 	mov	sp,fp
 1002ddc:	df000017 	ldw	fp,0(sp)
 1002de0:	dec00104 	addi	sp,sp,4
 1002de4:	f800283a 	ret

01002de8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1002de8:	defff404 	addi	sp,sp,-48
 1002dec:	dfc00b15 	stw	ra,44(sp)
 1002df0:	df000a15 	stw	fp,40(sp)
 1002df4:	df000a04 	addi	fp,sp,40
 1002df8:	e13ffb15 	stw	r4,-20(fp)
 1002dfc:	e17ffc15 	stw	r5,-16(fp)
 1002e00:	e1bffd15 	stw	r6,-12(fp)
 1002e04:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1002e08:	00bffa84 	movi	r2,-22
 1002e0c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1002e10:	e0bffc17 	ldw	r2,-16(fp)
 1002e14:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1002e18:	e0bff917 	ldw	r2,-28(fp)
 1002e1c:	10800808 	cmpgei	r2,r2,32
 1002e20:	1000291e 	bne	r2,zero,1002ec8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1002e24:	0005303a 	rdctl	r2,status
 1002e28:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1002e2c:	e0fff717 	ldw	r3,-36(fp)
 1002e30:	00bfff84 	movi	r2,-2
 1002e34:	1884703a 	and	r2,r3,r2
 1002e38:	1001703a 	wrctl	status,r2
  
  return context;
 1002e3c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1002e40:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 1002e44:	e0bff917 	ldw	r2,-28(fp)
 1002e48:	00c04034 	movhi	r3,256
 1002e4c:	18dae104 	addi	r3,r3,27524
 1002e50:	100490fa 	slli	r2,r2,3
 1002e54:	10c7883a 	add	r3,r2,r3
 1002e58:	e0bffd17 	ldw	r2,-12(fp)
 1002e5c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1002e60:	e0bff917 	ldw	r2,-28(fp)
 1002e64:	00c04034 	movhi	r3,256
 1002e68:	18dae104 	addi	r3,r3,27524
 1002e6c:	100490fa 	slli	r2,r2,3
 1002e70:	10c5883a 	add	r2,r2,r3
 1002e74:	10c00104 	addi	r3,r2,4
 1002e78:	e0bffe17 	ldw	r2,-8(fp)
 1002e7c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1002e80:	e0bffd17 	ldw	r2,-12(fp)
 1002e84:	1005003a 	cmpeq	r2,r2,zero
 1002e88:	1000051e 	bne	r2,zero,1002ea0 <alt_iic_isr_register+0xb8>
 1002e8c:	e17ff917 	ldw	r5,-28(fp)
 1002e90:	e13ffb17 	ldw	r4,-20(fp)
 1002e94:	1002c640 	call	1002c64 <alt_ic_irq_enable>
 1002e98:	e0bfff15 	stw	r2,-4(fp)
 1002e9c:	00000406 	br	1002eb0 <alt_iic_isr_register+0xc8>
 1002ea0:	e17ff917 	ldw	r5,-28(fp)
 1002ea4:	e13ffb17 	ldw	r4,-20(fp)
 1002ea8:	1002d000 	call	1002d00 <alt_ic_irq_disable>
 1002eac:	e0bfff15 	stw	r2,-4(fp)
 1002eb0:	e0bfff17 	ldw	r2,-4(fp)
 1002eb4:	e0bffa15 	stw	r2,-24(fp)
 1002eb8:	e0bff817 	ldw	r2,-32(fp)
 1002ebc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1002ec0:	e0bff617 	ldw	r2,-40(fp)
 1002ec4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1002ec8:	e0bffa17 	ldw	r2,-24(fp)
}
 1002ecc:	e037883a 	mov	sp,fp
 1002ed0:	dfc00117 	ldw	ra,4(sp)
 1002ed4:	df000017 	ldw	fp,0(sp)
 1002ed8:	dec00204 	addi	sp,sp,8
 1002edc:	f800283a 	ret

01002ee0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1002ee0:	defff904 	addi	sp,sp,-28
 1002ee4:	dfc00615 	stw	ra,24(sp)
 1002ee8:	df000515 	stw	fp,20(sp)
 1002eec:	df000504 	addi	fp,sp,20
 1002ef0:	e13ffc15 	stw	r4,-16(fp)
 1002ef4:	e17ffd15 	stw	r5,-12(fp)
 1002ef8:	e1bffe15 	stw	r6,-8(fp)
 1002efc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1002f00:	e13ffd17 	ldw	r4,-12(fp)
 1002f04:	e17ffe17 	ldw	r5,-8(fp)
 1002f08:	e1bfff17 	ldw	r6,-4(fp)
 1002f0c:	10030f80 	call	10030f8 <open>
 1002f10:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1002f14:	e0bffb17 	ldw	r2,-20(fp)
 1002f18:	1004803a 	cmplt	r2,r2,zero
 1002f1c:	10001c1e 	bne	r2,zero,1002f90 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1002f20:	e0bffb17 	ldw	r2,-20(fp)
 1002f24:	00c04034 	movhi	r3,256
 1002f28:	18d3a704 	addi	r3,r3,20124
 1002f2c:	10800324 	muli	r2,r2,12
 1002f30:	10c5883a 	add	r2,r2,r3
 1002f34:	10c00017 	ldw	r3,0(r2)
 1002f38:	e0bffc17 	ldw	r2,-16(fp)
 1002f3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1002f40:	e0bffb17 	ldw	r2,-20(fp)
 1002f44:	00c04034 	movhi	r3,256
 1002f48:	18d3a704 	addi	r3,r3,20124
 1002f4c:	10800324 	muli	r2,r2,12
 1002f50:	10c5883a 	add	r2,r2,r3
 1002f54:	10800104 	addi	r2,r2,4
 1002f58:	10c00017 	ldw	r3,0(r2)
 1002f5c:	e0bffc17 	ldw	r2,-16(fp)
 1002f60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1002f64:	e0bffb17 	ldw	r2,-20(fp)
 1002f68:	00c04034 	movhi	r3,256
 1002f6c:	18d3a704 	addi	r3,r3,20124
 1002f70:	10800324 	muli	r2,r2,12
 1002f74:	10c5883a 	add	r2,r2,r3
 1002f78:	10800204 	addi	r2,r2,8
 1002f7c:	10c00017 	ldw	r3,0(r2)
 1002f80:	e0bffc17 	ldw	r2,-16(fp)
 1002f84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1002f88:	e13ffb17 	ldw	r4,-20(fp)
 1002f8c:	10032e00 	call	10032e0 <alt_release_fd>
  }
} 
 1002f90:	e037883a 	mov	sp,fp
 1002f94:	dfc00117 	ldw	ra,4(sp)
 1002f98:	df000017 	ldw	fp,0(sp)
 1002f9c:	dec00204 	addi	sp,sp,8
 1002fa0:	f800283a 	ret

01002fa4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1002fa4:	defffb04 	addi	sp,sp,-20
 1002fa8:	dfc00415 	stw	ra,16(sp)
 1002fac:	df000315 	stw	fp,12(sp)
 1002fb0:	df000304 	addi	fp,sp,12
 1002fb4:	e13ffd15 	stw	r4,-12(fp)
 1002fb8:	e17ffe15 	stw	r5,-8(fp)
 1002fbc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1002fc0:	01004034 	movhi	r4,256
 1002fc4:	2113aa04 	addi	r4,r4,20136
 1002fc8:	e17ffd17 	ldw	r5,-12(fp)
 1002fcc:	01800044 	movi	r6,1
 1002fd0:	01c07fc4 	movi	r7,511
 1002fd4:	1002ee00 	call	1002ee0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1002fd8:	01004034 	movhi	r4,256
 1002fdc:	2113a704 	addi	r4,r4,20124
 1002fe0:	e17ffe17 	ldw	r5,-8(fp)
 1002fe4:	000d883a 	mov	r6,zero
 1002fe8:	01c07fc4 	movi	r7,511
 1002fec:	1002ee00 	call	1002ee0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1002ff0:	01004034 	movhi	r4,256
 1002ff4:	2113ad04 	addi	r4,r4,20148
 1002ff8:	e17fff17 	ldw	r5,-4(fp)
 1002ffc:	01800044 	movi	r6,1
 1003000:	01c07fc4 	movi	r7,511
 1003004:	1002ee00 	call	1002ee0 <alt_open_fd>
}  
 1003008:	e037883a 	mov	sp,fp
 100300c:	dfc00117 	ldw	ra,4(sp)
 1003010:	df000017 	ldw	fp,0(sp)
 1003014:	dec00204 	addi	sp,sp,8
 1003018:	f800283a 	ret

0100301c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100301c:	defffc04 	addi	sp,sp,-16
 1003020:	df000315 	stw	fp,12(sp)
 1003024:	df000304 	addi	fp,sp,12
 1003028:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100302c:	e0bffe17 	ldw	r2,-8(fp)
 1003030:	10800217 	ldw	r2,8(r2)
 1003034:	10d00034 	orhi	r3,r2,16384
 1003038:	e0bffe17 	ldw	r2,-8(fp)
 100303c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1003040:	e03ffd15 	stw	zero,-12(fp)
 1003044:	00002006 	br	10030c8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1003048:	e0bffd17 	ldw	r2,-12(fp)
 100304c:	00c04034 	movhi	r3,256
 1003050:	18d3a704 	addi	r3,r3,20124
 1003054:	10800324 	muli	r2,r2,12
 1003058:	10c5883a 	add	r2,r2,r3
 100305c:	10c00017 	ldw	r3,0(r2)
 1003060:	e0bffe17 	ldw	r2,-8(fp)
 1003064:	10800017 	ldw	r2,0(r2)
 1003068:	1880141e 	bne	r3,r2,10030bc <alt_file_locked+0xa0>
 100306c:	e0bffd17 	ldw	r2,-12(fp)
 1003070:	00c04034 	movhi	r3,256
 1003074:	18d3a704 	addi	r3,r3,20124
 1003078:	10800324 	muli	r2,r2,12
 100307c:	10c5883a 	add	r2,r2,r3
 1003080:	10800204 	addi	r2,r2,8
 1003084:	10800017 	ldw	r2,0(r2)
 1003088:	1004403a 	cmpge	r2,r2,zero
 100308c:	10000b1e 	bne	r2,zero,10030bc <alt_file_locked+0xa0>
 1003090:	e0bffd17 	ldw	r2,-12(fp)
 1003094:	10800324 	muli	r2,r2,12
 1003098:	1007883a 	mov	r3,r2
 100309c:	00804034 	movhi	r2,256
 10030a0:	1093a704 	addi	r2,r2,20124
 10030a4:	1887883a 	add	r3,r3,r2
 10030a8:	e0bffe17 	ldw	r2,-8(fp)
 10030ac:	18800326 	beq	r3,r2,10030bc <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10030b0:	00bffcc4 	movi	r2,-13
 10030b4:	e0bfff15 	stw	r2,-4(fp)
 10030b8:	00000a06 	br	10030e4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10030bc:	e0bffd17 	ldw	r2,-12(fp)
 10030c0:	10800044 	addi	r2,r2,1
 10030c4:	e0bffd15 	stw	r2,-12(fp)
 10030c8:	00804034 	movhi	r2,256
 10030cc:	10951404 	addi	r2,r2,21584
 10030d0:	10800017 	ldw	r2,0(r2)
 10030d4:	1007883a 	mov	r3,r2
 10030d8:	e0bffd17 	ldw	r2,-12(fp)
 10030dc:	18bfda2e 	bgeu	r3,r2,1003048 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10030e0:	e03fff15 	stw	zero,-4(fp)
 10030e4:	e0bfff17 	ldw	r2,-4(fp)
}
 10030e8:	e037883a 	mov	sp,fp
 10030ec:	df000017 	ldw	fp,0(sp)
 10030f0:	dec00104 	addi	sp,sp,4
 10030f4:	f800283a 	ret

010030f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 10030f8:	defff404 	addi	sp,sp,-48
 10030fc:	dfc00b15 	stw	ra,44(sp)
 1003100:	df000a15 	stw	fp,40(sp)
 1003104:	df000a04 	addi	fp,sp,40
 1003108:	e13ffb15 	stw	r4,-20(fp)
 100310c:	e17ffc15 	stw	r5,-16(fp)
 1003110:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1003114:	00bfffc4 	movi	r2,-1
 1003118:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100311c:	00bffb44 	movi	r2,-19
 1003120:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1003124:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1003128:	e13ffb17 	ldw	r4,-20(fp)
 100312c:	01404034 	movhi	r5,256
 1003130:	29551204 	addi	r5,r5,21576
 1003134:	1002b500 	call	1002b50 <alt_find_dev>
 1003138:	e0bffa15 	stw	r2,-24(fp)
 100313c:	e0bffa17 	ldw	r2,-24(fp)
 1003140:	1004c03a 	cmpne	r2,r2,zero
 1003144:	1000051e 	bne	r2,zero,100315c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1003148:	e13ffb17 	ldw	r4,-20(fp)
 100314c:	10033600 	call	1003360 <alt_find_file>
 1003150:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1003154:	00800044 	movi	r2,1
 1003158:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100315c:	e0bffa17 	ldw	r2,-24(fp)
 1003160:	1005003a 	cmpeq	r2,r2,zero
 1003164:	1000301e 	bne	r2,zero,1003228 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1003168:	e13ffa17 	ldw	r4,-24(fp)
 100316c:	10034800 	call	1003480 <alt_get_fd>
 1003170:	e0bff815 	stw	r2,-32(fp)
 1003174:	e0bff817 	ldw	r2,-32(fp)
 1003178:	1004403a 	cmpge	r2,r2,zero
 100317c:	1000031e 	bne	r2,zero,100318c <open+0x94>
    {
      status = index;
 1003180:	e0bff817 	ldw	r2,-32(fp)
 1003184:	e0bff715 	stw	r2,-36(fp)
 1003188:	00002906 	br	1003230 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 100318c:	e0bff817 	ldw	r2,-32(fp)
 1003190:	10800324 	muli	r2,r2,12
 1003194:	1007883a 	mov	r3,r2
 1003198:	00804034 	movhi	r2,256
 100319c:	1093a704 	addi	r2,r2,20124
 10031a0:	1885883a 	add	r2,r3,r2
 10031a4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10031a8:	e0fffc17 	ldw	r3,-16(fp)
 10031ac:	00900034 	movhi	r2,16384
 10031b0:	10bfffc4 	addi	r2,r2,-1
 10031b4:	1886703a 	and	r3,r3,r2
 10031b8:	e0bff917 	ldw	r2,-28(fp)
 10031bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10031c0:	e0bff617 	ldw	r2,-40(fp)
 10031c4:	1004c03a 	cmpne	r2,r2,zero
 10031c8:	1000061e 	bne	r2,zero,10031e4 <open+0xec>
 10031cc:	e13ff917 	ldw	r4,-28(fp)
 10031d0:	100301c0 	call	100301c <alt_file_locked>
 10031d4:	e0bff715 	stw	r2,-36(fp)
 10031d8:	e0bff717 	ldw	r2,-36(fp)
 10031dc:	1004803a 	cmplt	r2,r2,zero
 10031e0:	1000131e 	bne	r2,zero,1003230 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 10031e4:	e0bffa17 	ldw	r2,-24(fp)
 10031e8:	10800317 	ldw	r2,12(r2)
 10031ec:	1005003a 	cmpeq	r2,r2,zero
 10031f0:	1000091e 	bne	r2,zero,1003218 <open+0x120>
 10031f4:	e0bffa17 	ldw	r2,-24(fp)
 10031f8:	10800317 	ldw	r2,12(r2)
 10031fc:	e13ff917 	ldw	r4,-28(fp)
 1003200:	e17ffb17 	ldw	r5,-20(fp)
 1003204:	e1bffc17 	ldw	r6,-16(fp)
 1003208:	e1fffd17 	ldw	r7,-12(fp)
 100320c:	103ee83a 	callr	r2
 1003210:	e0bfff15 	stw	r2,-4(fp)
 1003214:	00000106 	br	100321c <open+0x124>
 1003218:	e03fff15 	stw	zero,-4(fp)
 100321c:	e0bfff17 	ldw	r2,-4(fp)
 1003220:	e0bff715 	stw	r2,-36(fp)
 1003224:	00000206 	br	1003230 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1003228:	00bffb44 	movi	r2,-19
 100322c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1003230:	e0bff717 	ldw	r2,-36(fp)
 1003234:	1004403a 	cmpge	r2,r2,zero
 1003238:	1000091e 	bne	r2,zero,1003260 <open+0x168>
  {
    alt_release_fd (index);  
 100323c:	e13ff817 	ldw	r4,-32(fp)
 1003240:	10032e00 	call	10032e0 <alt_release_fd>
    ALT_ERRNO = -status;
 1003244:	10032800 	call	1003280 <alt_get_errno>
 1003248:	e0fff717 	ldw	r3,-36(fp)
 100324c:	00c7c83a 	sub	r3,zero,r3
 1003250:	10c00015 	stw	r3,0(r2)
    return -1;
 1003254:	00bfffc4 	movi	r2,-1
 1003258:	e0bffe15 	stw	r2,-8(fp)
 100325c:	00000206 	br	1003268 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 1003260:	e0bff817 	ldw	r2,-32(fp)
 1003264:	e0bffe15 	stw	r2,-8(fp)
 1003268:	e0bffe17 	ldw	r2,-8(fp)
}
 100326c:	e037883a 	mov	sp,fp
 1003270:	dfc00117 	ldw	ra,4(sp)
 1003274:	df000017 	ldw	fp,0(sp)
 1003278:	dec00204 	addi	sp,sp,8
 100327c:	f800283a 	ret

01003280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003280:	defffd04 	addi	sp,sp,-12
 1003284:	dfc00215 	stw	ra,8(sp)
 1003288:	df000115 	stw	fp,4(sp)
 100328c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003290:	00804034 	movhi	r2,256
 1003294:	10951504 	addi	r2,r2,21588
 1003298:	10800017 	ldw	r2,0(r2)
 100329c:	1005003a 	cmpeq	r2,r2,zero
 10032a0:	1000061e 	bne	r2,zero,10032bc <alt_get_errno+0x3c>
 10032a4:	00804034 	movhi	r2,256
 10032a8:	10951504 	addi	r2,r2,21588
 10032ac:	10800017 	ldw	r2,0(r2)
 10032b0:	103ee83a 	callr	r2
 10032b4:	e0bfff15 	stw	r2,-4(fp)
 10032b8:	00000306 	br	10032c8 <alt_get_errno+0x48>
 10032bc:	00804034 	movhi	r2,256
 10032c0:	109ada04 	addi	r2,r2,27496
 10032c4:	e0bfff15 	stw	r2,-4(fp)
 10032c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10032cc:	e037883a 	mov	sp,fp
 10032d0:	dfc00117 	ldw	ra,4(sp)
 10032d4:	df000017 	ldw	fp,0(sp)
 10032d8:	dec00204 	addi	sp,sp,8
 10032dc:	f800283a 	ret

010032e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10032e0:	defffe04 	addi	sp,sp,-8
 10032e4:	df000115 	stw	fp,4(sp)
 10032e8:	df000104 	addi	fp,sp,4
 10032ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10032f0:	e0bfff17 	ldw	r2,-4(fp)
 10032f4:	108000d0 	cmplti	r2,r2,3
 10032f8:	10000d1e 	bne	r2,zero,1003330 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10032fc:	e0bfff17 	ldw	r2,-4(fp)
 1003300:	00c04034 	movhi	r3,256
 1003304:	18d3a704 	addi	r3,r3,20124
 1003308:	10800324 	muli	r2,r2,12
 100330c:	10c5883a 	add	r2,r2,r3
 1003310:	10800204 	addi	r2,r2,8
 1003314:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1003318:	e0bfff17 	ldw	r2,-4(fp)
 100331c:	00c04034 	movhi	r3,256
 1003320:	18d3a704 	addi	r3,r3,20124
 1003324:	10800324 	muli	r2,r2,12
 1003328:	10c5883a 	add	r2,r2,r3
 100332c:	10000015 	stw	zero,0(r2)
  }
}
 1003330:	e037883a 	mov	sp,fp
 1003334:	df000017 	ldw	fp,0(sp)
 1003338:	dec00104 	addi	sp,sp,4
 100333c:	f800283a 	ret

01003340 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1003340:	deffff04 	addi	sp,sp,-4
 1003344:	df000015 	stw	fp,0(sp)
 1003348:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100334c:	000170fa 	wrctl	ienable,zero
}
 1003350:	e037883a 	mov	sp,fp
 1003354:	df000017 	ldw	fp,0(sp)
 1003358:	dec00104 	addi	sp,sp,4
 100335c:	f800283a 	ret

01003360 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1003360:	defffa04 	addi	sp,sp,-24
 1003364:	dfc00515 	stw	ra,20(sp)
 1003368:	df000415 	stw	fp,16(sp)
 100336c:	df000404 	addi	fp,sp,16
 1003370:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1003374:	00804034 	movhi	r2,256
 1003378:	10951004 	addi	r2,r2,21568
 100337c:	10800017 	ldw	r2,0(r2)
 1003380:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1003384:	00003306 	br	1003454 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1003388:	e0bffd17 	ldw	r2,-12(fp)
 100338c:	11000217 	ldw	r4,8(r2)
 1003390:	10037e40 	call	10037e4 <strlen>
 1003394:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1003398:	e0bffd17 	ldw	r2,-12(fp)
 100339c:	10c00217 	ldw	r3,8(r2)
 10033a0:	e0bffc17 	ldw	r2,-16(fp)
 10033a4:	1885883a 	add	r2,r3,r2
 10033a8:	10bfffc4 	addi	r2,r2,-1
 10033ac:	10800003 	ldbu	r2,0(r2)
 10033b0:	10803fcc 	andi	r2,r2,255
 10033b4:	1080201c 	xori	r2,r2,128
 10033b8:	10bfe004 	addi	r2,r2,-128
 10033bc:	10800bd8 	cmpnei	r2,r2,47
 10033c0:	1000031e 	bne	r2,zero,10033d0 <alt_find_file+0x70>
    {
      len -= 1;
 10033c4:	e0bffc17 	ldw	r2,-16(fp)
 10033c8:	10bfffc4 	addi	r2,r2,-1
 10033cc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10033d0:	e0bffc17 	ldw	r2,-16(fp)
 10033d4:	1007883a 	mov	r3,r2
 10033d8:	e0bffe17 	ldw	r2,-8(fp)
 10033dc:	1885883a 	add	r2,r3,r2
 10033e0:	10800003 	ldbu	r2,0(r2)
 10033e4:	10803fcc 	andi	r2,r2,255
 10033e8:	1080201c 	xori	r2,r2,128
 10033ec:	10bfe004 	addi	r2,r2,-128
 10033f0:	10800be0 	cmpeqi	r2,r2,47
 10033f4:	10000a1e 	bne	r2,zero,1003420 <alt_find_file+0xc0>
 10033f8:	e0bffc17 	ldw	r2,-16(fp)
 10033fc:	1007883a 	mov	r3,r2
 1003400:	e0bffe17 	ldw	r2,-8(fp)
 1003404:	1885883a 	add	r2,r3,r2
 1003408:	10800003 	ldbu	r2,0(r2)
 100340c:	10803fcc 	andi	r2,r2,255
 1003410:	1080201c 	xori	r2,r2,128
 1003414:	10bfe004 	addi	r2,r2,-128
 1003418:	1004c03a 	cmpne	r2,r2,zero
 100341c:	10000a1e 	bne	r2,zero,1003448 <alt_find_file+0xe8>
 1003420:	e0bffd17 	ldw	r2,-12(fp)
 1003424:	11000217 	ldw	r4,8(r2)
 1003428:	e1bffc17 	ldw	r6,-16(fp)
 100342c:	e17ffe17 	ldw	r5,-8(fp)
 1003430:	10036140 	call	1003614 <memcmp>
 1003434:	1004c03a 	cmpne	r2,r2,zero
 1003438:	1000031e 	bne	r2,zero,1003448 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100343c:	e0bffd17 	ldw	r2,-12(fp)
 1003440:	e0bfff15 	stw	r2,-4(fp)
 1003444:	00000806 	br	1003468 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1003448:	e0bffd17 	ldw	r2,-12(fp)
 100344c:	10800017 	ldw	r2,0(r2)
 1003450:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1003454:	00c04034 	movhi	r3,256
 1003458:	18d51004 	addi	r3,r3,21568
 100345c:	e0bffd17 	ldw	r2,-12(fp)
 1003460:	10ffc91e 	bne	r2,r3,1003388 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1003464:	e03fff15 	stw	zero,-4(fp)
 1003468:	e0bfff17 	ldw	r2,-4(fp)
}
 100346c:	e037883a 	mov	sp,fp
 1003470:	dfc00117 	ldw	ra,4(sp)
 1003474:	df000017 	ldw	fp,0(sp)
 1003478:	dec00204 	addi	sp,sp,8
 100347c:	f800283a 	ret

01003480 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1003480:	defffc04 	addi	sp,sp,-16
 1003484:	df000315 	stw	fp,12(sp)
 1003488:	df000304 	addi	fp,sp,12
 100348c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1003490:	00bffa04 	movi	r2,-24
 1003494:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1003498:	e03ffe15 	stw	zero,-8(fp)
 100349c:	00001e06 	br	1003518 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 10034a0:	e0bffe17 	ldw	r2,-8(fp)
 10034a4:	00c04034 	movhi	r3,256
 10034a8:	18d3a704 	addi	r3,r3,20124
 10034ac:	10800324 	muli	r2,r2,12
 10034b0:	10c5883a 	add	r2,r2,r3
 10034b4:	10800017 	ldw	r2,0(r2)
 10034b8:	1004c03a 	cmpne	r2,r2,zero
 10034bc:	1000131e 	bne	r2,zero,100350c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 10034c0:	e0bffe17 	ldw	r2,-8(fp)
 10034c4:	00c04034 	movhi	r3,256
 10034c8:	18d3a704 	addi	r3,r3,20124
 10034cc:	10800324 	muli	r2,r2,12
 10034d0:	10c7883a 	add	r3,r2,r3
 10034d4:	e0bfff17 	ldw	r2,-4(fp)
 10034d8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 10034dc:	00804034 	movhi	r2,256
 10034e0:	10951404 	addi	r2,r2,21584
 10034e4:	10c00017 	ldw	r3,0(r2)
 10034e8:	e0bffe17 	ldw	r2,-8(fp)
 10034ec:	1880040e 	bge	r3,r2,1003500 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 10034f0:	00c04034 	movhi	r3,256
 10034f4:	18d51404 	addi	r3,r3,21584
 10034f8:	e0bffe17 	ldw	r2,-8(fp)
 10034fc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1003500:	e0bffe17 	ldw	r2,-8(fp)
 1003504:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1003508:	00000606 	br	1003524 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100350c:	e0bffe17 	ldw	r2,-8(fp)
 1003510:	10800044 	addi	r2,r2,1
 1003514:	e0bffe15 	stw	r2,-8(fp)
 1003518:	e0bffe17 	ldw	r2,-8(fp)
 100351c:	10800810 	cmplti	r2,r2,32
 1003520:	103fdf1e 	bne	r2,zero,10034a0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1003524:	e0bffd17 	ldw	r2,-12(fp)
}
 1003528:	e037883a 	mov	sp,fp
 100352c:	df000017 	ldw	fp,0(sp)
 1003530:	dec00104 	addi	sp,sp,4
 1003534:	f800283a 	ret

01003538 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1003538:	defffb04 	addi	sp,sp,-20
 100353c:	df000415 	stw	fp,16(sp)
 1003540:	df000404 	addi	fp,sp,16
 1003544:	e13ffe15 	stw	r4,-8(fp)
 1003548:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100354c:	e0bfff17 	ldw	r2,-4(fp)
 1003550:	10840070 	cmpltui	r2,r2,4097
 1003554:	1000021e 	bne	r2,zero,1003560 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1003558:	00840004 	movi	r2,4096
 100355c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1003560:	e0fffe17 	ldw	r3,-8(fp)
 1003564:	e0bfff17 	ldw	r2,-4(fp)
 1003568:	1885883a 	add	r2,r3,r2
 100356c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1003570:	e0bffe17 	ldw	r2,-8(fp)
 1003574:	e0bffd15 	stw	r2,-12(fp)
 1003578:	00000506 	br	1003590 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100357c:	e0bffd17 	ldw	r2,-12(fp)
 1003580:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1003584:	e0bffd17 	ldw	r2,-12(fp)
 1003588:	10800804 	addi	r2,r2,32
 100358c:	e0bffd15 	stw	r2,-12(fp)
 1003590:	e0fffd17 	ldw	r3,-12(fp)
 1003594:	e0bffc17 	ldw	r2,-16(fp)
 1003598:	18bff836 	bltu	r3,r2,100357c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100359c:	e0bffe17 	ldw	r2,-8(fp)
 10035a0:	108007cc 	andi	r2,r2,31
 10035a4:	1005003a 	cmpeq	r2,r2,zero
 10035a8:	1000021e 	bne	r2,zero,10035b4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 10035ac:	e0bffd17 	ldw	r2,-12(fp)
 10035b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 10035b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10035b8:	e037883a 	mov	sp,fp
 10035bc:	df000017 	ldw	fp,0(sp)
 10035c0:	dec00104 	addi	sp,sp,4
 10035c4:	f800283a 	ret

010035c8 <atexit>:
 10035c8:	200b883a 	mov	r5,r4
 10035cc:	000d883a 	mov	r6,zero
 10035d0:	0009883a 	mov	r4,zero
 10035d4:	000f883a 	mov	r7,zero
 10035d8:	10038581 	jmpi	1003858 <__register_exitproc>

010035dc <exit>:
 10035dc:	defffe04 	addi	sp,sp,-8
 10035e0:	000b883a 	mov	r5,zero
 10035e4:	dc000015 	stw	r16,0(sp)
 10035e8:	dfc00115 	stw	ra,4(sp)
 10035ec:	2021883a 	mov	r16,r4
 10035f0:	10039900 	call	1003990 <__call_exitprocs>
 10035f4:	00804034 	movhi	r2,256
 10035f8:	10951804 	addi	r2,r2,21600
 10035fc:	11000017 	ldw	r4,0(r2)
 1003600:	20800f17 	ldw	r2,60(r4)
 1003604:	10000126 	beq	r2,zero,100360c <exit+0x30>
 1003608:	103ee83a 	callr	r2
 100360c:	8009883a 	mov	r4,r16
 1003610:	1003b800 	call	1003b80 <_exit>

01003614 <memcmp>:
 1003614:	00c000c4 	movi	r3,3
 1003618:	1980032e 	bgeu	r3,r6,1003628 <memcmp+0x14>
 100361c:	2144b03a 	or	r2,r4,r5
 1003620:	10c4703a 	and	r2,r2,r3
 1003624:	10000f26 	beq	r2,zero,1003664 <memcmp+0x50>
 1003628:	31ffffc4 	addi	r7,r6,-1
 100362c:	3000061e 	bne	r6,zero,1003648 <memcmp+0x34>
 1003630:	00000a06 	br	100365c <memcmp+0x48>
 1003634:	39ffffc4 	addi	r7,r7,-1
 1003638:	00bfffc4 	movi	r2,-1
 100363c:	21000044 	addi	r4,r4,1
 1003640:	29400044 	addi	r5,r5,1
 1003644:	38800526 	beq	r7,r2,100365c <memcmp+0x48>
 1003648:	20c00003 	ldbu	r3,0(r4)
 100364c:	28800003 	ldbu	r2,0(r5)
 1003650:	18bff826 	beq	r3,r2,1003634 <memcmp+0x20>
 1003654:	1885c83a 	sub	r2,r3,r2
 1003658:	f800283a 	ret
 100365c:	0005883a 	mov	r2,zero
 1003660:	f800283a 	ret
 1003664:	180f883a 	mov	r7,r3
 1003668:	20c00017 	ldw	r3,0(r4)
 100366c:	28800017 	ldw	r2,0(r5)
 1003670:	18bfed1e 	bne	r3,r2,1003628 <memcmp+0x14>
 1003674:	31bfff04 	addi	r6,r6,-4
 1003678:	21000104 	addi	r4,r4,4
 100367c:	29400104 	addi	r5,r5,4
 1003680:	39bff936 	bltu	r7,r6,1003668 <memcmp+0x54>
 1003684:	003fe806 	br	1003628 <memcmp+0x14>

01003688 <memcpy>:
 1003688:	01c003c4 	movi	r7,15
 100368c:	2007883a 	mov	r3,r4
 1003690:	3980032e 	bgeu	r7,r6,10036a0 <memcpy+0x18>
 1003694:	2904b03a 	or	r2,r5,r4
 1003698:	108000cc 	andi	r2,r2,3
 100369c:	10000926 	beq	r2,zero,10036c4 <memcpy+0x3c>
 10036a0:	30000626 	beq	r6,zero,10036bc <memcpy+0x34>
 10036a4:	30cd883a 	add	r6,r6,r3
 10036a8:	28800003 	ldbu	r2,0(r5)
 10036ac:	29400044 	addi	r5,r5,1
 10036b0:	18800005 	stb	r2,0(r3)
 10036b4:	18c00044 	addi	r3,r3,1
 10036b8:	30fffb1e 	bne	r6,r3,10036a8 <memcpy+0x20>
 10036bc:	2005883a 	mov	r2,r4
 10036c0:	f800283a 	ret
 10036c4:	3811883a 	mov	r8,r7
 10036c8:	200f883a 	mov	r7,r4
 10036cc:	28c00017 	ldw	r3,0(r5)
 10036d0:	31bffc04 	addi	r6,r6,-16
 10036d4:	38c00015 	stw	r3,0(r7)
 10036d8:	28800117 	ldw	r2,4(r5)
 10036dc:	38800115 	stw	r2,4(r7)
 10036e0:	28c00217 	ldw	r3,8(r5)
 10036e4:	38c00215 	stw	r3,8(r7)
 10036e8:	28800317 	ldw	r2,12(r5)
 10036ec:	29400404 	addi	r5,r5,16
 10036f0:	38800315 	stw	r2,12(r7)
 10036f4:	39c00404 	addi	r7,r7,16
 10036f8:	41bff436 	bltu	r8,r6,10036cc <memcpy+0x44>
 10036fc:	008000c4 	movi	r2,3
 1003700:	1180072e 	bgeu	r2,r6,1003720 <memcpy+0x98>
 1003704:	1007883a 	mov	r3,r2
 1003708:	28800017 	ldw	r2,0(r5)
 100370c:	31bfff04 	addi	r6,r6,-4
 1003710:	29400104 	addi	r5,r5,4
 1003714:	38800015 	stw	r2,0(r7)
 1003718:	39c00104 	addi	r7,r7,4
 100371c:	19bffa36 	bltu	r3,r6,1003708 <memcpy+0x80>
 1003720:	3807883a 	mov	r3,r7
 1003724:	003fde06 	br	10036a0 <memcpy+0x18>

01003728 <strcmp>:
 1003728:	2144b03a 	or	r2,r4,r5
 100372c:	108000cc 	andi	r2,r2,3
 1003730:	10001d1e 	bne	r2,zero,10037a8 <strcmp+0x80>
 1003734:	200f883a 	mov	r7,r4
 1003738:	28800017 	ldw	r2,0(r5)
 100373c:	21000017 	ldw	r4,0(r4)
 1003740:	280d883a 	mov	r6,r5
 1003744:	2080161e 	bne	r4,r2,10037a0 <strcmp+0x78>
 1003748:	023fbff4 	movhi	r8,65279
 100374c:	423fbfc4 	addi	r8,r8,-257
 1003750:	2207883a 	add	r3,r4,r8
 1003754:	01602074 	movhi	r5,32897
 1003758:	29602004 	addi	r5,r5,-32640
 100375c:	1946703a 	and	r3,r3,r5
 1003760:	0104303a 	nor	r2,zero,r4
 1003764:	10c4703a 	and	r2,r2,r3
 1003768:	10001c1e 	bne	r2,zero,10037dc <strcmp+0xb4>
 100376c:	4013883a 	mov	r9,r8
 1003770:	2811883a 	mov	r8,r5
 1003774:	00000106 	br	100377c <strcmp+0x54>
 1003778:	1800181e 	bne	r3,zero,10037dc <strcmp+0xb4>
 100377c:	39c00104 	addi	r7,r7,4
 1003780:	39000017 	ldw	r4,0(r7)
 1003784:	31800104 	addi	r6,r6,4
 1003788:	31400017 	ldw	r5,0(r6)
 100378c:	2245883a 	add	r2,r4,r9
 1003790:	1204703a 	and	r2,r2,r8
 1003794:	0106303a 	nor	r3,zero,r4
 1003798:	1886703a 	and	r3,r3,r2
 100379c:	217ff626 	beq	r4,r5,1003778 <strcmp+0x50>
 10037a0:	3809883a 	mov	r4,r7
 10037a4:	300b883a 	mov	r5,r6
 10037a8:	20c00007 	ldb	r3,0(r4)
 10037ac:	1800051e 	bne	r3,zero,10037c4 <strcmp+0x9c>
 10037b0:	00000606 	br	10037cc <strcmp+0xa4>
 10037b4:	21000044 	addi	r4,r4,1
 10037b8:	20c00007 	ldb	r3,0(r4)
 10037bc:	29400044 	addi	r5,r5,1
 10037c0:	18000226 	beq	r3,zero,10037cc <strcmp+0xa4>
 10037c4:	28800007 	ldb	r2,0(r5)
 10037c8:	18bffa26 	beq	r3,r2,10037b4 <strcmp+0x8c>
 10037cc:	20c00003 	ldbu	r3,0(r4)
 10037d0:	28800003 	ldbu	r2,0(r5)
 10037d4:	1885c83a 	sub	r2,r3,r2
 10037d8:	f800283a 	ret
 10037dc:	0005883a 	mov	r2,zero
 10037e0:	f800283a 	ret

010037e4 <strlen>:
 10037e4:	208000cc 	andi	r2,r4,3
 10037e8:	2011883a 	mov	r8,r4
 10037ec:	1000161e 	bne	r2,zero,1003848 <strlen+0x64>
 10037f0:	20c00017 	ldw	r3,0(r4)
 10037f4:	017fbff4 	movhi	r5,65279
 10037f8:	297fbfc4 	addi	r5,r5,-257
 10037fc:	01e02074 	movhi	r7,32897
 1003800:	39e02004 	addi	r7,r7,-32640
 1003804:	1945883a 	add	r2,r3,r5
 1003808:	11c4703a 	and	r2,r2,r7
 100380c:	00c6303a 	nor	r3,zero,r3
 1003810:	1886703a 	and	r3,r3,r2
 1003814:	18000c1e 	bne	r3,zero,1003848 <strlen+0x64>
 1003818:	280d883a 	mov	r6,r5
 100381c:	380b883a 	mov	r5,r7
 1003820:	21000104 	addi	r4,r4,4
 1003824:	20800017 	ldw	r2,0(r4)
 1003828:	1187883a 	add	r3,r2,r6
 100382c:	1946703a 	and	r3,r3,r5
 1003830:	0084303a 	nor	r2,zero,r2
 1003834:	10c4703a 	and	r2,r2,r3
 1003838:	103ff926 	beq	r2,zero,1003820 <strlen+0x3c>
 100383c:	20800007 	ldb	r2,0(r4)
 1003840:	10000326 	beq	r2,zero,1003850 <strlen+0x6c>
 1003844:	21000044 	addi	r4,r4,1
 1003848:	20800007 	ldb	r2,0(r4)
 100384c:	103ffd1e 	bne	r2,zero,1003844 <strlen+0x60>
 1003850:	2205c83a 	sub	r2,r4,r8
 1003854:	f800283a 	ret

01003858 <__register_exitproc>:
 1003858:	defffa04 	addi	sp,sp,-24
 100385c:	00804034 	movhi	r2,256
 1003860:	10951804 	addi	r2,r2,21600
 1003864:	dc000015 	stw	r16,0(sp)
 1003868:	14000017 	ldw	r16,0(r2)
 100386c:	dd000415 	stw	r20,16(sp)
 1003870:	2829883a 	mov	r20,r5
 1003874:	81405217 	ldw	r5,328(r16)
 1003878:	dcc00315 	stw	r19,12(sp)
 100387c:	dc800215 	stw	r18,8(sp)
 1003880:	dc400115 	stw	r17,4(sp)
 1003884:	dfc00515 	stw	ra,20(sp)
 1003888:	2023883a 	mov	r17,r4
 100388c:	3027883a 	mov	r19,r6
 1003890:	3825883a 	mov	r18,r7
 1003894:	28002526 	beq	r5,zero,100392c <__register_exitproc+0xd4>
 1003898:	29000117 	ldw	r4,4(r5)
 100389c:	008007c4 	movi	r2,31
 10038a0:	11002716 	blt	r2,r4,1003940 <__register_exitproc+0xe8>
 10038a4:	8800101e 	bne	r17,zero,10038e8 <__register_exitproc+0x90>
 10038a8:	2105883a 	add	r2,r4,r4
 10038ac:	1085883a 	add	r2,r2,r2
 10038b0:	20c00044 	addi	r3,r4,1
 10038b4:	1145883a 	add	r2,r2,r5
 10038b8:	0009883a 	mov	r4,zero
 10038bc:	15000215 	stw	r20,8(r2)
 10038c0:	28c00115 	stw	r3,4(r5)
 10038c4:	2005883a 	mov	r2,r4
 10038c8:	dfc00517 	ldw	ra,20(sp)
 10038cc:	dd000417 	ldw	r20,16(sp)
 10038d0:	dcc00317 	ldw	r19,12(sp)
 10038d4:	dc800217 	ldw	r18,8(sp)
 10038d8:	dc400117 	ldw	r17,4(sp)
 10038dc:	dc000017 	ldw	r16,0(sp)
 10038e0:	dec00604 	addi	sp,sp,24
 10038e4:	f800283a 	ret
 10038e8:	29802204 	addi	r6,r5,136
 10038ec:	00800044 	movi	r2,1
 10038f0:	110e983a 	sll	r7,r2,r4
 10038f4:	30c04017 	ldw	r3,256(r6)
 10038f8:	2105883a 	add	r2,r4,r4
 10038fc:	1085883a 	add	r2,r2,r2
 1003900:	1185883a 	add	r2,r2,r6
 1003904:	19c6b03a 	or	r3,r3,r7
 1003908:	14802015 	stw	r18,128(r2)
 100390c:	14c00015 	stw	r19,0(r2)
 1003910:	00800084 	movi	r2,2
 1003914:	30c04015 	stw	r3,256(r6)
 1003918:	88bfe31e 	bne	r17,r2,10038a8 <__register_exitproc+0x50>
 100391c:	30804117 	ldw	r2,260(r6)
 1003920:	11c4b03a 	or	r2,r2,r7
 1003924:	30804115 	stw	r2,260(r6)
 1003928:	003fdf06 	br	10038a8 <__register_exitproc+0x50>
 100392c:	00804034 	movhi	r2,256
 1003930:	109b2104 	addi	r2,r2,27780
 1003934:	100b883a 	mov	r5,r2
 1003938:	80805215 	stw	r2,328(r16)
 100393c:	003fd606 	br	1003898 <__register_exitproc+0x40>
 1003940:	00800034 	movhi	r2,0
 1003944:	10800004 	addi	r2,r2,0
 1003948:	1000021e 	bne	r2,zero,1003954 <__register_exitproc+0xfc>
 100394c:	013fffc4 	movi	r4,-1
 1003950:	003fdc06 	br	10038c4 <__register_exitproc+0x6c>
 1003954:	01006404 	movi	r4,400
 1003958:	103ee83a 	callr	r2
 100395c:	1007883a 	mov	r3,r2
 1003960:	103ffa26 	beq	r2,zero,100394c <__register_exitproc+0xf4>
 1003964:	80805217 	ldw	r2,328(r16)
 1003968:	180b883a 	mov	r5,r3
 100396c:	18000115 	stw	zero,4(r3)
 1003970:	18800015 	stw	r2,0(r3)
 1003974:	80c05215 	stw	r3,328(r16)
 1003978:	18006215 	stw	zero,392(r3)
 100397c:	18006315 	stw	zero,396(r3)
 1003980:	0009883a 	mov	r4,zero
 1003984:	883fc826 	beq	r17,zero,10038a8 <__register_exitproc+0x50>
 1003988:	003fd706 	br	10038e8 <__register_exitproc+0x90>

0100398c <register_fini>:
 100398c:	f800283a 	ret

01003990 <__call_exitprocs>:
 1003990:	00804034 	movhi	r2,256
 1003994:	10951804 	addi	r2,r2,21600
 1003998:	10800017 	ldw	r2,0(r2)
 100399c:	defff304 	addi	sp,sp,-52
 10039a0:	df000b15 	stw	fp,44(sp)
 10039a4:	d8800115 	stw	r2,4(sp)
 10039a8:	00800034 	movhi	r2,0
 10039ac:	10800004 	addi	r2,r2,0
 10039b0:	1005003a 	cmpeq	r2,r2,zero
 10039b4:	d8800215 	stw	r2,8(sp)
 10039b8:	d8800117 	ldw	r2,4(sp)
 10039bc:	dd400815 	stw	r21,32(sp)
 10039c0:	dd000715 	stw	r20,28(sp)
 10039c4:	10805204 	addi	r2,r2,328
 10039c8:	dfc00c15 	stw	ra,48(sp)
 10039cc:	ddc00a15 	stw	r23,40(sp)
 10039d0:	dd800915 	stw	r22,36(sp)
 10039d4:	dcc00615 	stw	r19,24(sp)
 10039d8:	dc800515 	stw	r18,20(sp)
 10039dc:	dc400415 	stw	r17,16(sp)
 10039e0:	dc000315 	stw	r16,12(sp)
 10039e4:	282b883a 	mov	r21,r5
 10039e8:	2039883a 	mov	fp,r4
 10039ec:	d8800015 	stw	r2,0(sp)
 10039f0:	2829003a 	cmpeq	r20,r5,zero
 10039f4:	d8800117 	ldw	r2,4(sp)
 10039f8:	14405217 	ldw	r17,328(r2)
 10039fc:	88001026 	beq	r17,zero,1003a40 <__call_exitprocs+0xb0>
 1003a00:	ddc00017 	ldw	r23,0(sp)
 1003a04:	88800117 	ldw	r2,4(r17)
 1003a08:	8c802204 	addi	r18,r17,136
 1003a0c:	143fffc4 	addi	r16,r2,-1
 1003a10:	80000916 	blt	r16,zero,1003a38 <__call_exitprocs+0xa8>
 1003a14:	05bfffc4 	movi	r22,-1
 1003a18:	a000151e 	bne	r20,zero,1003a70 <__call_exitprocs+0xe0>
 1003a1c:	8409883a 	add	r4,r16,r16
 1003a20:	2105883a 	add	r2,r4,r4
 1003a24:	1485883a 	add	r2,r2,r18
 1003a28:	10c02017 	ldw	r3,128(r2)
 1003a2c:	a8c01126 	beq	r21,r3,1003a74 <__call_exitprocs+0xe4>
 1003a30:	843fffc4 	addi	r16,r16,-1
 1003a34:	85bff81e 	bne	r16,r22,1003a18 <__call_exitprocs+0x88>
 1003a38:	d8800217 	ldw	r2,8(sp)
 1003a3c:	10003126 	beq	r2,zero,1003b04 <__call_exitprocs+0x174>
 1003a40:	dfc00c17 	ldw	ra,48(sp)
 1003a44:	df000b17 	ldw	fp,44(sp)
 1003a48:	ddc00a17 	ldw	r23,40(sp)
 1003a4c:	dd800917 	ldw	r22,36(sp)
 1003a50:	dd400817 	ldw	r21,32(sp)
 1003a54:	dd000717 	ldw	r20,28(sp)
 1003a58:	dcc00617 	ldw	r19,24(sp)
 1003a5c:	dc800517 	ldw	r18,20(sp)
 1003a60:	dc400417 	ldw	r17,16(sp)
 1003a64:	dc000317 	ldw	r16,12(sp)
 1003a68:	dec00d04 	addi	sp,sp,52
 1003a6c:	f800283a 	ret
 1003a70:	8409883a 	add	r4,r16,r16
 1003a74:	88c00117 	ldw	r3,4(r17)
 1003a78:	2105883a 	add	r2,r4,r4
 1003a7c:	1445883a 	add	r2,r2,r17
 1003a80:	18ffffc4 	addi	r3,r3,-1
 1003a84:	11800217 	ldw	r6,8(r2)
 1003a88:	1c001526 	beq	r3,r16,1003ae0 <__call_exitprocs+0x150>
 1003a8c:	10000215 	stw	zero,8(r2)
 1003a90:	303fe726 	beq	r6,zero,1003a30 <__call_exitprocs+0xa0>
 1003a94:	00c00044 	movi	r3,1
 1003a98:	1c06983a 	sll	r3,r3,r16
 1003a9c:	90804017 	ldw	r2,256(r18)
 1003aa0:	8cc00117 	ldw	r19,4(r17)
 1003aa4:	1884703a 	and	r2,r3,r2
 1003aa8:	10001426 	beq	r2,zero,1003afc <__call_exitprocs+0x16c>
 1003aac:	90804117 	ldw	r2,260(r18)
 1003ab0:	1884703a 	and	r2,r3,r2
 1003ab4:	10000c1e 	bne	r2,zero,1003ae8 <__call_exitprocs+0x158>
 1003ab8:	2105883a 	add	r2,r4,r4
 1003abc:	1485883a 	add	r2,r2,r18
 1003ac0:	11400017 	ldw	r5,0(r2)
 1003ac4:	e009883a 	mov	r4,fp
 1003ac8:	303ee83a 	callr	r6
 1003acc:	88800117 	ldw	r2,4(r17)
 1003ad0:	98bfc81e 	bne	r19,r2,10039f4 <__call_exitprocs+0x64>
 1003ad4:	b8800017 	ldw	r2,0(r23)
 1003ad8:	147fd526 	beq	r2,r17,1003a30 <__call_exitprocs+0xa0>
 1003adc:	003fc506 	br	10039f4 <__call_exitprocs+0x64>
 1003ae0:	8c000115 	stw	r16,4(r17)
 1003ae4:	003fea06 	br	1003a90 <__call_exitprocs+0x100>
 1003ae8:	2105883a 	add	r2,r4,r4
 1003aec:	1485883a 	add	r2,r2,r18
 1003af0:	11000017 	ldw	r4,0(r2)
 1003af4:	303ee83a 	callr	r6
 1003af8:	003ff406 	br	1003acc <__call_exitprocs+0x13c>
 1003afc:	303ee83a 	callr	r6
 1003b00:	003ff206 	br	1003acc <__call_exitprocs+0x13c>
 1003b04:	88800117 	ldw	r2,4(r17)
 1003b08:	1000081e 	bne	r2,zero,1003b2c <__call_exitprocs+0x19c>
 1003b0c:	89000017 	ldw	r4,0(r17)
 1003b10:	20000726 	beq	r4,zero,1003b30 <__call_exitprocs+0x1a0>
 1003b14:	b9000015 	stw	r4,0(r23)
 1003b18:	8809883a 	mov	r4,r17
 1003b1c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1003b20:	bc400017 	ldw	r17,0(r23)
 1003b24:	883fb71e 	bne	r17,zero,1003a04 <__call_exitprocs+0x74>
 1003b28:	003fc506 	br	1003a40 <__call_exitprocs+0xb0>
 1003b2c:	89000017 	ldw	r4,0(r17)
 1003b30:	882f883a 	mov	r23,r17
 1003b34:	2023883a 	mov	r17,r4
 1003b38:	883fb21e 	bne	r17,zero,1003a04 <__call_exitprocs+0x74>
 1003b3c:	003fc006 	br	1003a40 <__call_exitprocs+0xb0>

01003b40 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1003b40:	defffd04 	addi	sp,sp,-12
 1003b44:	df000215 	stw	fp,8(sp)
 1003b48:	df000204 	addi	fp,sp,8
 1003b4c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1003b50:	e0bfff17 	ldw	r2,-4(fp)
 1003b54:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1003b58:	e0bffe17 	ldw	r2,-8(fp)
 1003b5c:	1005003a 	cmpeq	r2,r2,zero
 1003b60:	1000021e 	bne	r2,zero,1003b6c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1003b64:	002af070 	cmpltui	zero,zero,43969
 1003b68:	00000106 	br	1003b70 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1003b6c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1003b70:	e037883a 	mov	sp,fp
 1003b74:	df000017 	ldw	fp,0(sp)
 1003b78:	dec00104 	addi	sp,sp,4
 1003b7c:	f800283a 	ret

01003b80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1003b80:	defffd04 	addi	sp,sp,-12
 1003b84:	dfc00215 	stw	ra,8(sp)
 1003b88:	df000115 	stw	fp,4(sp)
 1003b8c:	df000104 	addi	fp,sp,4
 1003b90:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1003b94:	e13fff17 	ldw	r4,-4(fp)
 1003b98:	1003b400 	call	1003b40 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1003b9c:	003fff06 	br	1003b9c <_exit+0x1c>
 1003ba0:	0100398c 	andi	r4,zero,230
