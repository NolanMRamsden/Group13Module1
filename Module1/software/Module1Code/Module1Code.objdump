
Module1Code.elf:     file format elf32-littlenios2
Module1Code.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00005bdc memsz 0x00005bdc flags r-x
    LOAD off    0x00006bfc vaddr 0x01005bfc paddr 0x010076e0 align 2**12
         filesz 0x00001ae4 memsz 0x00001ae4 flags rw-
    LOAD off    0x000091c4 vaddr 0x010091c4 paddr 0x010091c4 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000597c  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000cc  01005b30  01005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae4  01005bfc  010076e0  00006bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  010091c4  010091c4  000091c4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000086e0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000918  00000000  00000000  00008708  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000de4  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019fc4  00000000  00000000  00009e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004f93  00000000  00000000  00023dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cc18  00000000  00000000  00028d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001084  00000000  00000000  00035974  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016d6  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003eee  00000000  00000000  000380ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003bfbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003bff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003e814  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003e817  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003e823  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003e824  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003e825  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003e830  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003e83b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0003e846  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000036  00000000  00000000  0003e851  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0006ff5b  00000000  00000000  0003e887  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
01005b30 l    d  .rodata	00000000 .rodata
01005bfc l    d  .rwdata	00000000 .rwdata
010091c4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
01005bfc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01001b6c l     F .text	00000058 std
01001c78 l     F .text	00000008 __fp_lock
01001c80 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
01002c40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01002ca0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01002da0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01002ec0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01002fa0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010030fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01003328 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010076d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
010035c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
010065ac l     O .rwdata	00001060 jtag_uart_0
0100760c l     O .rwdata	00000048 video_character_buffer_with_dma_0
01007654 l     O .rwdata	00000054 video_pixel_buffer_dma_0
01003950 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01003b90 l     F .text	00000228 altera_avalon_jtag_uart_irq
01003db8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01004984 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01004e3c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01004f78 l     F .text	000000dc alt_file_locked
010051dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01005918 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
01005acc l     F .text	00000040 alt_sim_halt
010029e4 g     F .text	00000070 _isatty_r
0100315c g     F .text	0000006c alt_main
01000234 g     F .text	000000a0 _puts_r
01009214 g     O .bss	00000100 alt_irq
01002a54 g     F .text	00000078 _lseek_r
010076e0 g       *ABS*	00000000 __flash_rwdata_start
010094a4 g       *ABS*	00000000 __alt_heap_start
01002620 g     F .text	00000068 __sseek
01001bd4 g     F .text	000000a4 __sinit
010045c8 g     F .text	00000114 alt_up_char_buffer_string
01001cd4 g     F .text	00000068 __sfmoreglue
010031e8 g     F .text	00000020 __malloc_unlock
010044f8 g     F .text	000000d0 alt_up_char_buffer_draw
010010bc g     F .text	000000e0 memmove
01001cc4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002970 g     F .text	00000074 _fstat_r
010091d0 g     O .bss	00000004 errno
010091d8 g     O .bss	00000004 alt_argv
0100f6a8 g       *ABS*	00000000 _gp
0100642c g     O .rwdata	00000180 alt_fd_list
01004aac g     F .text	00000094 alt_find_dev
0100101c g     F .text	000000a0 memcpy
010046dc g     F .text	0000005c alt_up_char_buffer_clear
01001cb8 g     F .text	0000000c _cleanup_r
01004f00 g     F .text	00000078 alt_io_redirect
01005b30 g       *ABS*	00000000 __DTOR_END__
010002d4 g     F .text	00000014 puts
01003fd0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01002e00 g     F .text	000000c0 isatty
010055d8 g     F .text	00000090 alt_icache_flush
010091c4 g     O .bss	00000004 __malloc_top_pad
0100035c g     F .text	0000049c __sfvwrite_r
01001790 g     F .text	00000070 _sbrk_r
01002acc g     F .text	00000078 _read_r
010076c8 g     O .rwdata	00000004 alt_max_fd
0100284c g     F .text	00000110 _fclose_r
01001b38 g     F .text	00000034 fflush
010091c8 g     O .bss	00000004 __malloc_max_sbrked_mem
0100300c g     F .text	000000f0 lseek
010076ac g     O .rwdata	00000004 _global_impure_ptr
0100119c g     F .text	000005f4 _realloc_r
010094a4 g       *ABS*	00000000 __bss_end
01004d44 g     F .text	000000f8 alt_iic_isr_register
010052d4 g     F .text	0000010c alt_tick
01001ca0 g     F .text	00000018 __fp_lock_all
01004cfc g     F .text	00000048 alt_ic_irq_enabled
0100523c g     F .text	00000098 alt_alarm_stop
010091e0 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
01006404 g     O .rwdata	00000028 alt_dev_null
0100488c g     F .text	00000044 alt_dcache_flush_all
010076e0 g       *ABS*	00000000 __ram_rwdata_end
010076c0 g     O .rwdata	00000008 alt_dev_list
010034a4 g     F .text	00000120 write
01005bfc g       *ABS*	00000000 __ram_rodata_end
01002ccc g     F .text	000000d4 fstat
010094a4 g       *ABS*	00000000 end
01004434 g     F .text	00000084 alt_up_char_buffer_init
01003ad0 g     F .text	000000c0 altera_avalon_jtag_uart_init
01005b2c g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010041f4 g     F .text	00000240 altera_avalon_jtag_uart_write
01001bc4 g     F .text	00000004 __sfp_lock_acquire
01000f38 g     F .text	000000e4 memchr
01001f58 g     F .text	00000314 _free_r
0100591c g     F .text	000001b0 __call_exitprocs
010076b4 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000004c _start
010091e4 g     O .bss	00000004 _alt_tick_rate
010091e8 g     O .bss	00000004 _alt_nticks
01003208 g     F .text	00000120 read
01003658 g     F .text	000002f8 alt_sys_init
010057e4 g     F .text	00000134 __register_exitproc
01003e68 g     F .text	00000074 altera_avalon_jtag_uart_close
01005bfc g       *ABS*	00000000 __ram_rwdata_start
01005b30 g       *ABS*	00000000 __ram_rodata_start
010091ec g     O .bss	00000028 __malloc_current_mallinfo
01003988 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01005520 g     F .text	000000b8 alt_get_fd
010027dc g     F .text	00000070 _close_r
010056b4 g     F .text	00000074 memcmp
01003a38 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
010094a4 g       *ABS*	00000000 __alt_stack_base
01003a80 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01001800 g     F .text	0000013c __swsetup_r
01001d3c g     F .text	000000f0 __sfp
01005ffc g     O .rwdata	00000408 __malloc_av_
01001bd0 g     F .text	00000004 __sinit_lock_release
01002704 g     F .text	00000060 __sread
01005400 g     F .text	00000120 alt_find_file
010048d0 g     F .text	000000b4 alt_dev_llist_insert
010031c8 g     F .text	00000020 __malloc_lock
010033e8 g     F .text	000000bc sbrk
0100193c g     F .text	000001fc _fflush_r
010091c4 g       *ABS*	00000000 __bss_start
01002580 g     F .text	00000098 memset
01000200 g     F .text	00000034 main
010091dc g     O .bss	00000004 alt_envp
010091cc g     O .bss	00000004 __malloc_max_total_mem
010044b8 g     F .text	00000040 alt_up_char_buffer_open_dev
010039e0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01002618 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100295c g     F .text	00000014 fclose
01009314 g     O .bss	00000190 _atexit0
010007f8 g     F .text	00000740 _malloc_r
010076cc g     O .rwdata	00000004 alt_errno
01002334 g     F .text	000000b8 _fwalk
01001e2c g     F .text	0000012c _malloc_trim_r
01005b30 g       *ABS*	00000000 __CTOR_END__
01005728 g     F .text	000000bc strcmp
01005b30 g       *ABS*	00000000 __flash_rodata_start
01005b30 g       *ABS*	00000000 __DTOR_LIST__
01003624 g     F .text	00000034 alt_irq_init
01003388 g     F .text	00000060 alt_release_fd
01005668 g     F .text	00000014 atexit
01002764 g     F .text	00000078 _write_r
010076a8 g     O .rwdata	00000004 _impure_ptr
010091d4 g     O .bss	00000004 alt_argc
01004a48 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01001c88 g     F .text	00000018 __fp_unlock_all
010076b8 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01004b70 g     F .text	00000050 alt_ic_isr_register
010076e0 g       *ABS*	00000000 _edata
010094a4 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
01003edc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01004c5c g     F .text	000000a0 alt_ic_irq_disable
01002688 g     F .text	0000007c __swrite
010076b0 g     O .rwdata	00000004 __malloc_trim_threshold
010053e0 g     F .text	00000020 altera_nios2_qsys_irq_init
0100567c g     F .text	00000038 exit
0100226c g     F .text	000000c8 _fwalk_reent
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01001bc8 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
01005b0c g     F .text	00000020 _exit
01004738 g     F .text	00000154 alt_alarm_start
010023ec g     F .text	00000194 __smakebuf_r
010002e8 g     F .text	00000074 strlen
01005054 g     F .text	00000188 open
01004b40 g     F .text	00000030 alt_icache_flush_all
010076d4 g     O .rwdata	00000004 alt_priority_mask
01004bc0 g     F .text	0000009c alt_ic_irq_enable
010076d8 g     O .rwdata	00000008 alt_alarm_list
010049e4 g     F .text	00000064 _do_ctors
01002b44 g     F .text	000000fc close
01002f20 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
01001bcc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406d14 	ori	at,at,436
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18e48504 	addi	r3,r3,-28140
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18e48504 	addi	r3,r3,-28140
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c0:	00bffd16 	blt	zero,r2,10001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001cc:	06804034 	movhi	gp,256
    ori gp, gp, %lo(_gp)
 10001d0:	d6bdaa14 	ori	gp,gp,63144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d4:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001d8:	10a47114 	ori	r2,r2,37316

    movhi r3, %hi(__bss_end)
 10001dc:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001e0:	18e52914 	ori	r3,r3,38052

    beq r2, r3, 1f
 10001e4:	10c00326 	beq	r2,r3,10001f4 <_start+0x40>

0:
    stw zero, (r2)
 10001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f0:	10fffd36 	bltu	r2,r3,10001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f4:	1002f200 	call	1002f20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001f8:	100315c0 	call	100315c <alt_main>

010001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001fc:	003fff06 	br	10001fc <alt_after_alt_main>

01000200 <main>:
 */

#include <stdio.h>

int main()
{
 1000200:	defffe04 	addi	sp,sp,-8
 1000204:	dfc00115 	stw	ra,4(sp)
 1000208:	df000015 	stw	fp,0(sp)
 100020c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 1000210:	01004034 	movhi	r4,256
 1000214:	2116cc04 	addi	r4,r4,23344
 1000218:	10002d40 	call	10002d4 <puts>

  return 0;
 100021c:	0005883a 	mov	r2,zero
}
 1000220:	e037883a 	mov	sp,fp
 1000224:	dfc00117 	ldw	ra,4(sp)
 1000228:	df000017 	ldw	fp,0(sp)
 100022c:	dec00204 	addi	sp,sp,8
 1000230:	f800283a 	ret

01000234 <_puts_r>:
 1000234:	defff604 	addi	sp,sp,-40
 1000238:	dc400715 	stw	r17,28(sp)
 100023c:	2023883a 	mov	r17,r4
 1000240:	2809883a 	mov	r4,r5
 1000244:	dfc00915 	stw	ra,36(sp)
 1000248:	dcc00815 	stw	r19,32(sp)
 100024c:	2827883a 	mov	r19,r5
 1000250:	10002e80 	call	10002e8 <strlen>
 1000254:	89400217 	ldw	r5,8(r17)
 1000258:	00c04034 	movhi	r3,256
 100025c:	18d6d104 	addi	r3,r3,23364
 1000260:	01c00044 	movi	r7,1
 1000264:	12000044 	addi	r8,r2,1
 1000268:	d8c00515 	stw	r3,20(sp)
 100026c:	d9c00615 	stw	r7,24(sp)
 1000270:	d8c00304 	addi	r3,sp,12
 1000274:	01c00084 	movi	r7,2
 1000278:	8809883a 	mov	r4,r17
 100027c:	d80d883a 	mov	r6,sp
 1000280:	d8c00015 	stw	r3,0(sp)
 1000284:	dcc00315 	stw	r19,12(sp)
 1000288:	da000215 	stw	r8,8(sp)
 100028c:	d9c00115 	stw	r7,4(sp)
 1000290:	d8800415 	stw	r2,16(sp)
 1000294:	100035c0 	call	100035c <__sfvwrite_r>
 1000298:	00ffffc4 	movi	r3,-1
 100029c:	10000626 	beq	r2,zero,10002b8 <_puts_r+0x84>
 10002a0:	1805883a 	mov	r2,r3
 10002a4:	dfc00917 	ldw	ra,36(sp)
 10002a8:	dcc00817 	ldw	r19,32(sp)
 10002ac:	dc400717 	ldw	r17,28(sp)
 10002b0:	dec00a04 	addi	sp,sp,40
 10002b4:	f800283a 	ret
 10002b8:	00c00284 	movi	r3,10
 10002bc:	1805883a 	mov	r2,r3
 10002c0:	dfc00917 	ldw	ra,36(sp)
 10002c4:	dcc00817 	ldw	r19,32(sp)
 10002c8:	dc400717 	ldw	r17,28(sp)
 10002cc:	dec00a04 	addi	sp,sp,40
 10002d0:	f800283a 	ret

010002d4 <puts>:
 10002d4:	00804034 	movhi	r2,256
 10002d8:	109daa04 	addi	r2,r2,30376
 10002dc:	200b883a 	mov	r5,r4
 10002e0:	11000017 	ldw	r4,0(r2)
 10002e4:	10002341 	jmpi	1000234 <_puts_r>

010002e8 <strlen>:
 10002e8:	208000cc 	andi	r2,r4,3
 10002ec:	2011883a 	mov	r8,r4
 10002f0:	1000161e 	bne	r2,zero,100034c <strlen+0x64>
 10002f4:	20c00017 	ldw	r3,0(r4)
 10002f8:	017fbff4 	movhi	r5,65279
 10002fc:	297fbfc4 	addi	r5,r5,-257
 1000300:	01e02074 	movhi	r7,32897
 1000304:	39e02004 	addi	r7,r7,-32640
 1000308:	1945883a 	add	r2,r3,r5
 100030c:	11c4703a 	and	r2,r2,r7
 1000310:	00c6303a 	nor	r3,zero,r3
 1000314:	1886703a 	and	r3,r3,r2
 1000318:	18000c1e 	bne	r3,zero,100034c <strlen+0x64>
 100031c:	280d883a 	mov	r6,r5
 1000320:	380b883a 	mov	r5,r7
 1000324:	21000104 	addi	r4,r4,4
 1000328:	20800017 	ldw	r2,0(r4)
 100032c:	1187883a 	add	r3,r2,r6
 1000330:	1946703a 	and	r3,r3,r5
 1000334:	0084303a 	nor	r2,zero,r2
 1000338:	10c4703a 	and	r2,r2,r3
 100033c:	103ff926 	beq	r2,zero,1000324 <strlen+0x3c>
 1000340:	20800007 	ldb	r2,0(r4)
 1000344:	10000326 	beq	r2,zero,1000354 <strlen+0x6c>
 1000348:	21000044 	addi	r4,r4,1
 100034c:	20800007 	ldb	r2,0(r4)
 1000350:	103ffd1e 	bne	r2,zero,1000348 <strlen+0x60>
 1000354:	2205c83a 	sub	r2,r4,r8
 1000358:	f800283a 	ret

0100035c <__sfvwrite_r>:
 100035c:	30800217 	ldw	r2,8(r6)
 1000360:	defff504 	addi	sp,sp,-44
 1000364:	df000915 	stw	fp,36(sp)
 1000368:	dd800715 	stw	r22,28(sp)
 100036c:	dc800315 	stw	r18,12(sp)
 1000370:	dfc00a15 	stw	ra,40(sp)
 1000374:	ddc00815 	stw	r23,32(sp)
 1000378:	dd400615 	stw	r21,24(sp)
 100037c:	dd000515 	stw	r20,20(sp)
 1000380:	dcc00415 	stw	r19,16(sp)
 1000384:	dc400215 	stw	r17,8(sp)
 1000388:	dc000115 	stw	r16,4(sp)
 100038c:	302d883a 	mov	r22,r6
 1000390:	2039883a 	mov	fp,r4
 1000394:	2825883a 	mov	r18,r5
 1000398:	10001c26 	beq	r2,zero,100040c <__sfvwrite_r+0xb0>
 100039c:	29c0030b 	ldhu	r7,12(r5)
 10003a0:	3880020c 	andi	r2,r7,8
 10003a4:	10002726 	beq	r2,zero,1000444 <__sfvwrite_r+0xe8>
 10003a8:	28800417 	ldw	r2,16(r5)
 10003ac:	10002526 	beq	r2,zero,1000444 <__sfvwrite_r+0xe8>
 10003b0:	3880008c 	andi	r2,r7,2
 10003b4:	b5400017 	ldw	r21,0(r22)
 10003b8:	10002826 	beq	r2,zero,100045c <__sfvwrite_r+0x100>
 10003bc:	0021883a 	mov	r16,zero
 10003c0:	0023883a 	mov	r17,zero
 10003c4:	880d883a 	mov	r6,r17
 10003c8:	e009883a 	mov	r4,fp
 10003cc:	00810004 	movi	r2,1024
 10003d0:	80006e26 	beq	r16,zero,100058c <__sfvwrite_r+0x230>
 10003d4:	800f883a 	mov	r7,r16
 10003d8:	91400717 	ldw	r5,28(r18)
 10003dc:	1400012e 	bgeu	r2,r16,10003e4 <__sfvwrite_r+0x88>
 10003e0:	100f883a 	mov	r7,r2
 10003e4:	90c00917 	ldw	r3,36(r18)
 10003e8:	183ee83a 	callr	r3
 10003ec:	1007883a 	mov	r3,r2
 10003f0:	80a1c83a 	sub	r16,r16,r2
 10003f4:	88a3883a 	add	r17,r17,r2
 10003f8:	00806d0e 	bge	zero,r2,10005b0 <__sfvwrite_r+0x254>
 10003fc:	b0800217 	ldw	r2,8(r22)
 1000400:	10c5c83a 	sub	r2,r2,r3
 1000404:	b0800215 	stw	r2,8(r22)
 1000408:	103fee1e 	bne	r2,zero,10003c4 <__sfvwrite_r+0x68>
 100040c:	0009883a 	mov	r4,zero
 1000410:	2005883a 	mov	r2,r4
 1000414:	dfc00a17 	ldw	ra,40(sp)
 1000418:	df000917 	ldw	fp,36(sp)
 100041c:	ddc00817 	ldw	r23,32(sp)
 1000420:	dd800717 	ldw	r22,28(sp)
 1000424:	dd400617 	ldw	r21,24(sp)
 1000428:	dd000517 	ldw	r20,20(sp)
 100042c:	dcc00417 	ldw	r19,16(sp)
 1000430:	dc800317 	ldw	r18,12(sp)
 1000434:	dc400217 	ldw	r17,8(sp)
 1000438:	dc000117 	ldw	r16,4(sp)
 100043c:	dec00b04 	addi	sp,sp,44
 1000440:	f800283a 	ret
 1000444:	10018000 	call	1001800 <__swsetup_r>
 1000448:	1000e41e 	bne	r2,zero,10007dc <__sfvwrite_r+0x480>
 100044c:	91c0030b 	ldhu	r7,12(r18)
 1000450:	b5400017 	ldw	r21,0(r22)
 1000454:	3880008c 	andi	r2,r7,2
 1000458:	103fd81e 	bne	r2,zero,10003bc <__sfvwrite_r+0x60>
 100045c:	3880004c 	andi	r2,r7,1
 1000460:	1005003a 	cmpeq	r2,r2,zero
 1000464:	10005726 	beq	r2,zero,10005c4 <__sfvwrite_r+0x268>
 1000468:	0029883a 	mov	r20,zero
 100046c:	002f883a 	mov	r23,zero
 1000470:	a0004226 	beq	r20,zero,100057c <__sfvwrite_r+0x220>
 1000474:	3880800c 	andi	r2,r7,512
 1000478:	94000217 	ldw	r16,8(r18)
 100047c:	10008b26 	beq	r2,zero,10006ac <__sfvwrite_r+0x350>
 1000480:	800d883a 	mov	r6,r16
 1000484:	a400a536 	bltu	r20,r16,100071c <__sfvwrite_r+0x3c0>
 1000488:	3881200c 	andi	r2,r7,1152
 100048c:	10002726 	beq	r2,zero,100052c <__sfvwrite_r+0x1d0>
 1000490:	90800517 	ldw	r2,20(r18)
 1000494:	92000417 	ldw	r8,16(r18)
 1000498:	91400017 	ldw	r5,0(r18)
 100049c:	1087883a 	add	r3,r2,r2
 10004a0:	1887883a 	add	r3,r3,r2
 10004a4:	1808d7fa 	srli	r4,r3,31
 10004a8:	2a21c83a 	sub	r16,r5,r8
 10004ac:	80800044 	addi	r2,r16,1
 10004b0:	20c9883a 	add	r4,r4,r3
 10004b4:	2027d07a 	srai	r19,r4,1
 10004b8:	a085883a 	add	r2,r20,r2
 10004bc:	980d883a 	mov	r6,r19
 10004c0:	9880022e 	bgeu	r19,r2,10004cc <__sfvwrite_r+0x170>
 10004c4:	1027883a 	mov	r19,r2
 10004c8:	100d883a 	mov	r6,r2
 10004cc:	3881000c 	andi	r2,r7,1024
 10004d0:	1000b826 	beq	r2,zero,10007b4 <__sfvwrite_r+0x458>
 10004d4:	300b883a 	mov	r5,r6
 10004d8:	e009883a 	mov	r4,fp
 10004dc:	10007f80 	call	10007f8 <_malloc_r>
 10004e0:	10003126 	beq	r2,zero,10005a8 <__sfvwrite_r+0x24c>
 10004e4:	91400417 	ldw	r5,16(r18)
 10004e8:	1009883a 	mov	r4,r2
 10004ec:	800d883a 	mov	r6,r16
 10004f0:	1023883a 	mov	r17,r2
 10004f4:	100101c0 	call	100101c <memcpy>
 10004f8:	90c0030b 	ldhu	r3,12(r18)
 10004fc:	00beffc4 	movi	r2,-1025
 1000500:	1886703a 	and	r3,r3,r2
 1000504:	18c02014 	ori	r3,r3,128
 1000508:	90c0030d 	sth	r3,12(r18)
 100050c:	9c07c83a 	sub	r3,r19,r16
 1000510:	8c05883a 	add	r2,r17,r16
 1000514:	a00d883a 	mov	r6,r20
 1000518:	a021883a 	mov	r16,r20
 100051c:	90800015 	stw	r2,0(r18)
 1000520:	90c00215 	stw	r3,8(r18)
 1000524:	94400415 	stw	r17,16(r18)
 1000528:	94c00515 	stw	r19,20(r18)
 100052c:	91000017 	ldw	r4,0(r18)
 1000530:	b80b883a 	mov	r5,r23
 1000534:	a023883a 	mov	r17,r20
 1000538:	10010bc0 	call	10010bc <memmove>
 100053c:	90c00217 	ldw	r3,8(r18)
 1000540:	90800017 	ldw	r2,0(r18)
 1000544:	a027883a 	mov	r19,r20
 1000548:	1c07c83a 	sub	r3,r3,r16
 100054c:	1405883a 	add	r2,r2,r16
 1000550:	90c00215 	stw	r3,8(r18)
 1000554:	a021883a 	mov	r16,r20
 1000558:	90800015 	stw	r2,0(r18)
 100055c:	b0800217 	ldw	r2,8(r22)
 1000560:	1405c83a 	sub	r2,r2,r16
 1000564:	b0800215 	stw	r2,8(r22)
 1000568:	103fa826 	beq	r2,zero,100040c <__sfvwrite_r+0xb0>
 100056c:	a469c83a 	sub	r20,r20,r17
 1000570:	91c0030b 	ldhu	r7,12(r18)
 1000574:	bcef883a 	add	r23,r23,r19
 1000578:	a03fbe1e 	bne	r20,zero,1000474 <__sfvwrite_r+0x118>
 100057c:	adc00017 	ldw	r23,0(r21)
 1000580:	ad000117 	ldw	r20,4(r21)
 1000584:	ad400204 	addi	r21,r21,8
 1000588:	003fb906 	br	1000470 <__sfvwrite_r+0x114>
 100058c:	ac400017 	ldw	r17,0(r21)
 1000590:	ac000117 	ldw	r16,4(r21)
 1000594:	ad400204 	addi	r21,r21,8
 1000598:	003f8a06 	br	10003c4 <__sfvwrite_r+0x68>
 100059c:	91400417 	ldw	r5,16(r18)
 10005a0:	e009883a 	mov	r4,fp
 10005a4:	1001f580 	call	1001f58 <_free_r>
 10005a8:	00800304 	movi	r2,12
 10005ac:	e0800015 	stw	r2,0(fp)
 10005b0:	9080030b 	ldhu	r2,12(r18)
 10005b4:	013fffc4 	movi	r4,-1
 10005b8:	10801014 	ori	r2,r2,64
 10005bc:	9080030d 	sth	r2,12(r18)
 10005c0:	003f9306 	br	1000410 <__sfvwrite_r+0xb4>
 10005c4:	0027883a 	mov	r19,zero
 10005c8:	002f883a 	mov	r23,zero
 10005cc:	d8000015 	stw	zero,0(sp)
 10005d0:	0029883a 	mov	r20,zero
 10005d4:	98001e26 	beq	r19,zero,1000650 <__sfvwrite_r+0x2f4>
 10005d8:	d8c00017 	ldw	r3,0(sp)
 10005dc:	1804c03a 	cmpne	r2,r3,zero
 10005e0:	10005e26 	beq	r2,zero,100075c <__sfvwrite_r+0x400>
 10005e4:	9821883a 	mov	r16,r19
 10005e8:	a4c0012e 	bgeu	r20,r19,10005f0 <__sfvwrite_r+0x294>
 10005ec:	a021883a 	mov	r16,r20
 10005f0:	91000017 	ldw	r4,0(r18)
 10005f4:	90800417 	ldw	r2,16(r18)
 10005f8:	91800217 	ldw	r6,8(r18)
 10005fc:	91c00517 	ldw	r7,20(r18)
 1000600:	1100022e 	bgeu	r2,r4,100060c <__sfvwrite_r+0x2b0>
 1000604:	31e3883a 	add	r17,r6,r7
 1000608:	8c001616 	blt	r17,r16,1000664 <__sfvwrite_r+0x308>
 100060c:	81c03816 	blt	r16,r7,10006f0 <__sfvwrite_r+0x394>
 1000610:	90c00917 	ldw	r3,36(r18)
 1000614:	91400717 	ldw	r5,28(r18)
 1000618:	e009883a 	mov	r4,fp
 100061c:	b80d883a 	mov	r6,r23
 1000620:	183ee83a 	callr	r3
 1000624:	1023883a 	mov	r17,r2
 1000628:	00bfe10e 	bge	zero,r2,10005b0 <__sfvwrite_r+0x254>
 100062c:	a469c83a 	sub	r20,r20,r17
 1000630:	a0001826 	beq	r20,zero,1000694 <__sfvwrite_r+0x338>
 1000634:	b0800217 	ldw	r2,8(r22)
 1000638:	1445c83a 	sub	r2,r2,r17
 100063c:	b0800215 	stw	r2,8(r22)
 1000640:	103f7226 	beq	r2,zero,100040c <__sfvwrite_r+0xb0>
 1000644:	9c67c83a 	sub	r19,r19,r17
 1000648:	bc6f883a 	add	r23,r23,r17
 100064c:	983fe21e 	bne	r19,zero,10005d8 <__sfvwrite_r+0x27c>
 1000650:	adc00017 	ldw	r23,0(r21)
 1000654:	acc00117 	ldw	r19,4(r21)
 1000658:	ad400204 	addi	r21,r21,8
 100065c:	d8000015 	stw	zero,0(sp)
 1000660:	003fdc06 	br	10005d4 <__sfvwrite_r+0x278>
 1000664:	b80b883a 	mov	r5,r23
 1000668:	880d883a 	mov	r6,r17
 100066c:	10010bc0 	call	10010bc <memmove>
 1000670:	90c00017 	ldw	r3,0(r18)
 1000674:	e009883a 	mov	r4,fp
 1000678:	900b883a 	mov	r5,r18
 100067c:	1c47883a 	add	r3,r3,r17
 1000680:	90c00015 	stw	r3,0(r18)
 1000684:	100193c0 	call	100193c <_fflush_r>
 1000688:	103fc91e 	bne	r2,zero,10005b0 <__sfvwrite_r+0x254>
 100068c:	a469c83a 	sub	r20,r20,r17
 1000690:	a03fe81e 	bne	r20,zero,1000634 <__sfvwrite_r+0x2d8>
 1000694:	e009883a 	mov	r4,fp
 1000698:	900b883a 	mov	r5,r18
 100069c:	100193c0 	call	100193c <_fflush_r>
 10006a0:	103fc31e 	bne	r2,zero,10005b0 <__sfvwrite_r+0x254>
 10006a4:	d8000015 	stw	zero,0(sp)
 10006a8:	003fe206 	br	1000634 <__sfvwrite_r+0x2d8>
 10006ac:	91000017 	ldw	r4,0(r18)
 10006b0:	90800417 	ldw	r2,16(r18)
 10006b4:	1100022e 	bgeu	r2,r4,10006c0 <__sfvwrite_r+0x364>
 10006b8:	8023883a 	mov	r17,r16
 10006bc:	85003136 	bltu	r16,r20,1000784 <__sfvwrite_r+0x428>
 10006c0:	91c00517 	ldw	r7,20(r18)
 10006c4:	a1c01836 	bltu	r20,r7,1000728 <__sfvwrite_r+0x3cc>
 10006c8:	90c00917 	ldw	r3,36(r18)
 10006cc:	91400717 	ldw	r5,28(r18)
 10006d0:	e009883a 	mov	r4,fp
 10006d4:	b80d883a 	mov	r6,r23
 10006d8:	183ee83a 	callr	r3
 10006dc:	1021883a 	mov	r16,r2
 10006e0:	00bfb30e 	bge	zero,r2,10005b0 <__sfvwrite_r+0x254>
 10006e4:	1023883a 	mov	r17,r2
 10006e8:	1027883a 	mov	r19,r2
 10006ec:	003f9b06 	br	100055c <__sfvwrite_r+0x200>
 10006f0:	b80b883a 	mov	r5,r23
 10006f4:	800d883a 	mov	r6,r16
 10006f8:	10010bc0 	call	10010bc <memmove>
 10006fc:	90c00217 	ldw	r3,8(r18)
 1000700:	90800017 	ldw	r2,0(r18)
 1000704:	8023883a 	mov	r17,r16
 1000708:	1c07c83a 	sub	r3,r3,r16
 100070c:	1405883a 	add	r2,r2,r16
 1000710:	90c00215 	stw	r3,8(r18)
 1000714:	90800015 	stw	r2,0(r18)
 1000718:	003fc406 	br	100062c <__sfvwrite_r+0x2d0>
 100071c:	a00d883a 	mov	r6,r20
 1000720:	a021883a 	mov	r16,r20
 1000724:	003f8106 	br	100052c <__sfvwrite_r+0x1d0>
 1000728:	b80b883a 	mov	r5,r23
 100072c:	a00d883a 	mov	r6,r20
 1000730:	10010bc0 	call	10010bc <memmove>
 1000734:	90c00217 	ldw	r3,8(r18)
 1000738:	90800017 	ldw	r2,0(r18)
 100073c:	a021883a 	mov	r16,r20
 1000740:	1d07c83a 	sub	r3,r3,r20
 1000744:	1505883a 	add	r2,r2,r20
 1000748:	a023883a 	mov	r17,r20
 100074c:	a027883a 	mov	r19,r20
 1000750:	90c00215 	stw	r3,8(r18)
 1000754:	90800015 	stw	r2,0(r18)
 1000758:	003f8006 	br	100055c <__sfvwrite_r+0x200>
 100075c:	b809883a 	mov	r4,r23
 1000760:	01400284 	movi	r5,10
 1000764:	980d883a 	mov	r6,r19
 1000768:	1000f380 	call	1000f38 <memchr>
 100076c:	10001726 	beq	r2,zero,10007cc <__sfvwrite_r+0x470>
 1000770:	15c5c83a 	sub	r2,r2,r23
 1000774:	15000044 	addi	r20,r2,1
 1000778:	00800044 	movi	r2,1
 100077c:	d8800015 	stw	r2,0(sp)
 1000780:	003f9806 	br	10005e4 <__sfvwrite_r+0x288>
 1000784:	b80b883a 	mov	r5,r23
 1000788:	800d883a 	mov	r6,r16
 100078c:	10010bc0 	call	10010bc <memmove>
 1000790:	90c00017 	ldw	r3,0(r18)
 1000794:	e009883a 	mov	r4,fp
 1000798:	900b883a 	mov	r5,r18
 100079c:	1c07883a 	add	r3,r3,r16
 10007a0:	90c00015 	stw	r3,0(r18)
 10007a4:	8027883a 	mov	r19,r16
 10007a8:	100193c0 	call	100193c <_fflush_r>
 10007ac:	103f6b26 	beq	r2,zero,100055c <__sfvwrite_r+0x200>
 10007b0:	003f7f06 	br	10005b0 <__sfvwrite_r+0x254>
 10007b4:	400b883a 	mov	r5,r8
 10007b8:	e009883a 	mov	r4,fp
 10007bc:	100119c0 	call	100119c <_realloc_r>
 10007c0:	103f7626 	beq	r2,zero,100059c <__sfvwrite_r+0x240>
 10007c4:	1023883a 	mov	r17,r2
 10007c8:	003f5006 	br	100050c <__sfvwrite_r+0x1b0>
 10007cc:	00c00044 	movi	r3,1
 10007d0:	9d000044 	addi	r20,r19,1
 10007d4:	d8c00015 	stw	r3,0(sp)
 10007d8:	003f8206 	br	10005e4 <__sfvwrite_r+0x288>
 10007dc:	9080030b 	ldhu	r2,12(r18)
 10007e0:	00c00244 	movi	r3,9
 10007e4:	013fffc4 	movi	r4,-1
 10007e8:	10801014 	ori	r2,r2,64
 10007ec:	9080030d 	sth	r2,12(r18)
 10007f0:	e0c00015 	stw	r3,0(fp)
 10007f4:	003f0606 	br	1000410 <__sfvwrite_r+0xb4>

010007f8 <_malloc_r>:
 10007f8:	defff604 	addi	sp,sp,-40
 10007fc:	28c002c4 	addi	r3,r5,11
 1000800:	00800584 	movi	r2,22
 1000804:	dc800215 	stw	r18,8(sp)
 1000808:	dfc00915 	stw	ra,36(sp)
 100080c:	df000815 	stw	fp,32(sp)
 1000810:	ddc00715 	stw	r23,28(sp)
 1000814:	dd800615 	stw	r22,24(sp)
 1000818:	dd400515 	stw	r21,20(sp)
 100081c:	dd000415 	stw	r20,16(sp)
 1000820:	dcc00315 	stw	r19,12(sp)
 1000824:	dc400115 	stw	r17,4(sp)
 1000828:	dc000015 	stw	r16,0(sp)
 100082c:	2025883a 	mov	r18,r4
 1000830:	10c01236 	bltu	r2,r3,100087c <_malloc_r+0x84>
 1000834:	04400404 	movi	r17,16
 1000838:	8940142e 	bgeu	r17,r5,100088c <_malloc_r+0x94>
 100083c:	00800304 	movi	r2,12
 1000840:	0007883a 	mov	r3,zero
 1000844:	90800015 	stw	r2,0(r18)
 1000848:	1805883a 	mov	r2,r3
 100084c:	dfc00917 	ldw	ra,36(sp)
 1000850:	df000817 	ldw	fp,32(sp)
 1000854:	ddc00717 	ldw	r23,28(sp)
 1000858:	dd800617 	ldw	r22,24(sp)
 100085c:	dd400517 	ldw	r21,20(sp)
 1000860:	dd000417 	ldw	r20,16(sp)
 1000864:	dcc00317 	ldw	r19,12(sp)
 1000868:	dc800217 	ldw	r18,8(sp)
 100086c:	dc400117 	ldw	r17,4(sp)
 1000870:	dc000017 	ldw	r16,0(sp)
 1000874:	dec00a04 	addi	sp,sp,40
 1000878:	f800283a 	ret
 100087c:	00bffe04 	movi	r2,-8
 1000880:	18a2703a 	and	r17,r3,r2
 1000884:	883fed16 	blt	r17,zero,100083c <_malloc_r+0x44>
 1000888:	897fec36 	bltu	r17,r5,100083c <_malloc_r+0x44>
 100088c:	9009883a 	mov	r4,r18
 1000890:	10031c80 	call	10031c8 <__malloc_lock>
 1000894:	00807dc4 	movi	r2,503
 1000898:	14402b2e 	bgeu	r2,r17,1000948 <_malloc_r+0x150>
 100089c:	8806d27a 	srli	r3,r17,9
 10008a0:	18003f1e 	bne	r3,zero,10009a0 <_malloc_r+0x1a8>
 10008a4:	880cd0fa 	srli	r6,r17,3
 10008a8:	300490fa 	slli	r2,r6,3
 10008ac:	02c04034 	movhi	r11,256
 10008b0:	5ad7ff04 	addi	r11,r11,24572
 10008b4:	12cb883a 	add	r5,r2,r11
 10008b8:	2c000317 	ldw	r16,12(r5)
 10008bc:	580f883a 	mov	r7,r11
 10008c0:	2c00041e 	bne	r5,r16,10008d4 <_malloc_r+0xdc>
 10008c4:	00000a06 	br	10008f0 <_malloc_r+0xf8>
 10008c8:	1800860e 	bge	r3,zero,1000ae4 <_malloc_r+0x2ec>
 10008cc:	84000317 	ldw	r16,12(r16)
 10008d0:	2c000726 	beq	r5,r16,10008f0 <_malloc_r+0xf8>
 10008d4:	80800117 	ldw	r2,4(r16)
 10008d8:	00ffff04 	movi	r3,-4
 10008dc:	10c8703a 	and	r4,r2,r3
 10008e0:	2447c83a 	sub	r3,r4,r17
 10008e4:	008003c4 	movi	r2,15
 10008e8:	10fff70e 	bge	r2,r3,10008c8 <_malloc_r+0xd0>
 10008ec:	31bfffc4 	addi	r6,r6,-1
 10008f0:	32400044 	addi	r9,r6,1
 10008f4:	02804034 	movhi	r10,256
 10008f8:	52980104 	addi	r10,r10,24580
 10008fc:	54000217 	ldw	r16,8(r10)
 1000900:	8280a026 	beq	r16,r10,1000b84 <_malloc_r+0x38c>
 1000904:	80800117 	ldw	r2,4(r16)
 1000908:	00ffff04 	movi	r3,-4
 100090c:	10ca703a 	and	r5,r2,r3
 1000910:	2c4dc83a 	sub	r6,r5,r17
 1000914:	008003c4 	movi	r2,15
 1000918:	11808316 	blt	r2,r6,1000b28 <_malloc_r+0x330>
 100091c:	52800315 	stw	r10,12(r10)
 1000920:	52800215 	stw	r10,8(r10)
 1000924:	30002916 	blt	r6,zero,10009cc <_malloc_r+0x1d4>
 1000928:	8147883a 	add	r3,r16,r5
 100092c:	18800117 	ldw	r2,4(r3)
 1000930:	9009883a 	mov	r4,r18
 1000934:	10800054 	ori	r2,r2,1
 1000938:	18800115 	stw	r2,4(r3)
 100093c:	10031e80 	call	10031e8 <__malloc_unlock>
 1000940:	80c00204 	addi	r3,r16,8
 1000944:	003fc006 	br	1000848 <_malloc_r+0x50>
 1000948:	02c04034 	movhi	r11,256
 100094c:	5ad7ff04 	addi	r11,r11,24572
 1000950:	8ac5883a 	add	r2,r17,r11
 1000954:	14000317 	ldw	r16,12(r2)
 1000958:	580f883a 	mov	r7,r11
 100095c:	8806d0fa 	srli	r3,r17,3
 1000960:	14006c26 	beq	r2,r16,1000b14 <_malloc_r+0x31c>
 1000964:	80c00117 	ldw	r3,4(r16)
 1000968:	00bfff04 	movi	r2,-4
 100096c:	81800317 	ldw	r6,12(r16)
 1000970:	1886703a 	and	r3,r3,r2
 1000974:	80c7883a 	add	r3,r16,r3
 1000978:	18800117 	ldw	r2,4(r3)
 100097c:	81400217 	ldw	r5,8(r16)
 1000980:	9009883a 	mov	r4,r18
 1000984:	10800054 	ori	r2,r2,1
 1000988:	18800115 	stw	r2,4(r3)
 100098c:	31400215 	stw	r5,8(r6)
 1000990:	29800315 	stw	r6,12(r5)
 1000994:	10031e80 	call	10031e8 <__malloc_unlock>
 1000998:	80c00204 	addi	r3,r16,8
 100099c:	003faa06 	br	1000848 <_malloc_r+0x50>
 10009a0:	00800104 	movi	r2,4
 10009a4:	10c0052e 	bgeu	r2,r3,10009bc <_malloc_r+0x1c4>
 10009a8:	00800504 	movi	r2,20
 10009ac:	10c07836 	bltu	r2,r3,1000b90 <_malloc_r+0x398>
 10009b0:	198016c4 	addi	r6,r3,91
 10009b4:	300490fa 	slli	r2,r6,3
 10009b8:	003fbc06 	br	10008ac <_malloc_r+0xb4>
 10009bc:	8804d1ba 	srli	r2,r17,6
 10009c0:	11800e04 	addi	r6,r2,56
 10009c4:	300490fa 	slli	r2,r6,3
 10009c8:	003fb806 	br	10008ac <_malloc_r+0xb4>
 10009cc:	00807fc4 	movi	r2,511
 10009d0:	1140bb36 	bltu	r2,r5,1000cc0 <_malloc_r+0x4c8>
 10009d4:	2806d0fa 	srli	r3,r5,3
 10009d8:	573ffe04 	addi	fp,r10,-8
 10009dc:	00800044 	movi	r2,1
 10009e0:	180890fa 	slli	r4,r3,3
 10009e4:	1807d0ba 	srai	r3,r3,2
 10009e8:	e1c00117 	ldw	r7,4(fp)
 10009ec:	5909883a 	add	r4,r11,r4
 10009f0:	21400217 	ldw	r5,8(r4)
 10009f4:	10c4983a 	sll	r2,r2,r3
 10009f8:	81000315 	stw	r4,12(r16)
 10009fc:	81400215 	stw	r5,8(r16)
 1000a00:	388eb03a 	or	r7,r7,r2
 1000a04:	2c000315 	stw	r16,12(r5)
 1000a08:	24000215 	stw	r16,8(r4)
 1000a0c:	e1c00115 	stw	r7,4(fp)
 1000a10:	4807883a 	mov	r3,r9
 1000a14:	4800cd16 	blt	r9,zero,1000d4c <_malloc_r+0x554>
 1000a18:	1807d0ba 	srai	r3,r3,2
 1000a1c:	00800044 	movi	r2,1
 1000a20:	10c8983a 	sll	r4,r2,r3
 1000a24:	39004436 	bltu	r7,r4,1000b38 <_malloc_r+0x340>
 1000a28:	21c4703a 	and	r2,r4,r7
 1000a2c:	10000a1e 	bne	r2,zero,1000a58 <_malloc_r+0x260>
 1000a30:	2109883a 	add	r4,r4,r4
 1000a34:	00bfff04 	movi	r2,-4
 1000a38:	4884703a 	and	r2,r9,r2
 1000a3c:	3906703a 	and	r3,r7,r4
 1000a40:	12400104 	addi	r9,r2,4
 1000a44:	1800041e 	bne	r3,zero,1000a58 <_malloc_r+0x260>
 1000a48:	2109883a 	add	r4,r4,r4
 1000a4c:	3904703a 	and	r2,r7,r4
 1000a50:	4a400104 	addi	r9,r9,4
 1000a54:	103ffc26 	beq	r2,zero,1000a48 <_malloc_r+0x250>
 1000a58:	480490fa 	slli	r2,r9,3
 1000a5c:	4819883a 	mov	r12,r9
 1000a60:	023fff04 	movi	r8,-4
 1000a64:	589b883a 	add	r13,r11,r2
 1000a68:	6807883a 	mov	r3,r13
 1000a6c:	014003c4 	movi	r5,15
 1000a70:	1c000317 	ldw	r16,12(r3)
 1000a74:	1c00041e 	bne	r3,r16,1000a88 <_malloc_r+0x290>
 1000a78:	0000a706 	br	1000d18 <_malloc_r+0x520>
 1000a7c:	3000ab0e 	bge	r6,zero,1000d2c <_malloc_r+0x534>
 1000a80:	84000317 	ldw	r16,12(r16)
 1000a84:	1c00a426 	beq	r3,r16,1000d18 <_malloc_r+0x520>
 1000a88:	80800117 	ldw	r2,4(r16)
 1000a8c:	1204703a 	and	r2,r2,r8
 1000a90:	144dc83a 	sub	r6,r2,r17
 1000a94:	29bff90e 	bge	r5,r6,1000a7c <_malloc_r+0x284>
 1000a98:	81000317 	ldw	r4,12(r16)
 1000a9c:	80c00217 	ldw	r3,8(r16)
 1000aa0:	89400054 	ori	r5,r17,1
 1000aa4:	8445883a 	add	r2,r16,r17
 1000aa8:	20c00215 	stw	r3,8(r4)
 1000aac:	19000315 	stw	r4,12(r3)
 1000ab0:	81400115 	stw	r5,4(r16)
 1000ab4:	1187883a 	add	r3,r2,r6
 1000ab8:	31000054 	ori	r4,r6,1
 1000abc:	50800315 	stw	r2,12(r10)
 1000ac0:	50800215 	stw	r2,8(r10)
 1000ac4:	19800015 	stw	r6,0(r3)
 1000ac8:	11000115 	stw	r4,4(r2)
 1000acc:	12800215 	stw	r10,8(r2)
 1000ad0:	12800315 	stw	r10,12(r2)
 1000ad4:	9009883a 	mov	r4,r18
 1000ad8:	10031e80 	call	10031e8 <__malloc_unlock>
 1000adc:	80c00204 	addi	r3,r16,8
 1000ae0:	003f5906 	br	1000848 <_malloc_r+0x50>
 1000ae4:	8109883a 	add	r4,r16,r4
 1000ae8:	20800117 	ldw	r2,4(r4)
 1000aec:	80c00217 	ldw	r3,8(r16)
 1000af0:	81400317 	ldw	r5,12(r16)
 1000af4:	10800054 	ori	r2,r2,1
 1000af8:	20800115 	stw	r2,4(r4)
 1000afc:	28c00215 	stw	r3,8(r5)
 1000b00:	19400315 	stw	r5,12(r3)
 1000b04:	9009883a 	mov	r4,r18
 1000b08:	10031e80 	call	10031e8 <__malloc_unlock>
 1000b0c:	80c00204 	addi	r3,r16,8
 1000b10:	003f4d06 	br	1000848 <_malloc_r+0x50>
 1000b14:	80800204 	addi	r2,r16,8
 1000b18:	14000317 	ldw	r16,12(r2)
 1000b1c:	143f911e 	bne	r2,r16,1000964 <_malloc_r+0x16c>
 1000b20:	1a400084 	addi	r9,r3,2
 1000b24:	003f7306 	br	10008f4 <_malloc_r+0xfc>
 1000b28:	88c00054 	ori	r3,r17,1
 1000b2c:	8445883a 	add	r2,r16,r17
 1000b30:	80c00115 	stw	r3,4(r16)
 1000b34:	003fdf06 	br	1000ab4 <_malloc_r+0x2bc>
 1000b38:	e4000217 	ldw	r16,8(fp)
 1000b3c:	00bfff04 	movi	r2,-4
 1000b40:	80c00117 	ldw	r3,4(r16)
 1000b44:	802d883a 	mov	r22,r16
 1000b48:	18aa703a 	and	r21,r3,r2
 1000b4c:	ac401636 	bltu	r21,r17,1000ba8 <_malloc_r+0x3b0>
 1000b50:	ac49c83a 	sub	r4,r21,r17
 1000b54:	008003c4 	movi	r2,15
 1000b58:	1100130e 	bge	r2,r4,1000ba8 <_malloc_r+0x3b0>
 1000b5c:	88800054 	ori	r2,r17,1
 1000b60:	8447883a 	add	r3,r16,r17
 1000b64:	80800115 	stw	r2,4(r16)
 1000b68:	20800054 	ori	r2,r4,1
 1000b6c:	18800115 	stw	r2,4(r3)
 1000b70:	e0c00215 	stw	r3,8(fp)
 1000b74:	9009883a 	mov	r4,r18
 1000b78:	10031e80 	call	10031e8 <__malloc_unlock>
 1000b7c:	80c00204 	addi	r3,r16,8
 1000b80:	003f3106 	br	1000848 <_malloc_r+0x50>
 1000b84:	39c00117 	ldw	r7,4(r7)
 1000b88:	573ffe04 	addi	fp,r10,-8
 1000b8c:	003fa006 	br	1000a10 <_malloc_r+0x218>
 1000b90:	00801504 	movi	r2,84
 1000b94:	10c06736 	bltu	r2,r3,1000d34 <_malloc_r+0x53c>
 1000b98:	8804d33a 	srli	r2,r17,12
 1000b9c:	11801b84 	addi	r6,r2,110
 1000ba0:	300490fa 	slli	r2,r6,3
 1000ba4:	003f4106 	br	10008ac <_malloc_r+0xb4>
 1000ba8:	d0a6c717 	ldw	r2,-25828(gp)
 1000bac:	d0e00317 	ldw	r3,-32756(gp)
 1000bb0:	053fffc4 	movi	r20,-1
 1000bb4:	10800404 	addi	r2,r2,16
 1000bb8:	88a7883a 	add	r19,r17,r2
 1000bbc:	1d000326 	beq	r3,r20,1000bcc <_malloc_r+0x3d4>
 1000bc0:	98c3ffc4 	addi	r3,r19,4095
 1000bc4:	00bc0004 	movi	r2,-4096
 1000bc8:	18a6703a 	and	r19,r3,r2
 1000bcc:	9009883a 	mov	r4,r18
 1000bd0:	980b883a 	mov	r5,r19
 1000bd4:	10017900 	call	1001790 <_sbrk_r>
 1000bd8:	1009883a 	mov	r4,r2
 1000bdc:	15000426 	beq	r2,r20,1000bf0 <_malloc_r+0x3f8>
 1000be0:	854b883a 	add	r5,r16,r21
 1000be4:	1029883a 	mov	r20,r2
 1000be8:	11405a2e 	bgeu	r2,r5,1000d54 <_malloc_r+0x55c>
 1000bec:	87000c26 	beq	r16,fp,1000c20 <_malloc_r+0x428>
 1000bf0:	e4000217 	ldw	r16,8(fp)
 1000bf4:	80c00117 	ldw	r3,4(r16)
 1000bf8:	00bfff04 	movi	r2,-4
 1000bfc:	1884703a 	and	r2,r3,r2
 1000c00:	14400336 	bltu	r2,r17,1000c10 <_malloc_r+0x418>
 1000c04:	1449c83a 	sub	r4,r2,r17
 1000c08:	008003c4 	movi	r2,15
 1000c0c:	113fd316 	blt	r2,r4,1000b5c <_malloc_r+0x364>
 1000c10:	9009883a 	mov	r4,r18
 1000c14:	10031e80 	call	10031e8 <__malloc_unlock>
 1000c18:	0007883a 	mov	r3,zero
 1000c1c:	003f0a06 	br	1000848 <_malloc_r+0x50>
 1000c20:	05c04074 	movhi	r23,257
 1000c24:	bde47b04 	addi	r23,r23,-28180
 1000c28:	b8800017 	ldw	r2,0(r23)
 1000c2c:	988d883a 	add	r6,r19,r2
 1000c30:	b9800015 	stw	r6,0(r23)
 1000c34:	d0e00317 	ldw	r3,-32756(gp)
 1000c38:	00bfffc4 	movi	r2,-1
 1000c3c:	18808e26 	beq	r3,r2,1000e78 <_malloc_r+0x680>
 1000c40:	2145c83a 	sub	r2,r4,r5
 1000c44:	3085883a 	add	r2,r6,r2
 1000c48:	b8800015 	stw	r2,0(r23)
 1000c4c:	20c001cc 	andi	r3,r4,7
 1000c50:	18005f1e 	bne	r3,zero,1000dd0 <_malloc_r+0x5d8>
 1000c54:	000b883a 	mov	r5,zero
 1000c58:	a4c5883a 	add	r2,r20,r19
 1000c5c:	1083ffcc 	andi	r2,r2,4095
 1000c60:	00c40004 	movi	r3,4096
 1000c64:	1887c83a 	sub	r3,r3,r2
 1000c68:	28e7883a 	add	r19,r5,r3
 1000c6c:	9009883a 	mov	r4,r18
 1000c70:	980b883a 	mov	r5,r19
 1000c74:	10017900 	call	1001790 <_sbrk_r>
 1000c78:	1007883a 	mov	r3,r2
 1000c7c:	00bfffc4 	movi	r2,-1
 1000c80:	18807a26 	beq	r3,r2,1000e6c <_malloc_r+0x674>
 1000c84:	1d05c83a 	sub	r2,r3,r20
 1000c88:	9885883a 	add	r2,r19,r2
 1000c8c:	10c00054 	ori	r3,r2,1
 1000c90:	b8800017 	ldw	r2,0(r23)
 1000c94:	a021883a 	mov	r16,r20
 1000c98:	a0c00115 	stw	r3,4(r20)
 1000c9c:	9885883a 	add	r2,r19,r2
 1000ca0:	b8800015 	stw	r2,0(r23)
 1000ca4:	e5000215 	stw	r20,8(fp)
 1000ca8:	b7003626 	beq	r22,fp,1000d84 <_malloc_r+0x58c>
 1000cac:	018003c4 	movi	r6,15
 1000cb0:	35404b36 	bltu	r6,r21,1000de0 <_malloc_r+0x5e8>
 1000cb4:	00800044 	movi	r2,1
 1000cb8:	a0800115 	stw	r2,4(r20)
 1000cbc:	003fcd06 	br	1000bf4 <_malloc_r+0x3fc>
 1000cc0:	2808d27a 	srli	r4,r5,9
 1000cc4:	2000371e 	bne	r4,zero,1000da4 <_malloc_r+0x5ac>
 1000cc8:	2808d0fa 	srli	r4,r5,3
 1000ccc:	200690fa 	slli	r3,r4,3
 1000cd0:	1ad1883a 	add	r8,r3,r11
 1000cd4:	41800217 	ldw	r6,8(r8)
 1000cd8:	41805b26 	beq	r8,r6,1000e48 <_malloc_r+0x650>
 1000cdc:	30800117 	ldw	r2,4(r6)
 1000ce0:	00ffff04 	movi	r3,-4
 1000ce4:	10c4703a 	and	r2,r2,r3
 1000ce8:	2880022e 	bgeu	r5,r2,1000cf4 <_malloc_r+0x4fc>
 1000cec:	31800217 	ldw	r6,8(r6)
 1000cf0:	41bffa1e 	bne	r8,r6,1000cdc <_malloc_r+0x4e4>
 1000cf4:	32000317 	ldw	r8,12(r6)
 1000cf8:	39c00117 	ldw	r7,4(r7)
 1000cfc:	82000315 	stw	r8,12(r16)
 1000d00:	81800215 	stw	r6,8(r16)
 1000d04:	07004034 	movhi	fp,256
 1000d08:	e717ff04 	addi	fp,fp,24572
 1000d0c:	34000315 	stw	r16,12(r6)
 1000d10:	44000215 	stw	r16,8(r8)
 1000d14:	003f3e06 	br	1000a10 <_malloc_r+0x218>
 1000d18:	63000044 	addi	r12,r12,1
 1000d1c:	608000cc 	andi	r2,r12,3
 1000d20:	10005d26 	beq	r2,zero,1000e98 <_malloc_r+0x6a0>
 1000d24:	18c00204 	addi	r3,r3,8
 1000d28:	003f5106 	br	1000a70 <_malloc_r+0x278>
 1000d2c:	8089883a 	add	r4,r16,r2
 1000d30:	003f6d06 	br	1000ae8 <_malloc_r+0x2f0>
 1000d34:	00805504 	movi	r2,340
 1000d38:	10c02036 	bltu	r2,r3,1000dbc <_malloc_r+0x5c4>
 1000d3c:	8804d3fa 	srli	r2,r17,15
 1000d40:	11801dc4 	addi	r6,r2,119
 1000d44:	300490fa 	slli	r2,r6,3
 1000d48:	003ed806 	br	10008ac <_malloc_r+0xb4>
 1000d4c:	48c000c4 	addi	r3,r9,3
 1000d50:	003f3106 	br	1000a18 <_malloc_r+0x220>
 1000d54:	05c04074 	movhi	r23,257
 1000d58:	bde47b04 	addi	r23,r23,-28180
 1000d5c:	b8800017 	ldw	r2,0(r23)
 1000d60:	988d883a 	add	r6,r19,r2
 1000d64:	b9800015 	stw	r6,0(r23)
 1000d68:	293fb21e 	bne	r5,r4,1000c34 <_malloc_r+0x43c>
 1000d6c:	2083ffcc 	andi	r2,r4,4095
 1000d70:	103fb01e 	bne	r2,zero,1000c34 <_malloc_r+0x43c>
 1000d74:	e4000217 	ldw	r16,8(fp)
 1000d78:	9d45883a 	add	r2,r19,r21
 1000d7c:	10800054 	ori	r2,r2,1
 1000d80:	80800115 	stw	r2,4(r16)
 1000d84:	b8c00017 	ldw	r3,0(r23)
 1000d88:	d0a6c817 	ldw	r2,-25824(gp)
 1000d8c:	10c0012e 	bgeu	r2,r3,1000d94 <_malloc_r+0x59c>
 1000d90:	d0e6c815 	stw	r3,-25824(gp)
 1000d94:	d0a6c917 	ldw	r2,-25820(gp)
 1000d98:	10ff962e 	bgeu	r2,r3,1000bf4 <_malloc_r+0x3fc>
 1000d9c:	d0e6c915 	stw	r3,-25820(gp)
 1000da0:	003f9406 	br	1000bf4 <_malloc_r+0x3fc>
 1000da4:	00800104 	movi	r2,4
 1000da8:	11001e36 	bltu	r2,r4,1000e24 <_malloc_r+0x62c>
 1000dac:	2804d1ba 	srli	r2,r5,6
 1000db0:	11000e04 	addi	r4,r2,56
 1000db4:	200690fa 	slli	r3,r4,3
 1000db8:	003fc506 	br	1000cd0 <_malloc_r+0x4d8>
 1000dbc:	00815504 	movi	r2,1364
 1000dc0:	10c01d2e 	bgeu	r2,r3,1000e38 <_malloc_r+0x640>
 1000dc4:	01801f84 	movi	r6,126
 1000dc8:	0080fc04 	movi	r2,1008
 1000dcc:	003eb706 	br	10008ac <_malloc_r+0xb4>
 1000dd0:	00800204 	movi	r2,8
 1000dd4:	10cbc83a 	sub	r5,r2,r3
 1000dd8:	2169883a 	add	r20,r4,r5
 1000ddc:	003f9e06 	br	1000c58 <_malloc_r+0x460>
 1000de0:	00bffe04 	movi	r2,-8
 1000de4:	a93ffd04 	addi	r4,r21,-12
 1000de8:	2088703a 	and	r4,r4,r2
 1000dec:	b10b883a 	add	r5,r22,r4
 1000df0:	00c00144 	movi	r3,5
 1000df4:	28c00215 	stw	r3,8(r5)
 1000df8:	28c00115 	stw	r3,4(r5)
 1000dfc:	b0800117 	ldw	r2,4(r22)
 1000e00:	1080004c 	andi	r2,r2,1
 1000e04:	2084b03a 	or	r2,r4,r2
 1000e08:	b0800115 	stw	r2,4(r22)
 1000e0c:	313fdd2e 	bgeu	r6,r4,1000d84 <_malloc_r+0x58c>
 1000e10:	b1400204 	addi	r5,r22,8
 1000e14:	9009883a 	mov	r4,r18
 1000e18:	1001f580 	call	1001f58 <_free_r>
 1000e1c:	e4000217 	ldw	r16,8(fp)
 1000e20:	003fd806 	br	1000d84 <_malloc_r+0x58c>
 1000e24:	00800504 	movi	r2,20
 1000e28:	11001536 	bltu	r2,r4,1000e80 <_malloc_r+0x688>
 1000e2c:	210016c4 	addi	r4,r4,91
 1000e30:	200690fa 	slli	r3,r4,3
 1000e34:	003fa606 	br	1000cd0 <_malloc_r+0x4d8>
 1000e38:	8804d4ba 	srli	r2,r17,18
 1000e3c:	11801f04 	addi	r6,r2,124
 1000e40:	300490fa 	slli	r2,r6,3
 1000e44:	003e9906 	br	10008ac <_malloc_r+0xb4>
 1000e48:	2009d0ba 	srai	r4,r4,2
 1000e4c:	01404034 	movhi	r5,256
 1000e50:	2957ff04 	addi	r5,r5,24572
 1000e54:	00c00044 	movi	r3,1
 1000e58:	28800117 	ldw	r2,4(r5)
 1000e5c:	1906983a 	sll	r3,r3,r4
 1000e60:	10c4b03a 	or	r2,r2,r3
 1000e64:	28800115 	stw	r2,4(r5)
 1000e68:	003fa306 	br	1000cf8 <_malloc_r+0x500>
 1000e6c:	0027883a 	mov	r19,zero
 1000e70:	00c00044 	movi	r3,1
 1000e74:	003f8606 	br	1000c90 <_malloc_r+0x498>
 1000e78:	d1200315 	stw	r4,-32756(gp)
 1000e7c:	003f7306 	br	1000c4c <_malloc_r+0x454>
 1000e80:	00801504 	movi	r2,84
 1000e84:	11001936 	bltu	r2,r4,1000eec <_malloc_r+0x6f4>
 1000e88:	2804d33a 	srli	r2,r5,12
 1000e8c:	11001b84 	addi	r4,r2,110
 1000e90:	200690fa 	slli	r3,r4,3
 1000e94:	003f8e06 	br	1000cd0 <_malloc_r+0x4d8>
 1000e98:	480b883a 	mov	r5,r9
 1000e9c:	6807883a 	mov	r3,r13
 1000ea0:	288000cc 	andi	r2,r5,3
 1000ea4:	18fffe04 	addi	r3,r3,-8
 1000ea8:	297fffc4 	addi	r5,r5,-1
 1000eac:	10001526 	beq	r2,zero,1000f04 <_malloc_r+0x70c>
 1000eb0:	18800217 	ldw	r2,8(r3)
 1000eb4:	10fffa26 	beq	r2,r3,1000ea0 <_malloc_r+0x6a8>
 1000eb8:	2109883a 	add	r4,r4,r4
 1000ebc:	393f1e36 	bltu	r7,r4,1000b38 <_malloc_r+0x340>
 1000ec0:	203f1d26 	beq	r4,zero,1000b38 <_malloc_r+0x340>
 1000ec4:	21c4703a 	and	r2,r4,r7
 1000ec8:	10000226 	beq	r2,zero,1000ed4 <_malloc_r+0x6dc>
 1000ecc:	6013883a 	mov	r9,r12
 1000ed0:	003ee106 	br	1000a58 <_malloc_r+0x260>
 1000ed4:	2109883a 	add	r4,r4,r4
 1000ed8:	3904703a 	and	r2,r7,r4
 1000edc:	63000104 	addi	r12,r12,4
 1000ee0:	103ffc26 	beq	r2,zero,1000ed4 <_malloc_r+0x6dc>
 1000ee4:	6013883a 	mov	r9,r12
 1000ee8:	003edb06 	br	1000a58 <_malloc_r+0x260>
 1000eec:	00805504 	movi	r2,340
 1000ef0:	11000836 	bltu	r2,r4,1000f14 <_malloc_r+0x71c>
 1000ef4:	2804d3fa 	srli	r2,r5,15
 1000ef8:	11001dc4 	addi	r4,r2,119
 1000efc:	200690fa 	slli	r3,r4,3
 1000f00:	003f7306 	br	1000cd0 <_malloc_r+0x4d8>
 1000f04:	0104303a 	nor	r2,zero,r4
 1000f08:	388e703a 	and	r7,r7,r2
 1000f0c:	e1c00115 	stw	r7,4(fp)
 1000f10:	003fe906 	br	1000eb8 <_malloc_r+0x6c0>
 1000f14:	00815504 	movi	r2,1364
 1000f18:	1100032e 	bgeu	r2,r4,1000f28 <_malloc_r+0x730>
 1000f1c:	01001f84 	movi	r4,126
 1000f20:	00c0fc04 	movi	r3,1008
 1000f24:	003f6a06 	br	1000cd0 <_malloc_r+0x4d8>
 1000f28:	2804d4ba 	srli	r2,r5,18
 1000f2c:	11001f04 	addi	r4,r2,124
 1000f30:	200690fa 	slli	r3,r4,3
 1000f34:	003f6606 	br	1000cd0 <_malloc_r+0x4d8>

01000f38 <memchr>:
 1000f38:	008000c4 	movi	r2,3
 1000f3c:	29403fcc 	andi	r5,r5,255
 1000f40:	2007883a 	mov	r3,r4
 1000f44:	1180022e 	bgeu	r2,r6,1000f50 <memchr+0x18>
 1000f48:	2084703a 	and	r2,r4,r2
 1000f4c:	10000b26 	beq	r2,zero,1000f7c <memchr+0x44>
 1000f50:	313fffc4 	addi	r4,r6,-1
 1000f54:	3000051e 	bne	r6,zero,1000f6c <memchr+0x34>
 1000f58:	00002c06 	br	100100c <memchr+0xd4>
 1000f5c:	213fffc4 	addi	r4,r4,-1
 1000f60:	00bfffc4 	movi	r2,-1
 1000f64:	18c00044 	addi	r3,r3,1
 1000f68:	20802826 	beq	r4,r2,100100c <memchr+0xd4>
 1000f6c:	18800003 	ldbu	r2,0(r3)
 1000f70:	28bffa1e 	bne	r5,r2,1000f5c <memchr+0x24>
 1000f74:	1805883a 	mov	r2,r3
 1000f78:	f800283a 	ret
 1000f7c:	0011883a 	mov	r8,zero
 1000f80:	0007883a 	mov	r3,zero
 1000f84:	01c00104 	movi	r7,4
 1000f88:	4004923a 	slli	r2,r8,8
 1000f8c:	18c00044 	addi	r3,r3,1
 1000f90:	1151883a 	add	r8,r2,r5
 1000f94:	19fffc1e 	bne	r3,r7,1000f88 <memchr+0x50>
 1000f98:	02bfbff4 	movhi	r10,65279
 1000f9c:	52bfbfc4 	addi	r10,r10,-257
 1000fa0:	02602074 	movhi	r9,32897
 1000fa4:	4a602004 	addi	r9,r9,-32640
 1000fa8:	02c000c4 	movi	r11,3
 1000fac:	20800017 	ldw	r2,0(r4)
 1000fb0:	31bfff04 	addi	r6,r6,-4
 1000fb4:	200f883a 	mov	r7,r4
 1000fb8:	1204f03a 	xor	r2,r2,r8
 1000fbc:	1287883a 	add	r3,r2,r10
 1000fc0:	1a46703a 	and	r3,r3,r9
 1000fc4:	0084303a 	nor	r2,zero,r2
 1000fc8:	10c4703a 	and	r2,r2,r3
 1000fcc:	10000b26 	beq	r2,zero,1000ffc <memchr+0xc4>
 1000fd0:	20800003 	ldbu	r2,0(r4)
 1000fd4:	28800f26 	beq	r5,r2,1001014 <memchr+0xdc>
 1000fd8:	20800043 	ldbu	r2,1(r4)
 1000fdc:	21c00044 	addi	r7,r4,1
 1000fe0:	28800c26 	beq	r5,r2,1001014 <memchr+0xdc>
 1000fe4:	20800083 	ldbu	r2,2(r4)
 1000fe8:	21c00084 	addi	r7,r4,2
 1000fec:	28800926 	beq	r5,r2,1001014 <memchr+0xdc>
 1000ff0:	208000c3 	ldbu	r2,3(r4)
 1000ff4:	21c000c4 	addi	r7,r4,3
 1000ff8:	28800626 	beq	r5,r2,1001014 <memchr+0xdc>
 1000ffc:	21000104 	addi	r4,r4,4
 1001000:	59bfea36 	bltu	r11,r6,1000fac <memchr+0x74>
 1001004:	2007883a 	mov	r3,r4
 1001008:	003fd106 	br	1000f50 <memchr+0x18>
 100100c:	0005883a 	mov	r2,zero
 1001010:	f800283a 	ret
 1001014:	3805883a 	mov	r2,r7
 1001018:	f800283a 	ret

0100101c <memcpy>:
 100101c:	01c003c4 	movi	r7,15
 1001020:	2007883a 	mov	r3,r4
 1001024:	3980032e 	bgeu	r7,r6,1001034 <memcpy+0x18>
 1001028:	2904b03a 	or	r2,r5,r4
 100102c:	108000cc 	andi	r2,r2,3
 1001030:	10000926 	beq	r2,zero,1001058 <memcpy+0x3c>
 1001034:	30000626 	beq	r6,zero,1001050 <memcpy+0x34>
 1001038:	30cd883a 	add	r6,r6,r3
 100103c:	28800003 	ldbu	r2,0(r5)
 1001040:	29400044 	addi	r5,r5,1
 1001044:	18800005 	stb	r2,0(r3)
 1001048:	18c00044 	addi	r3,r3,1
 100104c:	30fffb1e 	bne	r6,r3,100103c <memcpy+0x20>
 1001050:	2005883a 	mov	r2,r4
 1001054:	f800283a 	ret
 1001058:	3811883a 	mov	r8,r7
 100105c:	200f883a 	mov	r7,r4
 1001060:	28c00017 	ldw	r3,0(r5)
 1001064:	31bffc04 	addi	r6,r6,-16
 1001068:	38c00015 	stw	r3,0(r7)
 100106c:	28800117 	ldw	r2,4(r5)
 1001070:	38800115 	stw	r2,4(r7)
 1001074:	28c00217 	ldw	r3,8(r5)
 1001078:	38c00215 	stw	r3,8(r7)
 100107c:	28800317 	ldw	r2,12(r5)
 1001080:	29400404 	addi	r5,r5,16
 1001084:	38800315 	stw	r2,12(r7)
 1001088:	39c00404 	addi	r7,r7,16
 100108c:	41bff436 	bltu	r8,r6,1001060 <memcpy+0x44>
 1001090:	008000c4 	movi	r2,3
 1001094:	1180072e 	bgeu	r2,r6,10010b4 <memcpy+0x98>
 1001098:	1007883a 	mov	r3,r2
 100109c:	28800017 	ldw	r2,0(r5)
 10010a0:	31bfff04 	addi	r6,r6,-4
 10010a4:	29400104 	addi	r5,r5,4
 10010a8:	38800015 	stw	r2,0(r7)
 10010ac:	39c00104 	addi	r7,r7,4
 10010b0:	19bffa36 	bltu	r3,r6,100109c <memcpy+0x80>
 10010b4:	3807883a 	mov	r3,r7
 10010b8:	003fde06 	br	1001034 <memcpy+0x18>

010010bc <memmove>:
 10010bc:	2807883a 	mov	r3,r5
 10010c0:	2011883a 	mov	r8,r4
 10010c4:	29000c2e 	bgeu	r5,r4,10010f8 <memmove+0x3c>
 10010c8:	298f883a 	add	r7,r5,r6
 10010cc:	21c00a2e 	bgeu	r4,r7,10010f8 <memmove+0x3c>
 10010d0:	30000726 	beq	r6,zero,10010f0 <memmove+0x34>
 10010d4:	2187883a 	add	r3,r4,r6
 10010d8:	198dc83a 	sub	r6,r3,r6
 10010dc:	39ffffc4 	addi	r7,r7,-1
 10010e0:	38800003 	ldbu	r2,0(r7)
 10010e4:	18ffffc4 	addi	r3,r3,-1
 10010e8:	18800005 	stb	r2,0(r3)
 10010ec:	19bffb1e 	bne	r3,r6,10010dc <memmove+0x20>
 10010f0:	2005883a 	mov	r2,r4
 10010f4:	f800283a 	ret
 10010f8:	01c003c4 	movi	r7,15
 10010fc:	39800a36 	bltu	r7,r6,1001128 <memmove+0x6c>
 1001100:	303ffb26 	beq	r6,zero,10010f0 <memmove+0x34>
 1001104:	400f883a 	mov	r7,r8
 1001108:	320d883a 	add	r6,r6,r8
 100110c:	28800003 	ldbu	r2,0(r5)
 1001110:	29400044 	addi	r5,r5,1
 1001114:	38800005 	stb	r2,0(r7)
 1001118:	39c00044 	addi	r7,r7,1
 100111c:	39bffb1e 	bne	r7,r6,100110c <memmove+0x50>
 1001120:	2005883a 	mov	r2,r4
 1001124:	f800283a 	ret
 1001128:	1904b03a 	or	r2,r3,r4
 100112c:	108000cc 	andi	r2,r2,3
 1001130:	103ff31e 	bne	r2,zero,1001100 <memmove+0x44>
 1001134:	3811883a 	mov	r8,r7
 1001138:	180b883a 	mov	r5,r3
 100113c:	200f883a 	mov	r7,r4
 1001140:	28c00017 	ldw	r3,0(r5)
 1001144:	31bffc04 	addi	r6,r6,-16
 1001148:	38c00015 	stw	r3,0(r7)
 100114c:	28800117 	ldw	r2,4(r5)
 1001150:	38800115 	stw	r2,4(r7)
 1001154:	28c00217 	ldw	r3,8(r5)
 1001158:	38c00215 	stw	r3,8(r7)
 100115c:	28800317 	ldw	r2,12(r5)
 1001160:	29400404 	addi	r5,r5,16
 1001164:	38800315 	stw	r2,12(r7)
 1001168:	39c00404 	addi	r7,r7,16
 100116c:	41bff436 	bltu	r8,r6,1001140 <memmove+0x84>
 1001170:	008000c4 	movi	r2,3
 1001174:	1180072e 	bgeu	r2,r6,1001194 <memmove+0xd8>
 1001178:	1007883a 	mov	r3,r2
 100117c:	28800017 	ldw	r2,0(r5)
 1001180:	31bfff04 	addi	r6,r6,-4
 1001184:	29400104 	addi	r5,r5,4
 1001188:	38800015 	stw	r2,0(r7)
 100118c:	39c00104 	addi	r7,r7,4
 1001190:	19bffa36 	bltu	r3,r6,100117c <memmove+0xc0>
 1001194:	3811883a 	mov	r8,r7
 1001198:	003fd906 	br	1001100 <memmove+0x44>

0100119c <_realloc_r>:
 100119c:	defff404 	addi	sp,sp,-48
 10011a0:	dd800815 	stw	r22,32(sp)
 10011a4:	dc800415 	stw	r18,16(sp)
 10011a8:	dc400315 	stw	r17,12(sp)
 10011ac:	dfc00b15 	stw	ra,44(sp)
 10011b0:	df000a15 	stw	fp,40(sp)
 10011b4:	ddc00915 	stw	r23,36(sp)
 10011b8:	dd400715 	stw	r21,28(sp)
 10011bc:	dd000615 	stw	r20,24(sp)
 10011c0:	dcc00515 	stw	r19,20(sp)
 10011c4:	dc000215 	stw	r16,8(sp)
 10011c8:	2825883a 	mov	r18,r5
 10011cc:	3023883a 	mov	r17,r6
 10011d0:	202d883a 	mov	r22,r4
 10011d4:	2800c926 	beq	r5,zero,10014fc <_realloc_r+0x360>
 10011d8:	10031c80 	call	10031c8 <__malloc_lock>
 10011dc:	943ffe04 	addi	r16,r18,-8
 10011e0:	88c002c4 	addi	r3,r17,11
 10011e4:	00800584 	movi	r2,22
 10011e8:	82000117 	ldw	r8,4(r16)
 10011ec:	10c01b2e 	bgeu	r2,r3,100125c <_realloc_r+0xc0>
 10011f0:	00bffe04 	movi	r2,-8
 10011f4:	188e703a 	and	r7,r3,r2
 10011f8:	3839883a 	mov	fp,r7
 10011fc:	38001a16 	blt	r7,zero,1001268 <_realloc_r+0xcc>
 1001200:	e4401936 	bltu	fp,r17,1001268 <_realloc_r+0xcc>
 1001204:	013fff04 	movi	r4,-4
 1001208:	4126703a 	and	r19,r8,r4
 100120c:	99c02616 	blt	r19,r7,10012a8 <_realloc_r+0x10c>
 1001210:	802b883a 	mov	r21,r16
 1001214:	9829883a 	mov	r20,r19
 1001218:	84000204 	addi	r16,r16,8
 100121c:	a80f883a 	mov	r7,r21
 1001220:	a70dc83a 	sub	r6,r20,fp
 1001224:	008003c4 	movi	r2,15
 1001228:	1180c136 	bltu	r2,r6,1001530 <_realloc_r+0x394>
 100122c:	38800117 	ldw	r2,4(r7)
 1001230:	a549883a 	add	r4,r20,r21
 1001234:	1080004c 	andi	r2,r2,1
 1001238:	a084b03a 	or	r2,r20,r2
 100123c:	38800115 	stw	r2,4(r7)
 1001240:	20c00117 	ldw	r3,4(r4)
 1001244:	18c00054 	ori	r3,r3,1
 1001248:	20c00115 	stw	r3,4(r4)
 100124c:	b009883a 	mov	r4,r22
 1001250:	10031e80 	call	10031e8 <__malloc_unlock>
 1001254:	8023883a 	mov	r17,r16
 1001258:	00000606 	br	1001274 <_realloc_r+0xd8>
 100125c:	01c00404 	movi	r7,16
 1001260:	3839883a 	mov	fp,r7
 1001264:	e47fe72e 	bgeu	fp,r17,1001204 <_realloc_r+0x68>
 1001268:	00800304 	movi	r2,12
 100126c:	0023883a 	mov	r17,zero
 1001270:	b0800015 	stw	r2,0(r22)
 1001274:	8805883a 	mov	r2,r17
 1001278:	dfc00b17 	ldw	ra,44(sp)
 100127c:	df000a17 	ldw	fp,40(sp)
 1001280:	ddc00917 	ldw	r23,36(sp)
 1001284:	dd800817 	ldw	r22,32(sp)
 1001288:	dd400717 	ldw	r21,28(sp)
 100128c:	dd000617 	ldw	r20,24(sp)
 1001290:	dcc00517 	ldw	r19,20(sp)
 1001294:	dc800417 	ldw	r18,16(sp)
 1001298:	dc400317 	ldw	r17,12(sp)
 100129c:	dc000217 	ldw	r16,8(sp)
 10012a0:	dec00c04 	addi	sp,sp,48
 10012a4:	f800283a 	ret
 10012a8:	00804034 	movhi	r2,256
 10012ac:	1097ff04 	addi	r2,r2,24572
 10012b0:	12400217 	ldw	r9,8(r2)
 10012b4:	84cd883a 	add	r6,r16,r19
 10012b8:	802b883a 	mov	r21,r16
 10012bc:	3240b926 	beq	r6,r9,10015a4 <_realloc_r+0x408>
 10012c0:	31400117 	ldw	r5,4(r6)
 10012c4:	00bfff84 	movi	r2,-2
 10012c8:	2884703a 	and	r2,r5,r2
 10012cc:	1185883a 	add	r2,r2,r6
 10012d0:	10c00117 	ldw	r3,4(r2)
 10012d4:	18c0004c 	andi	r3,r3,1
 10012d8:	1807003a 	cmpeq	r3,r3,zero
 10012dc:	1800a326 	beq	r3,zero,100156c <_realloc_r+0x3d0>
 10012e0:	2908703a 	and	r4,r5,r4
 10012e4:	9929883a 	add	r20,r19,r4
 10012e8:	a1c0a30e 	bge	r20,r7,1001578 <_realloc_r+0x3dc>
 10012ec:	4080004c 	andi	r2,r8,1
 10012f0:	1000551e 	bne	r2,zero,1001448 <_realloc_r+0x2ac>
 10012f4:	80800017 	ldw	r2,0(r16)
 10012f8:	80afc83a 	sub	r23,r16,r2
 10012fc:	b8c00117 	ldw	r3,4(r23)
 1001300:	00bfff04 	movi	r2,-4
 1001304:	1884703a 	and	r2,r3,r2
 1001308:	30002e26 	beq	r6,zero,10013c4 <_realloc_r+0x228>
 100130c:	3240b926 	beq	r6,r9,10015f4 <_realloc_r+0x458>
 1001310:	98a9883a 	add	r20,r19,r2
 1001314:	2509883a 	add	r4,r4,r20
 1001318:	d9000015 	stw	r4,0(sp)
 100131c:	21c02a16 	blt	r4,r7,10013c8 <_realloc_r+0x22c>
 1001320:	30800317 	ldw	r2,12(r6)
 1001324:	30c00217 	ldw	r3,8(r6)
 1001328:	01400904 	movi	r5,36
 100132c:	99bfff04 	addi	r6,r19,-4
 1001330:	18800315 	stw	r2,12(r3)
 1001334:	10c00215 	stw	r3,8(r2)
 1001338:	b9000317 	ldw	r4,12(r23)
 100133c:	b8800217 	ldw	r2,8(r23)
 1001340:	b82b883a 	mov	r21,r23
 1001344:	bc000204 	addi	r16,r23,8
 1001348:	20800215 	stw	r2,8(r4)
 100134c:	11000315 	stw	r4,12(r2)
 1001350:	2980e436 	bltu	r5,r6,10016e4 <_realloc_r+0x548>
 1001354:	008004c4 	movi	r2,19
 1001358:	9009883a 	mov	r4,r18
 100135c:	8011883a 	mov	r8,r16
 1001360:	11800f2e 	bgeu	r2,r6,10013a0 <_realloc_r+0x204>
 1001364:	90800017 	ldw	r2,0(r18)
 1001368:	ba000404 	addi	r8,r23,16
 100136c:	91000204 	addi	r4,r18,8
 1001370:	b8800215 	stw	r2,8(r23)
 1001374:	90c00117 	ldw	r3,4(r18)
 1001378:	008006c4 	movi	r2,27
 100137c:	b8c00315 	stw	r3,12(r23)
 1001380:	1180072e 	bgeu	r2,r6,10013a0 <_realloc_r+0x204>
 1001384:	90c00217 	ldw	r3,8(r18)
 1001388:	ba000604 	addi	r8,r23,24
 100138c:	91000404 	addi	r4,r18,16
 1001390:	b8c00415 	stw	r3,16(r23)
 1001394:	90800317 	ldw	r2,12(r18)
 1001398:	b8800515 	stw	r2,20(r23)
 100139c:	3140e726 	beq	r6,r5,100173c <_realloc_r+0x5a0>
 10013a0:	20800017 	ldw	r2,0(r4)
 10013a4:	dd000017 	ldw	r20,0(sp)
 10013a8:	b80f883a 	mov	r7,r23
 10013ac:	40800015 	stw	r2,0(r8)
 10013b0:	20c00117 	ldw	r3,4(r4)
 10013b4:	40c00115 	stw	r3,4(r8)
 10013b8:	20800217 	ldw	r2,8(r4)
 10013bc:	40800215 	stw	r2,8(r8)
 10013c0:	003f9706 	br	1001220 <_realloc_r+0x84>
 10013c4:	98a9883a 	add	r20,r19,r2
 10013c8:	a1c01f16 	blt	r20,r7,1001448 <_realloc_r+0x2ac>
 10013cc:	b8c00317 	ldw	r3,12(r23)
 10013d0:	b8800217 	ldw	r2,8(r23)
 10013d4:	99bfff04 	addi	r6,r19,-4
 10013d8:	01400904 	movi	r5,36
 10013dc:	b82b883a 	mov	r21,r23
 10013e0:	18800215 	stw	r2,8(r3)
 10013e4:	10c00315 	stw	r3,12(r2)
 10013e8:	bc000204 	addi	r16,r23,8
 10013ec:	2980c336 	bltu	r5,r6,10016fc <_realloc_r+0x560>
 10013f0:	008004c4 	movi	r2,19
 10013f4:	9009883a 	mov	r4,r18
 10013f8:	8011883a 	mov	r8,r16
 10013fc:	11800f2e 	bgeu	r2,r6,100143c <_realloc_r+0x2a0>
 1001400:	90800017 	ldw	r2,0(r18)
 1001404:	ba000404 	addi	r8,r23,16
 1001408:	91000204 	addi	r4,r18,8
 100140c:	b8800215 	stw	r2,8(r23)
 1001410:	90c00117 	ldw	r3,4(r18)
 1001414:	008006c4 	movi	r2,27
 1001418:	b8c00315 	stw	r3,12(r23)
 100141c:	1180072e 	bgeu	r2,r6,100143c <_realloc_r+0x2a0>
 1001420:	90c00217 	ldw	r3,8(r18)
 1001424:	ba000604 	addi	r8,r23,24
 1001428:	91000404 	addi	r4,r18,16
 100142c:	b8c00415 	stw	r3,16(r23)
 1001430:	90800317 	ldw	r2,12(r18)
 1001434:	b8800515 	stw	r2,20(r23)
 1001438:	3140c726 	beq	r6,r5,1001758 <_realloc_r+0x5bc>
 100143c:	20800017 	ldw	r2,0(r4)
 1001440:	b80f883a 	mov	r7,r23
 1001444:	003fd906 	br	10013ac <_realloc_r+0x210>
 1001448:	880b883a 	mov	r5,r17
 100144c:	b009883a 	mov	r4,r22
 1001450:	10007f80 	call	10007f8 <_malloc_r>
 1001454:	1023883a 	mov	r17,r2
 1001458:	10002526 	beq	r2,zero,10014f0 <_realloc_r+0x354>
 100145c:	80800117 	ldw	r2,4(r16)
 1001460:	00ffff84 	movi	r3,-2
 1001464:	893ffe04 	addi	r4,r17,-8
 1001468:	10c4703a 	and	r2,r2,r3
 100146c:	8085883a 	add	r2,r16,r2
 1001470:	20809526 	beq	r4,r2,10016c8 <_realloc_r+0x52c>
 1001474:	99bfff04 	addi	r6,r19,-4
 1001478:	01c00904 	movi	r7,36
 100147c:	39804536 	bltu	r7,r6,1001594 <_realloc_r+0x3f8>
 1001480:	008004c4 	movi	r2,19
 1001484:	9009883a 	mov	r4,r18
 1001488:	880b883a 	mov	r5,r17
 100148c:	11800f2e 	bgeu	r2,r6,10014cc <_realloc_r+0x330>
 1001490:	90800017 	ldw	r2,0(r18)
 1001494:	89400204 	addi	r5,r17,8
 1001498:	91000204 	addi	r4,r18,8
 100149c:	88800015 	stw	r2,0(r17)
 10014a0:	90c00117 	ldw	r3,4(r18)
 10014a4:	008006c4 	movi	r2,27
 10014a8:	88c00115 	stw	r3,4(r17)
 10014ac:	1180072e 	bgeu	r2,r6,10014cc <_realloc_r+0x330>
 10014b0:	90c00217 	ldw	r3,8(r18)
 10014b4:	89400404 	addi	r5,r17,16
 10014b8:	91000404 	addi	r4,r18,16
 10014bc:	88c00215 	stw	r3,8(r17)
 10014c0:	90800317 	ldw	r2,12(r18)
 10014c4:	88800315 	stw	r2,12(r17)
 10014c8:	31c09126 	beq	r6,r7,1001710 <_realloc_r+0x574>
 10014cc:	20800017 	ldw	r2,0(r4)
 10014d0:	28800015 	stw	r2,0(r5)
 10014d4:	20c00117 	ldw	r3,4(r4)
 10014d8:	28c00115 	stw	r3,4(r5)
 10014dc:	20800217 	ldw	r2,8(r4)
 10014e0:	28800215 	stw	r2,8(r5)
 10014e4:	900b883a 	mov	r5,r18
 10014e8:	b009883a 	mov	r4,r22
 10014ec:	1001f580 	call	1001f58 <_free_r>
 10014f0:	b009883a 	mov	r4,r22
 10014f4:	10031e80 	call	10031e8 <__malloc_unlock>
 10014f8:	003f5e06 	br	1001274 <_realloc_r+0xd8>
 10014fc:	300b883a 	mov	r5,r6
 1001500:	dfc00b17 	ldw	ra,44(sp)
 1001504:	df000a17 	ldw	fp,40(sp)
 1001508:	ddc00917 	ldw	r23,36(sp)
 100150c:	dd800817 	ldw	r22,32(sp)
 1001510:	dd400717 	ldw	r21,28(sp)
 1001514:	dd000617 	ldw	r20,24(sp)
 1001518:	dcc00517 	ldw	r19,20(sp)
 100151c:	dc800417 	ldw	r18,16(sp)
 1001520:	dc400317 	ldw	r17,12(sp)
 1001524:	dc000217 	ldw	r16,8(sp)
 1001528:	dec00c04 	addi	sp,sp,48
 100152c:	10007f81 	jmpi	10007f8 <_malloc_r>
 1001530:	38800117 	ldw	r2,4(r7)
 1001534:	e54b883a 	add	r5,fp,r21
 1001538:	31000054 	ori	r4,r6,1
 100153c:	1080004c 	andi	r2,r2,1
 1001540:	1704b03a 	or	r2,r2,fp
 1001544:	38800115 	stw	r2,4(r7)
 1001548:	29000115 	stw	r4,4(r5)
 100154c:	2987883a 	add	r3,r5,r6
 1001550:	18800117 	ldw	r2,4(r3)
 1001554:	29400204 	addi	r5,r5,8
 1001558:	b009883a 	mov	r4,r22
 100155c:	10800054 	ori	r2,r2,1
 1001560:	18800115 	stw	r2,4(r3)
 1001564:	1001f580 	call	1001f58 <_free_r>
 1001568:	003f3806 	br	100124c <_realloc_r+0xb0>
 100156c:	000d883a 	mov	r6,zero
 1001570:	0009883a 	mov	r4,zero
 1001574:	003f5d06 	br	10012ec <_realloc_r+0x150>
 1001578:	30c00217 	ldw	r3,8(r6)
 100157c:	30800317 	ldw	r2,12(r6)
 1001580:	800f883a 	mov	r7,r16
 1001584:	84000204 	addi	r16,r16,8
 1001588:	10c00215 	stw	r3,8(r2)
 100158c:	18800315 	stw	r2,12(r3)
 1001590:	003f2306 	br	1001220 <_realloc_r+0x84>
 1001594:	8809883a 	mov	r4,r17
 1001598:	900b883a 	mov	r5,r18
 100159c:	10010bc0 	call	10010bc <memmove>
 10015a0:	003fd006 	br	10014e4 <_realloc_r+0x348>
 10015a4:	30800117 	ldw	r2,4(r6)
 10015a8:	e0c00404 	addi	r3,fp,16
 10015ac:	1108703a 	and	r4,r2,r4
 10015b0:	9905883a 	add	r2,r19,r4
 10015b4:	10ff4d16 	blt	r2,r3,10012ec <_realloc_r+0x150>
 10015b8:	1705c83a 	sub	r2,r2,fp
 10015bc:	870b883a 	add	r5,r16,fp
 10015c0:	10800054 	ori	r2,r2,1
 10015c4:	28800115 	stw	r2,4(r5)
 10015c8:	80c00117 	ldw	r3,4(r16)
 10015cc:	00804034 	movhi	r2,256
 10015d0:	1097ff04 	addi	r2,r2,24572
 10015d4:	b009883a 	mov	r4,r22
 10015d8:	18c0004c 	andi	r3,r3,1
 10015dc:	e0c6b03a 	or	r3,fp,r3
 10015e0:	11400215 	stw	r5,8(r2)
 10015e4:	80c00115 	stw	r3,4(r16)
 10015e8:	10031e80 	call	10031e8 <__malloc_unlock>
 10015ec:	84400204 	addi	r17,r16,8
 10015f0:	003f2006 	br	1001274 <_realloc_r+0xd8>
 10015f4:	98a9883a 	add	r20,r19,r2
 10015f8:	2509883a 	add	r4,r4,r20
 10015fc:	e0800404 	addi	r2,fp,16
 1001600:	d9000115 	stw	r4,4(sp)
 1001604:	20bf7016 	blt	r4,r2,10013c8 <_realloc_r+0x22c>
 1001608:	b8c00317 	ldw	r3,12(r23)
 100160c:	b8800217 	ldw	r2,8(r23)
 1001610:	99bfff04 	addi	r6,r19,-4
 1001614:	01400904 	movi	r5,36
 1001618:	18800215 	stw	r2,8(r3)
 100161c:	10c00315 	stw	r3,12(r2)
 1001620:	bc400204 	addi	r17,r23,8
 1001624:	29804136 	bltu	r5,r6,100172c <_realloc_r+0x590>
 1001628:	008004c4 	movi	r2,19
 100162c:	9009883a 	mov	r4,r18
 1001630:	880f883a 	mov	r7,r17
 1001634:	11800f2e 	bgeu	r2,r6,1001674 <_realloc_r+0x4d8>
 1001638:	90800017 	ldw	r2,0(r18)
 100163c:	b9c00404 	addi	r7,r23,16
 1001640:	91000204 	addi	r4,r18,8
 1001644:	b8800215 	stw	r2,8(r23)
 1001648:	90c00117 	ldw	r3,4(r18)
 100164c:	008006c4 	movi	r2,27
 1001650:	b8c00315 	stw	r3,12(r23)
 1001654:	1180072e 	bgeu	r2,r6,1001674 <_realloc_r+0x4d8>
 1001658:	90c00217 	ldw	r3,8(r18)
 100165c:	b9c00604 	addi	r7,r23,24
 1001660:	91000404 	addi	r4,r18,16
 1001664:	b8c00415 	stw	r3,16(r23)
 1001668:	90800317 	ldw	r2,12(r18)
 100166c:	b8800515 	stw	r2,20(r23)
 1001670:	31404026 	beq	r6,r5,1001774 <_realloc_r+0x5d8>
 1001674:	20800017 	ldw	r2,0(r4)
 1001678:	38800015 	stw	r2,0(r7)
 100167c:	20c00117 	ldw	r3,4(r4)
 1001680:	38c00115 	stw	r3,4(r7)
 1001684:	20800217 	ldw	r2,8(r4)
 1001688:	38800215 	stw	r2,8(r7)
 100168c:	d8c00117 	ldw	r3,4(sp)
 1001690:	bf0b883a 	add	r5,r23,fp
 1001694:	b009883a 	mov	r4,r22
 1001698:	1f05c83a 	sub	r2,r3,fp
 100169c:	10800054 	ori	r2,r2,1
 10016a0:	28800115 	stw	r2,4(r5)
 10016a4:	b8c00117 	ldw	r3,4(r23)
 10016a8:	00804034 	movhi	r2,256
 10016ac:	1097ff04 	addi	r2,r2,24572
 10016b0:	11400215 	stw	r5,8(r2)
 10016b4:	18c0004c 	andi	r3,r3,1
 10016b8:	e0c6b03a 	or	r3,fp,r3
 10016bc:	b8c00115 	stw	r3,4(r23)
 10016c0:	10031e80 	call	10031e8 <__malloc_unlock>
 10016c4:	003eeb06 	br	1001274 <_realloc_r+0xd8>
 10016c8:	20800117 	ldw	r2,4(r4)
 10016cc:	00ffff04 	movi	r3,-4
 10016d0:	800f883a 	mov	r7,r16
 10016d4:	10c4703a 	and	r2,r2,r3
 10016d8:	98a9883a 	add	r20,r19,r2
 10016dc:	84000204 	addi	r16,r16,8
 10016e0:	003ecf06 	br	1001220 <_realloc_r+0x84>
 10016e4:	900b883a 	mov	r5,r18
 10016e8:	8009883a 	mov	r4,r16
 10016ec:	10010bc0 	call	10010bc <memmove>
 10016f0:	dd000017 	ldw	r20,0(sp)
 10016f4:	b80f883a 	mov	r7,r23
 10016f8:	003ec906 	br	1001220 <_realloc_r+0x84>
 10016fc:	900b883a 	mov	r5,r18
 1001700:	8009883a 	mov	r4,r16
 1001704:	10010bc0 	call	10010bc <memmove>
 1001708:	b80f883a 	mov	r7,r23
 100170c:	003ec406 	br	1001220 <_realloc_r+0x84>
 1001710:	90c00417 	ldw	r3,16(r18)
 1001714:	89400604 	addi	r5,r17,24
 1001718:	91000604 	addi	r4,r18,24
 100171c:	88c00415 	stw	r3,16(r17)
 1001720:	90800517 	ldw	r2,20(r18)
 1001724:	88800515 	stw	r2,20(r17)
 1001728:	003f6806 	br	10014cc <_realloc_r+0x330>
 100172c:	900b883a 	mov	r5,r18
 1001730:	8809883a 	mov	r4,r17
 1001734:	10010bc0 	call	10010bc <memmove>
 1001738:	003fd406 	br	100168c <_realloc_r+0x4f0>
 100173c:	90c00417 	ldw	r3,16(r18)
 1001740:	91000604 	addi	r4,r18,24
 1001744:	ba000804 	addi	r8,r23,32
 1001748:	b8c00615 	stw	r3,24(r23)
 100174c:	90800517 	ldw	r2,20(r18)
 1001750:	b8800715 	stw	r2,28(r23)
 1001754:	003f1206 	br	10013a0 <_realloc_r+0x204>
 1001758:	90c00417 	ldw	r3,16(r18)
 100175c:	91000604 	addi	r4,r18,24
 1001760:	ba000804 	addi	r8,r23,32
 1001764:	b8c00615 	stw	r3,24(r23)
 1001768:	90800517 	ldw	r2,20(r18)
 100176c:	b8800715 	stw	r2,28(r23)
 1001770:	003f3206 	br	100143c <_realloc_r+0x2a0>
 1001774:	90c00417 	ldw	r3,16(r18)
 1001778:	91000604 	addi	r4,r18,24
 100177c:	b9c00804 	addi	r7,r23,32
 1001780:	b8c00615 	stw	r3,24(r23)
 1001784:	90800517 	ldw	r2,20(r18)
 1001788:	b8800715 	stw	r2,28(r23)
 100178c:	003fb906 	br	1001674 <_realloc_r+0x4d8>

01001790 <_sbrk_r>:
 1001790:	defffd04 	addi	sp,sp,-12
 1001794:	dc000015 	stw	r16,0(sp)
 1001798:	04004074 	movhi	r16,257
 100179c:	84247404 	addi	r16,r16,-28208
 10017a0:	dc400115 	stw	r17,4(sp)
 10017a4:	80000015 	stw	zero,0(r16)
 10017a8:	2023883a 	mov	r17,r4
 10017ac:	2809883a 	mov	r4,r5
 10017b0:	dfc00215 	stw	ra,8(sp)
 10017b4:	10033e80 	call	10033e8 <sbrk>
 10017b8:	1007883a 	mov	r3,r2
 10017bc:	00bfffc4 	movi	r2,-1
 10017c0:	18800626 	beq	r3,r2,10017dc <_sbrk_r+0x4c>
 10017c4:	1805883a 	mov	r2,r3
 10017c8:	dfc00217 	ldw	ra,8(sp)
 10017cc:	dc400117 	ldw	r17,4(sp)
 10017d0:	dc000017 	ldw	r16,0(sp)
 10017d4:	dec00304 	addi	sp,sp,12
 10017d8:	f800283a 	ret
 10017dc:	80800017 	ldw	r2,0(r16)
 10017e0:	103ff826 	beq	r2,zero,10017c4 <_sbrk_r+0x34>
 10017e4:	88800015 	stw	r2,0(r17)
 10017e8:	1805883a 	mov	r2,r3
 10017ec:	dfc00217 	ldw	ra,8(sp)
 10017f0:	dc400117 	ldw	r17,4(sp)
 10017f4:	dc000017 	ldw	r16,0(sp)
 10017f8:	dec00304 	addi	sp,sp,12
 10017fc:	f800283a 	ret

01001800 <__swsetup_r>:
 1001800:	00804034 	movhi	r2,256
 1001804:	109daa04 	addi	r2,r2,30376
 1001808:	10c00017 	ldw	r3,0(r2)
 100180c:	defffd04 	addi	sp,sp,-12
 1001810:	dc400115 	stw	r17,4(sp)
 1001814:	dc000015 	stw	r16,0(sp)
 1001818:	dfc00215 	stw	ra,8(sp)
 100181c:	2023883a 	mov	r17,r4
 1001820:	2821883a 	mov	r16,r5
 1001824:	18000226 	beq	r3,zero,1001830 <__swsetup_r+0x30>
 1001828:	18800e17 	ldw	r2,56(r3)
 100182c:	10001f26 	beq	r2,zero,10018ac <__swsetup_r+0xac>
 1001830:	8100030b 	ldhu	r4,12(r16)
 1001834:	2080020c 	andi	r2,r4,8
 1001838:	10002826 	beq	r2,zero,10018dc <__swsetup_r+0xdc>
 100183c:	81400417 	ldw	r5,16(r16)
 1001840:	28001d26 	beq	r5,zero,10018b8 <__swsetup_r+0xb8>
 1001844:	2080004c 	andi	r2,r4,1
 1001848:	1005003a 	cmpeq	r2,r2,zero
 100184c:	10000b26 	beq	r2,zero,100187c <__swsetup_r+0x7c>
 1001850:	2080008c 	andi	r2,r4,2
 1001854:	10001226 	beq	r2,zero,10018a0 <__swsetup_r+0xa0>
 1001858:	0005883a 	mov	r2,zero
 100185c:	80800215 	stw	r2,8(r16)
 1001860:	28000b26 	beq	r5,zero,1001890 <__swsetup_r+0x90>
 1001864:	0005883a 	mov	r2,zero
 1001868:	dfc00217 	ldw	ra,8(sp)
 100186c:	dc400117 	ldw	r17,4(sp)
 1001870:	dc000017 	ldw	r16,0(sp)
 1001874:	dec00304 	addi	sp,sp,12
 1001878:	f800283a 	ret
 100187c:	80800517 	ldw	r2,20(r16)
 1001880:	80000215 	stw	zero,8(r16)
 1001884:	0085c83a 	sub	r2,zero,r2
 1001888:	80800615 	stw	r2,24(r16)
 100188c:	283ff51e 	bne	r5,zero,1001864 <__swsetup_r+0x64>
 1001890:	2080200c 	andi	r2,r4,128
 1001894:	103ff326 	beq	r2,zero,1001864 <__swsetup_r+0x64>
 1001898:	00bfffc4 	movi	r2,-1
 100189c:	003ff206 	br	1001868 <__swsetup_r+0x68>
 10018a0:	80800517 	ldw	r2,20(r16)
 10018a4:	80800215 	stw	r2,8(r16)
 10018a8:	003fed06 	br	1001860 <__swsetup_r+0x60>
 10018ac:	1809883a 	mov	r4,r3
 10018b0:	1001bd40 	call	1001bd4 <__sinit>
 10018b4:	003fde06 	br	1001830 <__swsetup_r+0x30>
 10018b8:	20c0a00c 	andi	r3,r4,640
 10018bc:	00808004 	movi	r2,512
 10018c0:	18bfe026 	beq	r3,r2,1001844 <__swsetup_r+0x44>
 10018c4:	8809883a 	mov	r4,r17
 10018c8:	800b883a 	mov	r5,r16
 10018cc:	10023ec0 	call	10023ec <__smakebuf_r>
 10018d0:	8100030b 	ldhu	r4,12(r16)
 10018d4:	81400417 	ldw	r5,16(r16)
 10018d8:	003fda06 	br	1001844 <__swsetup_r+0x44>
 10018dc:	2080040c 	andi	r2,r4,16
 10018e0:	103fed26 	beq	r2,zero,1001898 <__swsetup_r+0x98>
 10018e4:	2080010c 	andi	r2,r4,4
 10018e8:	10001226 	beq	r2,zero,1001934 <__swsetup_r+0x134>
 10018ec:	81400c17 	ldw	r5,48(r16)
 10018f0:	28000526 	beq	r5,zero,1001908 <__swsetup_r+0x108>
 10018f4:	80801004 	addi	r2,r16,64
 10018f8:	28800226 	beq	r5,r2,1001904 <__swsetup_r+0x104>
 10018fc:	8809883a 	mov	r4,r17
 1001900:	1001f580 	call	1001f58 <_free_r>
 1001904:	80000c15 	stw	zero,48(r16)
 1001908:	8080030b 	ldhu	r2,12(r16)
 100190c:	81400417 	ldw	r5,16(r16)
 1001910:	80000115 	stw	zero,4(r16)
 1001914:	10bff6cc 	andi	r2,r2,65499
 1001918:	8080030d 	sth	r2,12(r16)
 100191c:	81400015 	stw	r5,0(r16)
 1001920:	8080030b 	ldhu	r2,12(r16)
 1001924:	10800214 	ori	r2,r2,8
 1001928:	113fffcc 	andi	r4,r2,65535
 100192c:	8080030d 	sth	r2,12(r16)
 1001930:	003fc306 	br	1001840 <__swsetup_r+0x40>
 1001934:	81400417 	ldw	r5,16(r16)
 1001938:	003ff906 	br	1001920 <__swsetup_r+0x120>

0100193c <_fflush_r>:
 100193c:	defffb04 	addi	sp,sp,-20
 1001940:	dcc00315 	stw	r19,12(sp)
 1001944:	dc800215 	stw	r18,8(sp)
 1001948:	dfc00415 	stw	ra,16(sp)
 100194c:	dc400115 	stw	r17,4(sp)
 1001950:	dc000015 	stw	r16,0(sp)
 1001954:	2027883a 	mov	r19,r4
 1001958:	2825883a 	mov	r18,r5
 100195c:	20000226 	beq	r4,zero,1001968 <_fflush_r+0x2c>
 1001960:	20800e17 	ldw	r2,56(r4)
 1001964:	10005626 	beq	r2,zero,1001ac0 <_fflush_r+0x184>
 1001968:	9100030b 	ldhu	r4,12(r18)
 100196c:	20ffffcc 	andi	r3,r4,65535
 1001970:	18e0001c 	xori	r3,r3,32768
 1001974:	18e00004 	addi	r3,r3,-32768
 1001978:	1880020c 	andi	r2,r3,8
 100197c:	1000261e 	bne	r2,zero,1001a18 <_fflush_r+0xdc>
 1001980:	90c00117 	ldw	r3,4(r18)
 1001984:	20820014 	ori	r2,r4,2048
 1001988:	9080030d 	sth	r2,12(r18)
 100198c:	1009883a 	mov	r4,r2
 1001990:	00c0400e 	bge	zero,r3,1001a94 <_fflush_r+0x158>
 1001994:	92000a17 	ldw	r8,40(r18)
 1001998:	40004026 	beq	r8,zero,1001a9c <_fflush_r+0x160>
 100199c:	2084000c 	andi	r2,r4,4096
 10019a0:	10005326 	beq	r2,zero,1001af0 <_fflush_r+0x1b4>
 10019a4:	94001417 	ldw	r16,80(r18)
 10019a8:	9080030b 	ldhu	r2,12(r18)
 10019ac:	1080010c 	andi	r2,r2,4
 10019b0:	1000481e 	bne	r2,zero,1001ad4 <_fflush_r+0x198>
 10019b4:	91400717 	ldw	r5,28(r18)
 10019b8:	9809883a 	mov	r4,r19
 10019bc:	800d883a 	mov	r6,r16
 10019c0:	000f883a 	mov	r7,zero
 10019c4:	403ee83a 	callr	r8
 10019c8:	8080261e 	bne	r16,r2,1001a64 <_fflush_r+0x128>
 10019cc:	9080030b 	ldhu	r2,12(r18)
 10019d0:	91000417 	ldw	r4,16(r18)
 10019d4:	90000115 	stw	zero,4(r18)
 10019d8:	10bdffcc 	andi	r2,r2,63487
 10019dc:	10ffffcc 	andi	r3,r2,65535
 10019e0:	18c4000c 	andi	r3,r3,4096
 10019e4:	9080030d 	sth	r2,12(r18)
 10019e8:	91000015 	stw	r4,0(r18)
 10019ec:	18002b26 	beq	r3,zero,1001a9c <_fflush_r+0x160>
 10019f0:	0007883a 	mov	r3,zero
 10019f4:	1805883a 	mov	r2,r3
 10019f8:	94001415 	stw	r16,80(r18)
 10019fc:	dfc00417 	ldw	ra,16(sp)
 1001a00:	dcc00317 	ldw	r19,12(sp)
 1001a04:	dc800217 	ldw	r18,8(sp)
 1001a08:	dc400117 	ldw	r17,4(sp)
 1001a0c:	dc000017 	ldw	r16,0(sp)
 1001a10:	dec00504 	addi	sp,sp,20
 1001a14:	f800283a 	ret
 1001a18:	94400417 	ldw	r17,16(r18)
 1001a1c:	88001f26 	beq	r17,zero,1001a9c <_fflush_r+0x160>
 1001a20:	90800017 	ldw	r2,0(r18)
 1001a24:	18c000cc 	andi	r3,r3,3
 1001a28:	94400015 	stw	r17,0(r18)
 1001a2c:	1461c83a 	sub	r16,r2,r17
 1001a30:	18002526 	beq	r3,zero,1001ac8 <_fflush_r+0x18c>
 1001a34:	0005883a 	mov	r2,zero
 1001a38:	90800215 	stw	r2,8(r18)
 1001a3c:	0400170e 	bge	zero,r16,1001a9c <_fflush_r+0x160>
 1001a40:	90c00917 	ldw	r3,36(r18)
 1001a44:	91400717 	ldw	r5,28(r18)
 1001a48:	880d883a 	mov	r6,r17
 1001a4c:	800f883a 	mov	r7,r16
 1001a50:	9809883a 	mov	r4,r19
 1001a54:	183ee83a 	callr	r3
 1001a58:	88a3883a 	add	r17,r17,r2
 1001a5c:	80a1c83a 	sub	r16,r16,r2
 1001a60:	00bff616 	blt	zero,r2,1001a3c <_fflush_r+0x100>
 1001a64:	9080030b 	ldhu	r2,12(r18)
 1001a68:	00ffffc4 	movi	r3,-1
 1001a6c:	10801014 	ori	r2,r2,64
 1001a70:	9080030d 	sth	r2,12(r18)
 1001a74:	1805883a 	mov	r2,r3
 1001a78:	dfc00417 	ldw	ra,16(sp)
 1001a7c:	dcc00317 	ldw	r19,12(sp)
 1001a80:	dc800217 	ldw	r18,8(sp)
 1001a84:	dc400117 	ldw	r17,4(sp)
 1001a88:	dc000017 	ldw	r16,0(sp)
 1001a8c:	dec00504 	addi	sp,sp,20
 1001a90:	f800283a 	ret
 1001a94:	90800f17 	ldw	r2,60(r18)
 1001a98:	00bfbe16 	blt	zero,r2,1001994 <_fflush_r+0x58>
 1001a9c:	0007883a 	mov	r3,zero
 1001aa0:	1805883a 	mov	r2,r3
 1001aa4:	dfc00417 	ldw	ra,16(sp)
 1001aa8:	dcc00317 	ldw	r19,12(sp)
 1001aac:	dc800217 	ldw	r18,8(sp)
 1001ab0:	dc400117 	ldw	r17,4(sp)
 1001ab4:	dc000017 	ldw	r16,0(sp)
 1001ab8:	dec00504 	addi	sp,sp,20
 1001abc:	f800283a 	ret
 1001ac0:	1001bd40 	call	1001bd4 <__sinit>
 1001ac4:	003fa806 	br	1001968 <_fflush_r+0x2c>
 1001ac8:	90800517 	ldw	r2,20(r18)
 1001acc:	90800215 	stw	r2,8(r18)
 1001ad0:	003fda06 	br	1001a3c <_fflush_r+0x100>
 1001ad4:	90800117 	ldw	r2,4(r18)
 1001ad8:	90c00c17 	ldw	r3,48(r18)
 1001adc:	80a1c83a 	sub	r16,r16,r2
 1001ae0:	183fb426 	beq	r3,zero,10019b4 <_fflush_r+0x78>
 1001ae4:	90800f17 	ldw	r2,60(r18)
 1001ae8:	80a1c83a 	sub	r16,r16,r2
 1001aec:	003fb106 	br	10019b4 <_fflush_r+0x78>
 1001af0:	91400717 	ldw	r5,28(r18)
 1001af4:	9809883a 	mov	r4,r19
 1001af8:	000d883a 	mov	r6,zero
 1001afc:	01c00044 	movi	r7,1
 1001b00:	403ee83a 	callr	r8
 1001b04:	1021883a 	mov	r16,r2
 1001b08:	00bfffc4 	movi	r2,-1
 1001b0c:	80800226 	beq	r16,r2,1001b18 <_fflush_r+0x1dc>
 1001b10:	92000a17 	ldw	r8,40(r18)
 1001b14:	003fa406 	br	10019a8 <_fflush_r+0x6c>
 1001b18:	98c00017 	ldw	r3,0(r19)
 1001b1c:	00800744 	movi	r2,29
 1001b20:	18bfde26 	beq	r3,r2,1001a9c <_fflush_r+0x160>
 1001b24:	9080030b 	ldhu	r2,12(r18)
 1001b28:	8007883a 	mov	r3,r16
 1001b2c:	10801014 	ori	r2,r2,64
 1001b30:	9080030d 	sth	r2,12(r18)
 1001b34:	003fcf06 	br	1001a74 <_fflush_r+0x138>

01001b38 <fflush>:
 1001b38:	01404034 	movhi	r5,256
 1001b3c:	29464f04 	addi	r5,r5,6460
 1001b40:	2007883a 	mov	r3,r4
 1001b44:	20000526 	beq	r4,zero,1001b5c <fflush+0x24>
 1001b48:	00804034 	movhi	r2,256
 1001b4c:	109daa04 	addi	r2,r2,30376
 1001b50:	11000017 	ldw	r4,0(r2)
 1001b54:	180b883a 	mov	r5,r3
 1001b58:	100193c1 	jmpi	100193c <_fflush_r>
 1001b5c:	00804034 	movhi	r2,256
 1001b60:	109dab04 	addi	r2,r2,30380
 1001b64:	11000017 	ldw	r4,0(r2)
 1001b68:	100226c1 	jmpi	100226c <_fwalk_reent>

01001b6c <std>:
 1001b6c:	00804034 	movhi	r2,256
 1001b70:	10898604 	addi	r2,r2,9752
 1001b74:	20800b15 	stw	r2,44(r4)
 1001b78:	00804034 	movhi	r2,256
 1001b7c:	1089c104 	addi	r2,r2,9988
 1001b80:	20800815 	stw	r2,32(r4)
 1001b84:	00c04034 	movhi	r3,256
 1001b88:	18c9a204 	addi	r3,r3,9864
 1001b8c:	00804034 	movhi	r2,256
 1001b90:	10898804 	addi	r2,r2,9760
 1001b94:	2140030d 	sth	r5,12(r4)
 1001b98:	2180038d 	sth	r6,14(r4)
 1001b9c:	20c00915 	stw	r3,36(r4)
 1001ba0:	20800a15 	stw	r2,40(r4)
 1001ba4:	20000015 	stw	zero,0(r4)
 1001ba8:	20000115 	stw	zero,4(r4)
 1001bac:	20000215 	stw	zero,8(r4)
 1001bb0:	20000415 	stw	zero,16(r4)
 1001bb4:	20000515 	stw	zero,20(r4)
 1001bb8:	20000615 	stw	zero,24(r4)
 1001bbc:	21000715 	stw	r4,28(r4)
 1001bc0:	f800283a 	ret

01001bc4 <__sfp_lock_acquire>:
 1001bc4:	f800283a 	ret

01001bc8 <__sfp_lock_release>:
 1001bc8:	f800283a 	ret

01001bcc <__sinit_lock_acquire>:
 1001bcc:	f800283a 	ret

01001bd0 <__sinit_lock_release>:
 1001bd0:	f800283a 	ret

01001bd4 <__sinit>:
 1001bd4:	20800e17 	ldw	r2,56(r4)
 1001bd8:	defffd04 	addi	sp,sp,-12
 1001bdc:	dc400115 	stw	r17,4(sp)
 1001be0:	dc000015 	stw	r16,0(sp)
 1001be4:	dfc00215 	stw	ra,8(sp)
 1001be8:	04400044 	movi	r17,1
 1001bec:	01400104 	movi	r5,4
 1001bf0:	000d883a 	mov	r6,zero
 1001bf4:	2021883a 	mov	r16,r4
 1001bf8:	2200bb04 	addi	r8,r4,748
 1001bfc:	200f883a 	mov	r7,r4
 1001c00:	10000526 	beq	r2,zero,1001c18 <__sinit+0x44>
 1001c04:	dfc00217 	ldw	ra,8(sp)
 1001c08:	dc400117 	ldw	r17,4(sp)
 1001c0c:	dc000017 	ldw	r16,0(sp)
 1001c10:	dec00304 	addi	sp,sp,12
 1001c14:	f800283a 	ret
 1001c18:	21000117 	ldw	r4,4(r4)
 1001c1c:	00804034 	movhi	r2,256
 1001c20:	10872e04 	addi	r2,r2,7352
 1001c24:	00c000c4 	movi	r3,3
 1001c28:	80800f15 	stw	r2,60(r16)
 1001c2c:	80c0b915 	stw	r3,740(r16)
 1001c30:	8200ba15 	stw	r8,744(r16)
 1001c34:	84400e15 	stw	r17,56(r16)
 1001c38:	8000b815 	stw	zero,736(r16)
 1001c3c:	1001b6c0 	call	1001b6c <std>
 1001c40:	81000217 	ldw	r4,8(r16)
 1001c44:	880d883a 	mov	r6,r17
 1001c48:	800f883a 	mov	r7,r16
 1001c4c:	01400284 	movi	r5,10
 1001c50:	1001b6c0 	call	1001b6c <std>
 1001c54:	81000317 	ldw	r4,12(r16)
 1001c58:	800f883a 	mov	r7,r16
 1001c5c:	01400484 	movi	r5,18
 1001c60:	01800084 	movi	r6,2
 1001c64:	dfc00217 	ldw	ra,8(sp)
 1001c68:	dc400117 	ldw	r17,4(sp)
 1001c6c:	dc000017 	ldw	r16,0(sp)
 1001c70:	dec00304 	addi	sp,sp,12
 1001c74:	1001b6c1 	jmpi	1001b6c <std>

01001c78 <__fp_lock>:
 1001c78:	0005883a 	mov	r2,zero
 1001c7c:	f800283a 	ret

01001c80 <__fp_unlock>:
 1001c80:	0005883a 	mov	r2,zero
 1001c84:	f800283a 	ret

01001c88 <__fp_unlock_all>:
 1001c88:	00804034 	movhi	r2,256
 1001c8c:	109daa04 	addi	r2,r2,30376
 1001c90:	11000017 	ldw	r4,0(r2)
 1001c94:	01404034 	movhi	r5,256
 1001c98:	29472004 	addi	r5,r5,7296
 1001c9c:	10023341 	jmpi	1002334 <_fwalk>

01001ca0 <__fp_lock_all>:
 1001ca0:	00804034 	movhi	r2,256
 1001ca4:	109daa04 	addi	r2,r2,30376
 1001ca8:	11000017 	ldw	r4,0(r2)
 1001cac:	01404034 	movhi	r5,256
 1001cb0:	29471e04 	addi	r5,r5,7288
 1001cb4:	10023341 	jmpi	1002334 <_fwalk>

01001cb8 <_cleanup_r>:
 1001cb8:	01404034 	movhi	r5,256
 1001cbc:	294a5704 	addi	r5,r5,10588
 1001cc0:	10023341 	jmpi	1002334 <_fwalk>

01001cc4 <_cleanup>:
 1001cc4:	00804034 	movhi	r2,256
 1001cc8:	109dab04 	addi	r2,r2,30380
 1001ccc:	11000017 	ldw	r4,0(r2)
 1001cd0:	1001cb81 	jmpi	1001cb8 <_cleanup_r>

01001cd4 <__sfmoreglue>:
 1001cd4:	defffc04 	addi	sp,sp,-16
 1001cd8:	dc400115 	stw	r17,4(sp)
 1001cdc:	2c401724 	muli	r17,r5,92
 1001ce0:	dc800215 	stw	r18,8(sp)
 1001ce4:	2825883a 	mov	r18,r5
 1001ce8:	89400304 	addi	r5,r17,12
 1001cec:	dc000015 	stw	r16,0(sp)
 1001cf0:	dfc00315 	stw	ra,12(sp)
 1001cf4:	10007f80 	call	10007f8 <_malloc_r>
 1001cf8:	0021883a 	mov	r16,zero
 1001cfc:	880d883a 	mov	r6,r17
 1001d00:	000b883a 	mov	r5,zero
 1001d04:	10000626 	beq	r2,zero,1001d20 <__sfmoreglue+0x4c>
 1001d08:	11000304 	addi	r4,r2,12
 1001d0c:	14800115 	stw	r18,4(r2)
 1001d10:	10000015 	stw	zero,0(r2)
 1001d14:	11000215 	stw	r4,8(r2)
 1001d18:	1021883a 	mov	r16,r2
 1001d1c:	10025800 	call	1002580 <memset>
 1001d20:	8005883a 	mov	r2,r16
 1001d24:	dfc00317 	ldw	ra,12(sp)
 1001d28:	dc800217 	ldw	r18,8(sp)
 1001d2c:	dc400117 	ldw	r17,4(sp)
 1001d30:	dc000017 	ldw	r16,0(sp)
 1001d34:	dec00404 	addi	sp,sp,16
 1001d38:	f800283a 	ret

01001d3c <__sfp>:
 1001d3c:	defffd04 	addi	sp,sp,-12
 1001d40:	00804034 	movhi	r2,256
 1001d44:	109dab04 	addi	r2,r2,30380
 1001d48:	dc000015 	stw	r16,0(sp)
 1001d4c:	14000017 	ldw	r16,0(r2)
 1001d50:	dc400115 	stw	r17,4(sp)
 1001d54:	dfc00215 	stw	ra,8(sp)
 1001d58:	80800e17 	ldw	r2,56(r16)
 1001d5c:	2023883a 	mov	r17,r4
 1001d60:	10002626 	beq	r2,zero,1001dfc <__sfp+0xc0>
 1001d64:	8400b804 	addi	r16,r16,736
 1001d68:	80800117 	ldw	r2,4(r16)
 1001d6c:	81000217 	ldw	r4,8(r16)
 1001d70:	10ffffc4 	addi	r3,r2,-1
 1001d74:	18000916 	blt	r3,zero,1001d9c <__sfp+0x60>
 1001d78:	2080030f 	ldh	r2,12(r4)
 1001d7c:	10000b26 	beq	r2,zero,1001dac <__sfp+0x70>
 1001d80:	017fffc4 	movi	r5,-1
 1001d84:	00000206 	br	1001d90 <__sfp+0x54>
 1001d88:	2080030f 	ldh	r2,12(r4)
 1001d8c:	10000726 	beq	r2,zero,1001dac <__sfp+0x70>
 1001d90:	18ffffc4 	addi	r3,r3,-1
 1001d94:	21001704 	addi	r4,r4,92
 1001d98:	197ffb1e 	bne	r3,r5,1001d88 <__sfp+0x4c>
 1001d9c:	80800017 	ldw	r2,0(r16)
 1001da0:	10001926 	beq	r2,zero,1001e08 <__sfp+0xcc>
 1001da4:	1021883a 	mov	r16,r2
 1001da8:	003fef06 	br	1001d68 <__sfp+0x2c>
 1001dac:	00bfffc4 	movi	r2,-1
 1001db0:	00c00044 	movi	r3,1
 1001db4:	2080038d 	sth	r2,14(r4)
 1001db8:	20c0030d 	sth	r3,12(r4)
 1001dbc:	20000015 	stw	zero,0(r4)
 1001dc0:	20000215 	stw	zero,8(r4)
 1001dc4:	20000115 	stw	zero,4(r4)
 1001dc8:	20000415 	stw	zero,16(r4)
 1001dcc:	20000515 	stw	zero,20(r4)
 1001dd0:	20000615 	stw	zero,24(r4)
 1001dd4:	20000c15 	stw	zero,48(r4)
 1001dd8:	20000d15 	stw	zero,52(r4)
 1001ddc:	20001115 	stw	zero,68(r4)
 1001de0:	20001215 	stw	zero,72(r4)
 1001de4:	2005883a 	mov	r2,r4
 1001de8:	dfc00217 	ldw	ra,8(sp)
 1001dec:	dc400117 	ldw	r17,4(sp)
 1001df0:	dc000017 	ldw	r16,0(sp)
 1001df4:	dec00304 	addi	sp,sp,12
 1001df8:	f800283a 	ret
 1001dfc:	8009883a 	mov	r4,r16
 1001e00:	1001bd40 	call	1001bd4 <__sinit>
 1001e04:	003fd706 	br	1001d64 <__sfp+0x28>
 1001e08:	8809883a 	mov	r4,r17
 1001e0c:	01400104 	movi	r5,4
 1001e10:	1001cd40 	call	1001cd4 <__sfmoreglue>
 1001e14:	80800015 	stw	r2,0(r16)
 1001e18:	103fe21e 	bne	r2,zero,1001da4 <__sfp+0x68>
 1001e1c:	00800304 	movi	r2,12
 1001e20:	0009883a 	mov	r4,zero
 1001e24:	88800015 	stw	r2,0(r17)
 1001e28:	003fee06 	br	1001de4 <__sfp+0xa8>

01001e2c <_malloc_trim_r>:
 1001e2c:	defffb04 	addi	sp,sp,-20
 1001e30:	dcc00315 	stw	r19,12(sp)
 1001e34:	04c04034 	movhi	r19,256
 1001e38:	9cd7ff04 	addi	r19,r19,24572
 1001e3c:	dc800215 	stw	r18,8(sp)
 1001e40:	dc400115 	stw	r17,4(sp)
 1001e44:	dc000015 	stw	r16,0(sp)
 1001e48:	2823883a 	mov	r17,r5
 1001e4c:	2025883a 	mov	r18,r4
 1001e50:	dfc00415 	stw	ra,16(sp)
 1001e54:	10031c80 	call	10031c8 <__malloc_lock>
 1001e58:	98800217 	ldw	r2,8(r19)
 1001e5c:	9009883a 	mov	r4,r18
 1001e60:	000b883a 	mov	r5,zero
 1001e64:	10c00117 	ldw	r3,4(r2)
 1001e68:	00bfff04 	movi	r2,-4
 1001e6c:	18a0703a 	and	r16,r3,r2
 1001e70:	8463c83a 	sub	r17,r16,r17
 1001e74:	8c43fbc4 	addi	r17,r17,4079
 1001e78:	8822d33a 	srli	r17,r17,12
 1001e7c:	0083ffc4 	movi	r2,4095
 1001e80:	8c7fffc4 	addi	r17,r17,-1
 1001e84:	8822933a 	slli	r17,r17,12
 1001e88:	1440060e 	bge	r2,r17,1001ea4 <_malloc_trim_r+0x78>
 1001e8c:	10017900 	call	1001790 <_sbrk_r>
 1001e90:	98c00217 	ldw	r3,8(r19)
 1001e94:	9009883a 	mov	r4,r18
 1001e98:	044bc83a 	sub	r5,zero,r17
 1001e9c:	80c7883a 	add	r3,r16,r3
 1001ea0:	10c00926 	beq	r2,r3,1001ec8 <_malloc_trim_r+0x9c>
 1001ea4:	10031e80 	call	10031e8 <__malloc_unlock>
 1001ea8:	0005883a 	mov	r2,zero
 1001eac:	dfc00417 	ldw	ra,16(sp)
 1001eb0:	dcc00317 	ldw	r19,12(sp)
 1001eb4:	dc800217 	ldw	r18,8(sp)
 1001eb8:	dc400117 	ldw	r17,4(sp)
 1001ebc:	dc000017 	ldw	r16,0(sp)
 1001ec0:	dec00504 	addi	sp,sp,20
 1001ec4:	f800283a 	ret
 1001ec8:	9009883a 	mov	r4,r18
 1001ecc:	10017900 	call	1001790 <_sbrk_r>
 1001ed0:	844dc83a 	sub	r6,r16,r17
 1001ed4:	00ffffc4 	movi	r3,-1
 1001ed8:	9009883a 	mov	r4,r18
 1001edc:	000b883a 	mov	r5,zero
 1001ee0:	01c04074 	movhi	r7,257
 1001ee4:	39e47b04 	addi	r7,r7,-28180
 1001ee8:	31800054 	ori	r6,r6,1
 1001eec:	10c00926 	beq	r2,r3,1001f14 <_malloc_trim_r+0xe8>
 1001ef0:	38800017 	ldw	r2,0(r7)
 1001ef4:	98c00217 	ldw	r3,8(r19)
 1001ef8:	9009883a 	mov	r4,r18
 1001efc:	1445c83a 	sub	r2,r2,r17
 1001f00:	38800015 	stw	r2,0(r7)
 1001f04:	19800115 	stw	r6,4(r3)
 1001f08:	10031e80 	call	10031e8 <__malloc_unlock>
 1001f0c:	00800044 	movi	r2,1
 1001f10:	003fe606 	br	1001eac <_malloc_trim_r+0x80>
 1001f14:	10017900 	call	1001790 <_sbrk_r>
 1001f18:	99800217 	ldw	r6,8(r19)
 1001f1c:	100f883a 	mov	r7,r2
 1001f20:	9009883a 	mov	r4,r18
 1001f24:	1187c83a 	sub	r3,r2,r6
 1001f28:	008003c4 	movi	r2,15
 1001f2c:	19400054 	ori	r5,r3,1
 1001f30:	10ffdc0e 	bge	r2,r3,1001ea4 <_malloc_trim_r+0x78>
 1001f34:	00804034 	movhi	r2,256
 1001f38:	109dad04 	addi	r2,r2,30388
 1001f3c:	10c00017 	ldw	r3,0(r2)
 1001f40:	00804074 	movhi	r2,257
 1001f44:	10a47b04 	addi	r2,r2,-28180
 1001f48:	31400115 	stw	r5,4(r6)
 1001f4c:	38c7c83a 	sub	r3,r7,r3
 1001f50:	10c00015 	stw	r3,0(r2)
 1001f54:	003fd306 	br	1001ea4 <_malloc_trim_r+0x78>

01001f58 <_free_r>:
 1001f58:	defffd04 	addi	sp,sp,-12
 1001f5c:	dc400115 	stw	r17,4(sp)
 1001f60:	dc000015 	stw	r16,0(sp)
 1001f64:	dfc00215 	stw	ra,8(sp)
 1001f68:	2821883a 	mov	r16,r5
 1001f6c:	2023883a 	mov	r17,r4
 1001f70:	28005a26 	beq	r5,zero,10020dc <_free_r+0x184>
 1001f74:	10031c80 	call	10031c8 <__malloc_lock>
 1001f78:	823ffe04 	addi	r8,r16,-8
 1001f7c:	41400117 	ldw	r5,4(r8)
 1001f80:	00bfff84 	movi	r2,-2
 1001f84:	02804034 	movhi	r10,256
 1001f88:	5297ff04 	addi	r10,r10,24572
 1001f8c:	288e703a 	and	r7,r5,r2
 1001f90:	41cd883a 	add	r6,r8,r7
 1001f94:	30c00117 	ldw	r3,4(r6)
 1001f98:	51000217 	ldw	r4,8(r10)
 1001f9c:	00bfff04 	movi	r2,-4
 1001fa0:	1892703a 	and	r9,r3,r2
 1001fa4:	5017883a 	mov	r11,r10
 1001fa8:	31006726 	beq	r6,r4,1002148 <_free_r+0x1f0>
 1001fac:	2880004c 	andi	r2,r5,1
 1001fb0:	1005003a 	cmpeq	r2,r2,zero
 1001fb4:	32400115 	stw	r9,4(r6)
 1001fb8:	10001a1e 	bne	r2,zero,1002024 <_free_r+0xcc>
 1001fbc:	000b883a 	mov	r5,zero
 1001fc0:	3247883a 	add	r3,r6,r9
 1001fc4:	18800117 	ldw	r2,4(r3)
 1001fc8:	1080004c 	andi	r2,r2,1
 1001fcc:	1000231e 	bne	r2,zero,100205c <_free_r+0x104>
 1001fd0:	280ac03a 	cmpne	r5,r5,zero
 1001fd4:	3a4f883a 	add	r7,r7,r9
 1001fd8:	2800451e 	bne	r5,zero,10020f0 <_free_r+0x198>
 1001fdc:	31000217 	ldw	r4,8(r6)
 1001fe0:	00804034 	movhi	r2,256
 1001fe4:	10980104 	addi	r2,r2,24580
 1001fe8:	20807b26 	beq	r4,r2,10021d8 <_free_r+0x280>
 1001fec:	30800317 	ldw	r2,12(r6)
 1001ff0:	3a07883a 	add	r3,r7,r8
 1001ff4:	19c00015 	stw	r7,0(r3)
 1001ff8:	11000215 	stw	r4,8(r2)
 1001ffc:	20800315 	stw	r2,12(r4)
 1002000:	38800054 	ori	r2,r7,1
 1002004:	40800115 	stw	r2,4(r8)
 1002008:	28001a26 	beq	r5,zero,1002074 <_free_r+0x11c>
 100200c:	8809883a 	mov	r4,r17
 1002010:	dfc00217 	ldw	ra,8(sp)
 1002014:	dc400117 	ldw	r17,4(sp)
 1002018:	dc000017 	ldw	r16,0(sp)
 100201c:	dec00304 	addi	sp,sp,12
 1002020:	10031e81 	jmpi	10031e8 <__malloc_unlock>
 1002024:	80bffe17 	ldw	r2,-8(r16)
 1002028:	50c00204 	addi	r3,r10,8
 100202c:	4091c83a 	sub	r8,r8,r2
 1002030:	41000217 	ldw	r4,8(r8)
 1002034:	388f883a 	add	r7,r7,r2
 1002038:	20c06126 	beq	r4,r3,10021c0 <_free_r+0x268>
 100203c:	40800317 	ldw	r2,12(r8)
 1002040:	3247883a 	add	r3,r6,r9
 1002044:	000b883a 	mov	r5,zero
 1002048:	11000215 	stw	r4,8(r2)
 100204c:	20800315 	stw	r2,12(r4)
 1002050:	18800117 	ldw	r2,4(r3)
 1002054:	1080004c 	andi	r2,r2,1
 1002058:	103fdd26 	beq	r2,zero,1001fd0 <_free_r+0x78>
 100205c:	38800054 	ori	r2,r7,1
 1002060:	3a07883a 	add	r3,r7,r8
 1002064:	280ac03a 	cmpne	r5,r5,zero
 1002068:	40800115 	stw	r2,4(r8)
 100206c:	19c00015 	stw	r7,0(r3)
 1002070:	283fe61e 	bne	r5,zero,100200c <_free_r+0xb4>
 1002074:	00807fc4 	movi	r2,511
 1002078:	11c01f2e 	bgeu	r2,r7,10020f8 <_free_r+0x1a0>
 100207c:	3806d27a 	srli	r3,r7,9
 1002080:	1800481e 	bne	r3,zero,10021a4 <_free_r+0x24c>
 1002084:	3804d0fa 	srli	r2,r7,3
 1002088:	100690fa 	slli	r3,r2,3
 100208c:	1acd883a 	add	r6,r3,r11
 1002090:	31400217 	ldw	r5,8(r6)
 1002094:	31405926 	beq	r6,r5,10021fc <_free_r+0x2a4>
 1002098:	28800117 	ldw	r2,4(r5)
 100209c:	00ffff04 	movi	r3,-4
 10020a0:	10c4703a 	and	r2,r2,r3
 10020a4:	3880022e 	bgeu	r7,r2,10020b0 <_free_r+0x158>
 10020a8:	29400217 	ldw	r5,8(r5)
 10020ac:	317ffa1e 	bne	r6,r5,1002098 <_free_r+0x140>
 10020b0:	29800317 	ldw	r6,12(r5)
 10020b4:	41800315 	stw	r6,12(r8)
 10020b8:	41400215 	stw	r5,8(r8)
 10020bc:	8809883a 	mov	r4,r17
 10020c0:	2a000315 	stw	r8,12(r5)
 10020c4:	32000215 	stw	r8,8(r6)
 10020c8:	dfc00217 	ldw	ra,8(sp)
 10020cc:	dc400117 	ldw	r17,4(sp)
 10020d0:	dc000017 	ldw	r16,0(sp)
 10020d4:	dec00304 	addi	sp,sp,12
 10020d8:	10031e81 	jmpi	10031e8 <__malloc_unlock>
 10020dc:	dfc00217 	ldw	ra,8(sp)
 10020e0:	dc400117 	ldw	r17,4(sp)
 10020e4:	dc000017 	ldw	r16,0(sp)
 10020e8:	dec00304 	addi	sp,sp,12
 10020ec:	f800283a 	ret
 10020f0:	31000217 	ldw	r4,8(r6)
 10020f4:	003fbd06 	br	1001fec <_free_r+0x94>
 10020f8:	3806d0fa 	srli	r3,r7,3
 10020fc:	00800044 	movi	r2,1
 1002100:	51400117 	ldw	r5,4(r10)
 1002104:	180890fa 	slli	r4,r3,3
 1002108:	1807d0ba 	srai	r3,r3,2
 100210c:	22c9883a 	add	r4,r4,r11
 1002110:	21800217 	ldw	r6,8(r4)
 1002114:	10c4983a 	sll	r2,r2,r3
 1002118:	41000315 	stw	r4,12(r8)
 100211c:	41800215 	stw	r6,8(r8)
 1002120:	288ab03a 	or	r5,r5,r2
 1002124:	22000215 	stw	r8,8(r4)
 1002128:	8809883a 	mov	r4,r17
 100212c:	51400115 	stw	r5,4(r10)
 1002130:	32000315 	stw	r8,12(r6)
 1002134:	dfc00217 	ldw	ra,8(sp)
 1002138:	dc400117 	ldw	r17,4(sp)
 100213c:	dc000017 	ldw	r16,0(sp)
 1002140:	dec00304 	addi	sp,sp,12
 1002144:	10031e81 	jmpi	10031e8 <__malloc_unlock>
 1002148:	2880004c 	andi	r2,r5,1
 100214c:	3a4d883a 	add	r6,r7,r9
 1002150:	1000071e 	bne	r2,zero,1002170 <_free_r+0x218>
 1002154:	80bffe17 	ldw	r2,-8(r16)
 1002158:	4091c83a 	sub	r8,r8,r2
 100215c:	41000317 	ldw	r4,12(r8)
 1002160:	40c00217 	ldw	r3,8(r8)
 1002164:	308d883a 	add	r6,r6,r2
 1002168:	20c00215 	stw	r3,8(r4)
 100216c:	19000315 	stw	r4,12(r3)
 1002170:	00804034 	movhi	r2,256
 1002174:	109dac04 	addi	r2,r2,30384
 1002178:	11000017 	ldw	r4,0(r2)
 100217c:	30c00054 	ori	r3,r6,1
 1002180:	52000215 	stw	r8,8(r10)
 1002184:	40c00115 	stw	r3,4(r8)
 1002188:	313fa036 	bltu	r6,r4,100200c <_free_r+0xb4>
 100218c:	00804074 	movhi	r2,257
 1002190:	10a47104 	addi	r2,r2,-28220
 1002194:	11400017 	ldw	r5,0(r2)
 1002198:	8809883a 	mov	r4,r17
 100219c:	1001e2c0 	call	1001e2c <_malloc_trim_r>
 10021a0:	003f9a06 	br	100200c <_free_r+0xb4>
 10021a4:	00800104 	movi	r2,4
 10021a8:	10c0072e 	bgeu	r2,r3,10021c8 <_free_r+0x270>
 10021ac:	00800504 	movi	r2,20
 10021b0:	10c01936 	bltu	r2,r3,1002218 <_free_r+0x2c0>
 10021b4:	188016c4 	addi	r2,r3,91
 10021b8:	100690fa 	slli	r3,r2,3
 10021bc:	003fb306 	br	100208c <_free_r+0x134>
 10021c0:	01400044 	movi	r5,1
 10021c4:	003f7e06 	br	1001fc0 <_free_r+0x68>
 10021c8:	3804d1ba 	srli	r2,r7,6
 10021cc:	10800e04 	addi	r2,r2,56
 10021d0:	100690fa 	slli	r3,r2,3
 10021d4:	003fad06 	br	100208c <_free_r+0x134>
 10021d8:	22000315 	stw	r8,12(r4)
 10021dc:	22000215 	stw	r8,8(r4)
 10021e0:	3a05883a 	add	r2,r7,r8
 10021e4:	38c00054 	ori	r3,r7,1
 10021e8:	11c00015 	stw	r7,0(r2)
 10021ec:	41000215 	stw	r4,8(r8)
 10021f0:	40c00115 	stw	r3,4(r8)
 10021f4:	41000315 	stw	r4,12(r8)
 10021f8:	003f8406 	br	100200c <_free_r+0xb4>
 10021fc:	1005d0ba 	srai	r2,r2,2
 1002200:	00c00044 	movi	r3,1
 1002204:	51000117 	ldw	r4,4(r10)
 1002208:	1886983a 	sll	r3,r3,r2
 100220c:	20c8b03a 	or	r4,r4,r3
 1002210:	51000115 	stw	r4,4(r10)
 1002214:	003fa706 	br	10020b4 <_free_r+0x15c>
 1002218:	00801504 	movi	r2,84
 100221c:	10c00436 	bltu	r2,r3,1002230 <_free_r+0x2d8>
 1002220:	3804d33a 	srli	r2,r7,12
 1002224:	10801b84 	addi	r2,r2,110
 1002228:	100690fa 	slli	r3,r2,3
 100222c:	003f9706 	br	100208c <_free_r+0x134>
 1002230:	00805504 	movi	r2,340
 1002234:	10c00436 	bltu	r2,r3,1002248 <_free_r+0x2f0>
 1002238:	3804d3fa 	srli	r2,r7,15
 100223c:	10801dc4 	addi	r2,r2,119
 1002240:	100690fa 	slli	r3,r2,3
 1002244:	003f9106 	br	100208c <_free_r+0x134>
 1002248:	00815504 	movi	r2,1364
 100224c:	10c0032e 	bgeu	r2,r3,100225c <_free_r+0x304>
 1002250:	00801f84 	movi	r2,126
 1002254:	00c0fc04 	movi	r3,1008
 1002258:	003f8c06 	br	100208c <_free_r+0x134>
 100225c:	3804d4ba 	srli	r2,r7,18
 1002260:	10801f04 	addi	r2,r2,124
 1002264:	100690fa 	slli	r3,r2,3
 1002268:	003f8806 	br	100208c <_free_r+0x134>

0100226c <_fwalk_reent>:
 100226c:	defff704 	addi	sp,sp,-36
 1002270:	dcc00315 	stw	r19,12(sp)
 1002274:	24c0b804 	addi	r19,r4,736
 1002278:	dd800615 	stw	r22,24(sp)
 100227c:	dd400515 	stw	r21,20(sp)
 1002280:	dfc00815 	stw	ra,32(sp)
 1002284:	ddc00715 	stw	r23,28(sp)
 1002288:	dd000415 	stw	r20,16(sp)
 100228c:	dc800215 	stw	r18,8(sp)
 1002290:	dc400115 	stw	r17,4(sp)
 1002294:	dc000015 	stw	r16,0(sp)
 1002298:	202b883a 	mov	r21,r4
 100229c:	282d883a 	mov	r22,r5
 10022a0:	1001bc40 	call	1001bc4 <__sfp_lock_acquire>
 10022a4:	98002126 	beq	r19,zero,100232c <_fwalk_reent+0xc0>
 10022a8:	002f883a 	mov	r23,zero
 10022ac:	9c800117 	ldw	r18,4(r19)
 10022b0:	9c000217 	ldw	r16,8(r19)
 10022b4:	90bfffc4 	addi	r2,r18,-1
 10022b8:	10000d16 	blt	r2,zero,10022f0 <_fwalk_reent+0x84>
 10022bc:	0023883a 	mov	r17,zero
 10022c0:	053fffc4 	movi	r20,-1
 10022c4:	8080030f 	ldh	r2,12(r16)
 10022c8:	8c400044 	addi	r17,r17,1
 10022cc:	10000626 	beq	r2,zero,10022e8 <_fwalk_reent+0x7c>
 10022d0:	8080038f 	ldh	r2,14(r16)
 10022d4:	800b883a 	mov	r5,r16
 10022d8:	a809883a 	mov	r4,r21
 10022dc:	15000226 	beq	r2,r20,10022e8 <_fwalk_reent+0x7c>
 10022e0:	b03ee83a 	callr	r22
 10022e4:	b8aeb03a 	or	r23,r23,r2
 10022e8:	84001704 	addi	r16,r16,92
 10022ec:	947ff51e 	bne	r18,r17,10022c4 <_fwalk_reent+0x58>
 10022f0:	9cc00017 	ldw	r19,0(r19)
 10022f4:	983fed1e 	bne	r19,zero,10022ac <_fwalk_reent+0x40>
 10022f8:	1001bc80 	call	1001bc8 <__sfp_lock_release>
 10022fc:	b805883a 	mov	r2,r23
 1002300:	dfc00817 	ldw	ra,32(sp)
 1002304:	ddc00717 	ldw	r23,28(sp)
 1002308:	dd800617 	ldw	r22,24(sp)
 100230c:	dd400517 	ldw	r21,20(sp)
 1002310:	dd000417 	ldw	r20,16(sp)
 1002314:	dcc00317 	ldw	r19,12(sp)
 1002318:	dc800217 	ldw	r18,8(sp)
 100231c:	dc400117 	ldw	r17,4(sp)
 1002320:	dc000017 	ldw	r16,0(sp)
 1002324:	dec00904 	addi	sp,sp,36
 1002328:	f800283a 	ret
 100232c:	002f883a 	mov	r23,zero
 1002330:	003ff106 	br	10022f8 <_fwalk_reent+0x8c>

01002334 <_fwalk>:
 1002334:	defff804 	addi	sp,sp,-32
 1002338:	dcc00315 	stw	r19,12(sp)
 100233c:	24c0b804 	addi	r19,r4,736
 1002340:	dd400515 	stw	r21,20(sp)
 1002344:	dfc00715 	stw	ra,28(sp)
 1002348:	dd800615 	stw	r22,24(sp)
 100234c:	dd000415 	stw	r20,16(sp)
 1002350:	dc800215 	stw	r18,8(sp)
 1002354:	dc400115 	stw	r17,4(sp)
 1002358:	dc000015 	stw	r16,0(sp)
 100235c:	282b883a 	mov	r21,r5
 1002360:	1001bc40 	call	1001bc4 <__sfp_lock_acquire>
 1002364:	98001f26 	beq	r19,zero,10023e4 <_fwalk+0xb0>
 1002368:	002d883a 	mov	r22,zero
 100236c:	9c800117 	ldw	r18,4(r19)
 1002370:	9c000217 	ldw	r16,8(r19)
 1002374:	90bfffc4 	addi	r2,r18,-1
 1002378:	10000c16 	blt	r2,zero,10023ac <_fwalk+0x78>
 100237c:	0023883a 	mov	r17,zero
 1002380:	053fffc4 	movi	r20,-1
 1002384:	8080030f 	ldh	r2,12(r16)
 1002388:	8c400044 	addi	r17,r17,1
 100238c:	10000526 	beq	r2,zero,10023a4 <_fwalk+0x70>
 1002390:	8080038f 	ldh	r2,14(r16)
 1002394:	8009883a 	mov	r4,r16
 1002398:	15000226 	beq	r2,r20,10023a4 <_fwalk+0x70>
 100239c:	a83ee83a 	callr	r21
 10023a0:	b0acb03a 	or	r22,r22,r2
 10023a4:	84001704 	addi	r16,r16,92
 10023a8:	947ff61e 	bne	r18,r17,1002384 <_fwalk+0x50>
 10023ac:	9cc00017 	ldw	r19,0(r19)
 10023b0:	983fee1e 	bne	r19,zero,100236c <_fwalk+0x38>
 10023b4:	1001bc80 	call	1001bc8 <__sfp_lock_release>
 10023b8:	b005883a 	mov	r2,r22
 10023bc:	dfc00717 	ldw	ra,28(sp)
 10023c0:	dd800617 	ldw	r22,24(sp)
 10023c4:	dd400517 	ldw	r21,20(sp)
 10023c8:	dd000417 	ldw	r20,16(sp)
 10023cc:	dcc00317 	ldw	r19,12(sp)
 10023d0:	dc800217 	ldw	r18,8(sp)
 10023d4:	dc400117 	ldw	r17,4(sp)
 10023d8:	dc000017 	ldw	r16,0(sp)
 10023dc:	dec00804 	addi	sp,sp,32
 10023e0:	f800283a 	ret
 10023e4:	002d883a 	mov	r22,zero
 10023e8:	003ff206 	br	10023b4 <_fwalk+0x80>

010023ec <__smakebuf_r>:
 10023ec:	2880030b 	ldhu	r2,12(r5)
 10023f0:	deffed04 	addi	sp,sp,-76
 10023f4:	dc401015 	stw	r17,64(sp)
 10023f8:	1080008c 	andi	r2,r2,2
 10023fc:	dc000f15 	stw	r16,60(sp)
 1002400:	dfc01215 	stw	ra,72(sp)
 1002404:	dc801115 	stw	r18,68(sp)
 1002408:	2821883a 	mov	r16,r5
 100240c:	2023883a 	mov	r17,r4
 1002410:	10000b26 	beq	r2,zero,1002440 <__smakebuf_r+0x54>
 1002414:	28c010c4 	addi	r3,r5,67
 1002418:	00800044 	movi	r2,1
 100241c:	28800515 	stw	r2,20(r5)
 1002420:	28c00415 	stw	r3,16(r5)
 1002424:	28c00015 	stw	r3,0(r5)
 1002428:	dfc01217 	ldw	ra,72(sp)
 100242c:	dc801117 	ldw	r18,68(sp)
 1002430:	dc401017 	ldw	r17,64(sp)
 1002434:	dc000f17 	ldw	r16,60(sp)
 1002438:	dec01304 	addi	sp,sp,76
 100243c:	f800283a 	ret
 1002440:	2940038f 	ldh	r5,14(r5)
 1002444:	28002116 	blt	r5,zero,10024cc <__smakebuf_r+0xe0>
 1002448:	d80d883a 	mov	r6,sp
 100244c:	10029700 	call	1002970 <_fstat_r>
 1002450:	10001e16 	blt	r2,zero,10024cc <__smakebuf_r+0xe0>
 1002454:	d8800117 	ldw	r2,4(sp)
 1002458:	00e00014 	movui	r3,32768
 100245c:	113c000c 	andi	r4,r2,61440
 1002460:	20c03126 	beq	r4,r3,1002528 <__smakebuf_r+0x13c>
 1002464:	8080030b 	ldhu	r2,12(r16)
 1002468:	00c80004 	movi	r3,8192
 100246c:	10820014 	ori	r2,r2,2048
 1002470:	8080030d 	sth	r2,12(r16)
 1002474:	20c01e26 	beq	r4,r3,10024f0 <__smakebuf_r+0x104>
 1002478:	04810004 	movi	r18,1024
 100247c:	8809883a 	mov	r4,r17
 1002480:	900b883a 	mov	r5,r18
 1002484:	10007f80 	call	10007f8 <_malloc_r>
 1002488:	1009883a 	mov	r4,r2
 100248c:	10003126 	beq	r2,zero,1002554 <__smakebuf_r+0x168>
 1002490:	80c0030b 	ldhu	r3,12(r16)
 1002494:	00804034 	movhi	r2,256
 1002498:	10872e04 	addi	r2,r2,7352
 100249c:	88800f15 	stw	r2,60(r17)
 10024a0:	18c02014 	ori	r3,r3,128
 10024a4:	84800515 	stw	r18,20(r16)
 10024a8:	80c0030d 	sth	r3,12(r16)
 10024ac:	81000415 	stw	r4,16(r16)
 10024b0:	81000015 	stw	r4,0(r16)
 10024b4:	dfc01217 	ldw	ra,72(sp)
 10024b8:	dc801117 	ldw	r18,68(sp)
 10024bc:	dc401017 	ldw	r17,64(sp)
 10024c0:	dc000f17 	ldw	r16,60(sp)
 10024c4:	dec01304 	addi	sp,sp,76
 10024c8:	f800283a 	ret
 10024cc:	80c0030b 	ldhu	r3,12(r16)
 10024d0:	1880200c 	andi	r2,r3,128
 10024d4:	10000426 	beq	r2,zero,10024e8 <__smakebuf_r+0xfc>
 10024d8:	04801004 	movi	r18,64
 10024dc:	18820014 	ori	r2,r3,2048
 10024e0:	8080030d 	sth	r2,12(r16)
 10024e4:	003fe506 	br	100247c <__smakebuf_r+0x90>
 10024e8:	04810004 	movi	r18,1024
 10024ec:	003ffb06 	br	10024dc <__smakebuf_r+0xf0>
 10024f0:	8140038f 	ldh	r5,14(r16)
 10024f4:	8809883a 	mov	r4,r17
 10024f8:	10029e40 	call	10029e4 <_isatty_r>
 10024fc:	103fde26 	beq	r2,zero,1002478 <__smakebuf_r+0x8c>
 1002500:	8080030b 	ldhu	r2,12(r16)
 1002504:	80c010c4 	addi	r3,r16,67
 1002508:	04810004 	movi	r18,1024
 100250c:	10800054 	ori	r2,r2,1
 1002510:	8080030d 	sth	r2,12(r16)
 1002514:	00800044 	movi	r2,1
 1002518:	80c00415 	stw	r3,16(r16)
 100251c:	80800515 	stw	r2,20(r16)
 1002520:	80c00015 	stw	r3,0(r16)
 1002524:	003fd506 	br	100247c <__smakebuf_r+0x90>
 1002528:	80c00a17 	ldw	r3,40(r16)
 100252c:	00804034 	movhi	r2,256
 1002530:	10898804 	addi	r2,r2,9760
 1002534:	18bfcb1e 	bne	r3,r2,1002464 <__smakebuf_r+0x78>
 1002538:	8080030b 	ldhu	r2,12(r16)
 100253c:	00c10004 	movi	r3,1024
 1002540:	1825883a 	mov	r18,r3
 1002544:	10c4b03a 	or	r2,r2,r3
 1002548:	8080030d 	sth	r2,12(r16)
 100254c:	80c01315 	stw	r3,76(r16)
 1002550:	003fca06 	br	100247c <__smakebuf_r+0x90>
 1002554:	8100030b 	ldhu	r4,12(r16)
 1002558:	2080800c 	andi	r2,r4,512
 100255c:	103fb21e 	bne	r2,zero,1002428 <__smakebuf_r+0x3c>
 1002560:	80c010c4 	addi	r3,r16,67
 1002564:	21000094 	ori	r4,r4,2
 1002568:	00800044 	movi	r2,1
 100256c:	80800515 	stw	r2,20(r16)
 1002570:	8100030d 	sth	r4,12(r16)
 1002574:	80c00415 	stw	r3,16(r16)
 1002578:	80c00015 	stw	r3,0(r16)
 100257c:	003faa06 	br	1002428 <__smakebuf_r+0x3c>

01002580 <memset>:
 1002580:	008000c4 	movi	r2,3
 1002584:	29403fcc 	andi	r5,r5,255
 1002588:	2007883a 	mov	r3,r4
 100258c:	1180022e 	bgeu	r2,r6,1002598 <memset+0x18>
 1002590:	2084703a 	and	r2,r4,r2
 1002594:	10000826 	beq	r2,zero,10025b8 <memset+0x38>
 1002598:	30000526 	beq	r6,zero,10025b0 <memset+0x30>
 100259c:	2805883a 	mov	r2,r5
 10025a0:	30cd883a 	add	r6,r6,r3
 10025a4:	18800005 	stb	r2,0(r3)
 10025a8:	18c00044 	addi	r3,r3,1
 10025ac:	19bffd1e 	bne	r3,r6,10025a4 <memset+0x24>
 10025b0:	2005883a 	mov	r2,r4
 10025b4:	f800283a 	ret
 10025b8:	2804923a 	slli	r2,r5,8
 10025bc:	020003c4 	movi	r8,15
 10025c0:	200f883a 	mov	r7,r4
 10025c4:	2884b03a 	or	r2,r5,r2
 10025c8:	1006943a 	slli	r3,r2,16
 10025cc:	10c6b03a 	or	r3,r2,r3
 10025d0:	41800a2e 	bgeu	r8,r6,10025fc <memset+0x7c>
 10025d4:	4005883a 	mov	r2,r8
 10025d8:	31bffc04 	addi	r6,r6,-16
 10025dc:	38c00015 	stw	r3,0(r7)
 10025e0:	38c00115 	stw	r3,4(r7)
 10025e4:	38c00215 	stw	r3,8(r7)
 10025e8:	38c00315 	stw	r3,12(r7)
 10025ec:	39c00404 	addi	r7,r7,16
 10025f0:	11bff936 	bltu	r2,r6,10025d8 <memset+0x58>
 10025f4:	008000c4 	movi	r2,3
 10025f8:	1180052e 	bgeu	r2,r6,1002610 <memset+0x90>
 10025fc:	31bfff04 	addi	r6,r6,-4
 1002600:	008000c4 	movi	r2,3
 1002604:	38c00015 	stw	r3,0(r7)
 1002608:	39c00104 	addi	r7,r7,4
 100260c:	11bffb36 	bltu	r2,r6,10025fc <memset+0x7c>
 1002610:	3807883a 	mov	r3,r7
 1002614:	003fe006 	br	1002598 <memset+0x18>

01002618 <__sclose>:
 1002618:	2940038f 	ldh	r5,14(r5)
 100261c:	10027dc1 	jmpi	10027dc <_close_r>

01002620 <__sseek>:
 1002620:	defffe04 	addi	sp,sp,-8
 1002624:	dc000015 	stw	r16,0(sp)
 1002628:	2821883a 	mov	r16,r5
 100262c:	2940038f 	ldh	r5,14(r5)
 1002630:	dfc00115 	stw	ra,4(sp)
 1002634:	1002a540 	call	1002a54 <_lseek_r>
 1002638:	1007883a 	mov	r3,r2
 100263c:	00bfffc4 	movi	r2,-1
 1002640:	18800926 	beq	r3,r2,1002668 <__sseek+0x48>
 1002644:	8080030b 	ldhu	r2,12(r16)
 1002648:	80c01415 	stw	r3,80(r16)
 100264c:	10840014 	ori	r2,r2,4096
 1002650:	8080030d 	sth	r2,12(r16)
 1002654:	1805883a 	mov	r2,r3
 1002658:	dfc00117 	ldw	ra,4(sp)
 100265c:	dc000017 	ldw	r16,0(sp)
 1002660:	dec00204 	addi	sp,sp,8
 1002664:	f800283a 	ret
 1002668:	8080030b 	ldhu	r2,12(r16)
 100266c:	10bbffcc 	andi	r2,r2,61439
 1002670:	8080030d 	sth	r2,12(r16)
 1002674:	1805883a 	mov	r2,r3
 1002678:	dfc00117 	ldw	ra,4(sp)
 100267c:	dc000017 	ldw	r16,0(sp)
 1002680:	dec00204 	addi	sp,sp,8
 1002684:	f800283a 	ret

01002688 <__swrite>:
 1002688:	2880030b 	ldhu	r2,12(r5)
 100268c:	defffb04 	addi	sp,sp,-20
 1002690:	dcc00315 	stw	r19,12(sp)
 1002694:	1080400c 	andi	r2,r2,256
 1002698:	dc800215 	stw	r18,8(sp)
 100269c:	dc400115 	stw	r17,4(sp)
 10026a0:	dc000015 	stw	r16,0(sp)
 10026a4:	3027883a 	mov	r19,r6
 10026a8:	3825883a 	mov	r18,r7
 10026ac:	dfc00415 	stw	ra,16(sp)
 10026b0:	2821883a 	mov	r16,r5
 10026b4:	000d883a 	mov	r6,zero
 10026b8:	01c00084 	movi	r7,2
 10026bc:	2023883a 	mov	r17,r4
 10026c0:	10000226 	beq	r2,zero,10026cc <__swrite+0x44>
 10026c4:	2940038f 	ldh	r5,14(r5)
 10026c8:	1002a540 	call	1002a54 <_lseek_r>
 10026cc:	8080030b 	ldhu	r2,12(r16)
 10026d0:	8140038f 	ldh	r5,14(r16)
 10026d4:	8809883a 	mov	r4,r17
 10026d8:	10bbffcc 	andi	r2,r2,61439
 10026dc:	980d883a 	mov	r6,r19
 10026e0:	900f883a 	mov	r7,r18
 10026e4:	8080030d 	sth	r2,12(r16)
 10026e8:	dfc00417 	ldw	ra,16(sp)
 10026ec:	dcc00317 	ldw	r19,12(sp)
 10026f0:	dc800217 	ldw	r18,8(sp)
 10026f4:	dc400117 	ldw	r17,4(sp)
 10026f8:	dc000017 	ldw	r16,0(sp)
 10026fc:	dec00504 	addi	sp,sp,20
 1002700:	10027641 	jmpi	1002764 <_write_r>

01002704 <__sread>:
 1002704:	defffe04 	addi	sp,sp,-8
 1002708:	dc000015 	stw	r16,0(sp)
 100270c:	2821883a 	mov	r16,r5
 1002710:	2940038f 	ldh	r5,14(r5)
 1002714:	dfc00115 	stw	ra,4(sp)
 1002718:	1002acc0 	call	1002acc <_read_r>
 100271c:	1007883a 	mov	r3,r2
 1002720:	10000816 	blt	r2,zero,1002744 <__sread+0x40>
 1002724:	80801417 	ldw	r2,80(r16)
 1002728:	10c5883a 	add	r2,r2,r3
 100272c:	80801415 	stw	r2,80(r16)
 1002730:	1805883a 	mov	r2,r3
 1002734:	dfc00117 	ldw	ra,4(sp)
 1002738:	dc000017 	ldw	r16,0(sp)
 100273c:	dec00204 	addi	sp,sp,8
 1002740:	f800283a 	ret
 1002744:	8080030b 	ldhu	r2,12(r16)
 1002748:	10bbffcc 	andi	r2,r2,61439
 100274c:	8080030d 	sth	r2,12(r16)
 1002750:	1805883a 	mov	r2,r3
 1002754:	dfc00117 	ldw	ra,4(sp)
 1002758:	dc000017 	ldw	r16,0(sp)
 100275c:	dec00204 	addi	sp,sp,8
 1002760:	f800283a 	ret

01002764 <_write_r>:
 1002764:	defffd04 	addi	sp,sp,-12
 1002768:	dc000015 	stw	r16,0(sp)
 100276c:	04004074 	movhi	r16,257
 1002770:	84247404 	addi	r16,r16,-28208
 1002774:	dc400115 	stw	r17,4(sp)
 1002778:	80000015 	stw	zero,0(r16)
 100277c:	2023883a 	mov	r17,r4
 1002780:	2809883a 	mov	r4,r5
 1002784:	300b883a 	mov	r5,r6
 1002788:	380d883a 	mov	r6,r7
 100278c:	dfc00215 	stw	ra,8(sp)
 1002790:	10034a40 	call	10034a4 <write>
 1002794:	1007883a 	mov	r3,r2
 1002798:	00bfffc4 	movi	r2,-1
 100279c:	18800626 	beq	r3,r2,10027b8 <_write_r+0x54>
 10027a0:	1805883a 	mov	r2,r3
 10027a4:	dfc00217 	ldw	ra,8(sp)
 10027a8:	dc400117 	ldw	r17,4(sp)
 10027ac:	dc000017 	ldw	r16,0(sp)
 10027b0:	dec00304 	addi	sp,sp,12
 10027b4:	f800283a 	ret
 10027b8:	80800017 	ldw	r2,0(r16)
 10027bc:	103ff826 	beq	r2,zero,10027a0 <_write_r+0x3c>
 10027c0:	88800015 	stw	r2,0(r17)
 10027c4:	1805883a 	mov	r2,r3
 10027c8:	dfc00217 	ldw	ra,8(sp)
 10027cc:	dc400117 	ldw	r17,4(sp)
 10027d0:	dc000017 	ldw	r16,0(sp)
 10027d4:	dec00304 	addi	sp,sp,12
 10027d8:	f800283a 	ret

010027dc <_close_r>:
 10027dc:	defffd04 	addi	sp,sp,-12
 10027e0:	dc000015 	stw	r16,0(sp)
 10027e4:	04004074 	movhi	r16,257
 10027e8:	84247404 	addi	r16,r16,-28208
 10027ec:	dc400115 	stw	r17,4(sp)
 10027f0:	80000015 	stw	zero,0(r16)
 10027f4:	2023883a 	mov	r17,r4
 10027f8:	2809883a 	mov	r4,r5
 10027fc:	dfc00215 	stw	ra,8(sp)
 1002800:	1002b440 	call	1002b44 <close>
 1002804:	1007883a 	mov	r3,r2
 1002808:	00bfffc4 	movi	r2,-1
 100280c:	18800626 	beq	r3,r2,1002828 <_close_r+0x4c>
 1002810:	1805883a 	mov	r2,r3
 1002814:	dfc00217 	ldw	ra,8(sp)
 1002818:	dc400117 	ldw	r17,4(sp)
 100281c:	dc000017 	ldw	r16,0(sp)
 1002820:	dec00304 	addi	sp,sp,12
 1002824:	f800283a 	ret
 1002828:	80800017 	ldw	r2,0(r16)
 100282c:	103ff826 	beq	r2,zero,1002810 <_close_r+0x34>
 1002830:	88800015 	stw	r2,0(r17)
 1002834:	1805883a 	mov	r2,r3
 1002838:	dfc00217 	ldw	ra,8(sp)
 100283c:	dc400117 	ldw	r17,4(sp)
 1002840:	dc000017 	ldw	r16,0(sp)
 1002844:	dec00304 	addi	sp,sp,12
 1002848:	f800283a 	ret

0100284c <_fclose_r>:
 100284c:	defffc04 	addi	sp,sp,-16
 1002850:	dc400115 	stw	r17,4(sp)
 1002854:	dc000015 	stw	r16,0(sp)
 1002858:	dfc00315 	stw	ra,12(sp)
 100285c:	dc800215 	stw	r18,8(sp)
 1002860:	2821883a 	mov	r16,r5
 1002864:	2023883a 	mov	r17,r4
 1002868:	28002926 	beq	r5,zero,1002910 <_fclose_r+0xc4>
 100286c:	1001bc40 	call	1001bc4 <__sfp_lock_acquire>
 1002870:	88000226 	beq	r17,zero,100287c <_fclose_r+0x30>
 1002874:	88800e17 	ldw	r2,56(r17)
 1002878:	10002d26 	beq	r2,zero,1002930 <_fclose_r+0xe4>
 100287c:	8080030f 	ldh	r2,12(r16)
 1002880:	10002226 	beq	r2,zero,100290c <_fclose_r+0xc0>
 1002884:	8809883a 	mov	r4,r17
 1002888:	800b883a 	mov	r5,r16
 100288c:	100193c0 	call	100193c <_fflush_r>
 1002890:	1025883a 	mov	r18,r2
 1002894:	80800b17 	ldw	r2,44(r16)
 1002898:	10000426 	beq	r2,zero,10028ac <_fclose_r+0x60>
 100289c:	81400717 	ldw	r5,28(r16)
 10028a0:	8809883a 	mov	r4,r17
 10028a4:	103ee83a 	callr	r2
 10028a8:	10002a16 	blt	r2,zero,1002954 <_fclose_r+0x108>
 10028ac:	8080030b 	ldhu	r2,12(r16)
 10028b0:	1080200c 	andi	r2,r2,128
 10028b4:	1000231e 	bne	r2,zero,1002944 <_fclose_r+0xf8>
 10028b8:	81400c17 	ldw	r5,48(r16)
 10028bc:	28000526 	beq	r5,zero,10028d4 <_fclose_r+0x88>
 10028c0:	80801004 	addi	r2,r16,64
 10028c4:	28800226 	beq	r5,r2,10028d0 <_fclose_r+0x84>
 10028c8:	8809883a 	mov	r4,r17
 10028cc:	1001f580 	call	1001f58 <_free_r>
 10028d0:	80000c15 	stw	zero,48(r16)
 10028d4:	81401117 	ldw	r5,68(r16)
 10028d8:	28000326 	beq	r5,zero,10028e8 <_fclose_r+0x9c>
 10028dc:	8809883a 	mov	r4,r17
 10028e0:	1001f580 	call	1001f58 <_free_r>
 10028e4:	80001115 	stw	zero,68(r16)
 10028e8:	8000030d 	sth	zero,12(r16)
 10028ec:	1001bc80 	call	1001bc8 <__sfp_lock_release>
 10028f0:	9005883a 	mov	r2,r18
 10028f4:	dfc00317 	ldw	ra,12(sp)
 10028f8:	dc800217 	ldw	r18,8(sp)
 10028fc:	dc400117 	ldw	r17,4(sp)
 1002900:	dc000017 	ldw	r16,0(sp)
 1002904:	dec00404 	addi	sp,sp,16
 1002908:	f800283a 	ret
 100290c:	1001bc80 	call	1001bc8 <__sfp_lock_release>
 1002910:	0025883a 	mov	r18,zero
 1002914:	9005883a 	mov	r2,r18
 1002918:	dfc00317 	ldw	ra,12(sp)
 100291c:	dc800217 	ldw	r18,8(sp)
 1002920:	dc400117 	ldw	r17,4(sp)
 1002924:	dc000017 	ldw	r16,0(sp)
 1002928:	dec00404 	addi	sp,sp,16
 100292c:	f800283a 	ret
 1002930:	8809883a 	mov	r4,r17
 1002934:	1001bd40 	call	1001bd4 <__sinit>
 1002938:	8080030f 	ldh	r2,12(r16)
 100293c:	103fd11e 	bne	r2,zero,1002884 <_fclose_r+0x38>
 1002940:	003ff206 	br	100290c <_fclose_r+0xc0>
 1002944:	81400417 	ldw	r5,16(r16)
 1002948:	8809883a 	mov	r4,r17
 100294c:	1001f580 	call	1001f58 <_free_r>
 1002950:	003fd906 	br	10028b8 <_fclose_r+0x6c>
 1002954:	04bfffc4 	movi	r18,-1
 1002958:	003fd406 	br	10028ac <_fclose_r+0x60>

0100295c <fclose>:
 100295c:	00804034 	movhi	r2,256
 1002960:	109daa04 	addi	r2,r2,30376
 1002964:	200b883a 	mov	r5,r4
 1002968:	11000017 	ldw	r4,0(r2)
 100296c:	100284c1 	jmpi	100284c <_fclose_r>

01002970 <_fstat_r>:
 1002970:	defffd04 	addi	sp,sp,-12
 1002974:	dc000015 	stw	r16,0(sp)
 1002978:	04004074 	movhi	r16,257
 100297c:	84247404 	addi	r16,r16,-28208
 1002980:	dc400115 	stw	r17,4(sp)
 1002984:	80000015 	stw	zero,0(r16)
 1002988:	2023883a 	mov	r17,r4
 100298c:	2809883a 	mov	r4,r5
 1002990:	300b883a 	mov	r5,r6
 1002994:	dfc00215 	stw	ra,8(sp)
 1002998:	1002ccc0 	call	1002ccc <fstat>
 100299c:	1007883a 	mov	r3,r2
 10029a0:	00bfffc4 	movi	r2,-1
 10029a4:	18800626 	beq	r3,r2,10029c0 <_fstat_r+0x50>
 10029a8:	1805883a 	mov	r2,r3
 10029ac:	dfc00217 	ldw	ra,8(sp)
 10029b0:	dc400117 	ldw	r17,4(sp)
 10029b4:	dc000017 	ldw	r16,0(sp)
 10029b8:	dec00304 	addi	sp,sp,12
 10029bc:	f800283a 	ret
 10029c0:	80800017 	ldw	r2,0(r16)
 10029c4:	103ff826 	beq	r2,zero,10029a8 <_fstat_r+0x38>
 10029c8:	88800015 	stw	r2,0(r17)
 10029cc:	1805883a 	mov	r2,r3
 10029d0:	dfc00217 	ldw	ra,8(sp)
 10029d4:	dc400117 	ldw	r17,4(sp)
 10029d8:	dc000017 	ldw	r16,0(sp)
 10029dc:	dec00304 	addi	sp,sp,12
 10029e0:	f800283a 	ret

010029e4 <_isatty_r>:
 10029e4:	defffd04 	addi	sp,sp,-12
 10029e8:	dc000015 	stw	r16,0(sp)
 10029ec:	04004074 	movhi	r16,257
 10029f0:	84247404 	addi	r16,r16,-28208
 10029f4:	dc400115 	stw	r17,4(sp)
 10029f8:	80000015 	stw	zero,0(r16)
 10029fc:	2023883a 	mov	r17,r4
 1002a00:	2809883a 	mov	r4,r5
 1002a04:	dfc00215 	stw	ra,8(sp)
 1002a08:	1002e000 	call	1002e00 <isatty>
 1002a0c:	1007883a 	mov	r3,r2
 1002a10:	00bfffc4 	movi	r2,-1
 1002a14:	18800626 	beq	r3,r2,1002a30 <_isatty_r+0x4c>
 1002a18:	1805883a 	mov	r2,r3
 1002a1c:	dfc00217 	ldw	ra,8(sp)
 1002a20:	dc400117 	ldw	r17,4(sp)
 1002a24:	dc000017 	ldw	r16,0(sp)
 1002a28:	dec00304 	addi	sp,sp,12
 1002a2c:	f800283a 	ret
 1002a30:	80800017 	ldw	r2,0(r16)
 1002a34:	103ff826 	beq	r2,zero,1002a18 <_isatty_r+0x34>
 1002a38:	88800015 	stw	r2,0(r17)
 1002a3c:	1805883a 	mov	r2,r3
 1002a40:	dfc00217 	ldw	ra,8(sp)
 1002a44:	dc400117 	ldw	r17,4(sp)
 1002a48:	dc000017 	ldw	r16,0(sp)
 1002a4c:	dec00304 	addi	sp,sp,12
 1002a50:	f800283a 	ret

01002a54 <_lseek_r>:
 1002a54:	defffd04 	addi	sp,sp,-12
 1002a58:	dc000015 	stw	r16,0(sp)
 1002a5c:	04004074 	movhi	r16,257
 1002a60:	84247404 	addi	r16,r16,-28208
 1002a64:	dc400115 	stw	r17,4(sp)
 1002a68:	80000015 	stw	zero,0(r16)
 1002a6c:	2023883a 	mov	r17,r4
 1002a70:	2809883a 	mov	r4,r5
 1002a74:	300b883a 	mov	r5,r6
 1002a78:	380d883a 	mov	r6,r7
 1002a7c:	dfc00215 	stw	ra,8(sp)
 1002a80:	100300c0 	call	100300c <lseek>
 1002a84:	1007883a 	mov	r3,r2
 1002a88:	00bfffc4 	movi	r2,-1
 1002a8c:	18800626 	beq	r3,r2,1002aa8 <_lseek_r+0x54>
 1002a90:	1805883a 	mov	r2,r3
 1002a94:	dfc00217 	ldw	ra,8(sp)
 1002a98:	dc400117 	ldw	r17,4(sp)
 1002a9c:	dc000017 	ldw	r16,0(sp)
 1002aa0:	dec00304 	addi	sp,sp,12
 1002aa4:	f800283a 	ret
 1002aa8:	80800017 	ldw	r2,0(r16)
 1002aac:	103ff826 	beq	r2,zero,1002a90 <_lseek_r+0x3c>
 1002ab0:	88800015 	stw	r2,0(r17)
 1002ab4:	1805883a 	mov	r2,r3
 1002ab8:	dfc00217 	ldw	ra,8(sp)
 1002abc:	dc400117 	ldw	r17,4(sp)
 1002ac0:	dc000017 	ldw	r16,0(sp)
 1002ac4:	dec00304 	addi	sp,sp,12
 1002ac8:	f800283a 	ret

01002acc <_read_r>:
 1002acc:	defffd04 	addi	sp,sp,-12
 1002ad0:	dc000015 	stw	r16,0(sp)
 1002ad4:	04004074 	movhi	r16,257
 1002ad8:	84247404 	addi	r16,r16,-28208
 1002adc:	dc400115 	stw	r17,4(sp)
 1002ae0:	80000015 	stw	zero,0(r16)
 1002ae4:	2023883a 	mov	r17,r4
 1002ae8:	2809883a 	mov	r4,r5
 1002aec:	300b883a 	mov	r5,r6
 1002af0:	380d883a 	mov	r6,r7
 1002af4:	dfc00215 	stw	ra,8(sp)
 1002af8:	10032080 	call	1003208 <read>
 1002afc:	1007883a 	mov	r3,r2
 1002b00:	00bfffc4 	movi	r2,-1
 1002b04:	18800626 	beq	r3,r2,1002b20 <_read_r+0x54>
 1002b08:	1805883a 	mov	r2,r3
 1002b0c:	dfc00217 	ldw	ra,8(sp)
 1002b10:	dc400117 	ldw	r17,4(sp)
 1002b14:	dc000017 	ldw	r16,0(sp)
 1002b18:	dec00304 	addi	sp,sp,12
 1002b1c:	f800283a 	ret
 1002b20:	80800017 	ldw	r2,0(r16)
 1002b24:	103ff826 	beq	r2,zero,1002b08 <_read_r+0x3c>
 1002b28:	88800015 	stw	r2,0(r17)
 1002b2c:	1805883a 	mov	r2,r3
 1002b30:	dfc00217 	ldw	ra,8(sp)
 1002b34:	dc400117 	ldw	r17,4(sp)
 1002b38:	dc000017 	ldw	r16,0(sp)
 1002b3c:	dec00304 	addi	sp,sp,12
 1002b40:	f800283a 	ret

01002b44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1002b44:	defff804 	addi	sp,sp,-32
 1002b48:	dfc00715 	stw	ra,28(sp)
 1002b4c:	df000615 	stw	fp,24(sp)
 1002b50:	df000604 	addi	fp,sp,24
 1002b54:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1002b58:	e0bffc17 	ldw	r2,-16(fp)
 1002b5c:	1004803a 	cmplt	r2,r2,zero
 1002b60:	1000081e 	bne	r2,zero,1002b84 <close+0x40>
 1002b64:	e0bffc17 	ldw	r2,-16(fp)
 1002b68:	10800324 	muli	r2,r2,12
 1002b6c:	1007883a 	mov	r3,r2
 1002b70:	00804034 	movhi	r2,256
 1002b74:	10990b04 	addi	r2,r2,25644
 1002b78:	1887883a 	add	r3,r3,r2
 1002b7c:	e0ffff15 	stw	r3,-4(fp)
 1002b80:	00000106 	br	1002b88 <close+0x44>
 1002b84:	e03fff15 	stw	zero,-4(fp)
 1002b88:	e0bfff17 	ldw	r2,-4(fp)
 1002b8c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1002b90:	e0bffb17 	ldw	r2,-20(fp)
 1002b94:	1005003a 	cmpeq	r2,r2,zero
 1002b98:	10001d1e 	bne	r2,zero,1002c10 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002b9c:	e0bffb17 	ldw	r2,-20(fp)
 1002ba0:	10800017 	ldw	r2,0(r2)
 1002ba4:	10800417 	ldw	r2,16(r2)
 1002ba8:	1005003a 	cmpeq	r2,r2,zero
 1002bac:	1000071e 	bne	r2,zero,1002bcc <close+0x88>
 1002bb0:	e0bffb17 	ldw	r2,-20(fp)
 1002bb4:	10800017 	ldw	r2,0(r2)
 1002bb8:	10800417 	ldw	r2,16(r2)
 1002bbc:	e13ffb17 	ldw	r4,-20(fp)
 1002bc0:	103ee83a 	callr	r2
 1002bc4:	e0bffe15 	stw	r2,-8(fp)
 1002bc8:	00000106 	br	1002bd0 <close+0x8c>
 1002bcc:	e03ffe15 	stw	zero,-8(fp)
 1002bd0:	e0bffe17 	ldw	r2,-8(fp)
 1002bd4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1002bd8:	e13ffc17 	ldw	r4,-16(fp)
 1002bdc:	10033880 	call	1003388 <alt_release_fd>
    if (rval < 0)
 1002be0:	e0bffa17 	ldw	r2,-24(fp)
 1002be4:	1004403a 	cmpge	r2,r2,zero
 1002be8:	1000071e 	bne	r2,zero,1002c08 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1002bec:	1002c400 	call	1002c40 <alt_get_errno>
 1002bf0:	e0fffa17 	ldw	r3,-24(fp)
 1002bf4:	00c7c83a 	sub	r3,zero,r3
 1002bf8:	10c00015 	stw	r3,0(r2)
      return -1;
 1002bfc:	00bfffc4 	movi	r2,-1
 1002c00:	e0bffd15 	stw	r2,-12(fp)
 1002c04:	00000806 	br	1002c28 <close+0xe4>
    }
    return 0;
 1002c08:	e03ffd15 	stw	zero,-12(fp)
 1002c0c:	00000606 	br	1002c28 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002c10:	1002c400 	call	1002c40 <alt_get_errno>
 1002c14:	1007883a 	mov	r3,r2
 1002c18:	00801444 	movi	r2,81
 1002c1c:	18800015 	stw	r2,0(r3)
    return -1;
 1002c20:	00bfffc4 	movi	r2,-1
 1002c24:	e0bffd15 	stw	r2,-12(fp)
 1002c28:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1002c2c:	e037883a 	mov	sp,fp
 1002c30:	dfc00117 	ldw	ra,4(sp)
 1002c34:	df000017 	ldw	fp,0(sp)
 1002c38:	dec00204 	addi	sp,sp,8
 1002c3c:	f800283a 	ret

01002c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002c40:	defffd04 	addi	sp,sp,-12
 1002c44:	dfc00215 	stw	ra,8(sp)
 1002c48:	df000115 	stw	fp,4(sp)
 1002c4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002c50:	00804034 	movhi	r2,256
 1002c54:	109db304 	addi	r2,r2,30412
 1002c58:	10800017 	ldw	r2,0(r2)
 1002c5c:	1005003a 	cmpeq	r2,r2,zero
 1002c60:	1000061e 	bne	r2,zero,1002c7c <alt_get_errno+0x3c>
 1002c64:	00804034 	movhi	r2,256
 1002c68:	109db304 	addi	r2,r2,30412
 1002c6c:	10800017 	ldw	r2,0(r2)
 1002c70:	103ee83a 	callr	r2
 1002c74:	e0bfff15 	stw	r2,-4(fp)
 1002c78:	00000306 	br	1002c88 <alt_get_errno+0x48>
 1002c7c:	00804074 	movhi	r2,257
 1002c80:	10a47404 	addi	r2,r2,-28208
 1002c84:	e0bfff15 	stw	r2,-4(fp)
 1002c88:	e0bfff17 	ldw	r2,-4(fp)
}
 1002c8c:	e037883a 	mov	sp,fp
 1002c90:	dfc00117 	ldw	ra,4(sp)
 1002c94:	df000017 	ldw	fp,0(sp)
 1002c98:	dec00204 	addi	sp,sp,8
 1002c9c:	f800283a 	ret

01002ca0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002ca0:	defffc04 	addi	sp,sp,-16
 1002ca4:	df000315 	stw	fp,12(sp)
 1002ca8:	df000304 	addi	fp,sp,12
 1002cac:	e13ffd15 	stw	r4,-12(fp)
 1002cb0:	e17ffe15 	stw	r5,-8(fp)
 1002cb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002cb8:	e0bfff17 	ldw	r2,-4(fp)
}
 1002cbc:	e037883a 	mov	sp,fp
 1002cc0:	df000017 	ldw	fp,0(sp)
 1002cc4:	dec00104 	addi	sp,sp,4
 1002cc8:	f800283a 	ret

01002ccc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1002ccc:	defff904 	addi	sp,sp,-28
 1002cd0:	dfc00615 	stw	ra,24(sp)
 1002cd4:	df000515 	stw	fp,20(sp)
 1002cd8:	df000504 	addi	fp,sp,20
 1002cdc:	e13ffc15 	stw	r4,-16(fp)
 1002ce0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002ce4:	e0bffc17 	ldw	r2,-16(fp)
 1002ce8:	1004803a 	cmplt	r2,r2,zero
 1002cec:	1000081e 	bne	r2,zero,1002d10 <fstat+0x44>
 1002cf0:	e0bffc17 	ldw	r2,-16(fp)
 1002cf4:	10800324 	muli	r2,r2,12
 1002cf8:	1007883a 	mov	r3,r2
 1002cfc:	00804034 	movhi	r2,256
 1002d00:	10990b04 	addi	r2,r2,25644
 1002d04:	1887883a 	add	r3,r3,r2
 1002d08:	e0ffff15 	stw	r3,-4(fp)
 1002d0c:	00000106 	br	1002d14 <fstat+0x48>
 1002d10:	e03fff15 	stw	zero,-4(fp)
 1002d14:	e0bfff17 	ldw	r2,-4(fp)
 1002d18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1002d1c:	e0bffb17 	ldw	r2,-20(fp)
 1002d20:	1005003a 	cmpeq	r2,r2,zero
 1002d24:	1000121e 	bne	r2,zero,1002d70 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1002d28:	e0bffb17 	ldw	r2,-20(fp)
 1002d2c:	10800017 	ldw	r2,0(r2)
 1002d30:	10800817 	ldw	r2,32(r2)
 1002d34:	1005003a 	cmpeq	r2,r2,zero
 1002d38:	1000081e 	bne	r2,zero,1002d5c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 1002d3c:	e0bffb17 	ldw	r2,-20(fp)
 1002d40:	10800017 	ldw	r2,0(r2)
 1002d44:	10800817 	ldw	r2,32(r2)
 1002d48:	e13ffb17 	ldw	r4,-20(fp)
 1002d4c:	e17ffd17 	ldw	r5,-12(fp)
 1002d50:	103ee83a 	callr	r2
 1002d54:	e0bffe15 	stw	r2,-8(fp)
 1002d58:	00000b06 	br	1002d88 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1002d5c:	e0fffd17 	ldw	r3,-12(fp)
 1002d60:	00880004 	movi	r2,8192
 1002d64:	18800115 	stw	r2,4(r3)
      return 0;
 1002d68:	e03ffe15 	stw	zero,-8(fp)
 1002d6c:	00000606 	br	1002d88 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002d70:	1002da00 	call	1002da0 <alt_get_errno>
 1002d74:	1007883a 	mov	r3,r2
 1002d78:	00801444 	movi	r2,81
 1002d7c:	18800015 	stw	r2,0(r3)
    return -1;
 1002d80:	00bfffc4 	movi	r2,-1
 1002d84:	e0bffe15 	stw	r2,-8(fp)
 1002d88:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002d8c:	e037883a 	mov	sp,fp
 1002d90:	dfc00117 	ldw	ra,4(sp)
 1002d94:	df000017 	ldw	fp,0(sp)
 1002d98:	dec00204 	addi	sp,sp,8
 1002d9c:	f800283a 	ret

01002da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002da0:	defffd04 	addi	sp,sp,-12
 1002da4:	dfc00215 	stw	ra,8(sp)
 1002da8:	df000115 	stw	fp,4(sp)
 1002dac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002db0:	00804034 	movhi	r2,256
 1002db4:	109db304 	addi	r2,r2,30412
 1002db8:	10800017 	ldw	r2,0(r2)
 1002dbc:	1005003a 	cmpeq	r2,r2,zero
 1002dc0:	1000061e 	bne	r2,zero,1002ddc <alt_get_errno+0x3c>
 1002dc4:	00804034 	movhi	r2,256
 1002dc8:	109db304 	addi	r2,r2,30412
 1002dcc:	10800017 	ldw	r2,0(r2)
 1002dd0:	103ee83a 	callr	r2
 1002dd4:	e0bfff15 	stw	r2,-4(fp)
 1002dd8:	00000306 	br	1002de8 <alt_get_errno+0x48>
 1002ddc:	00804074 	movhi	r2,257
 1002de0:	10a47404 	addi	r2,r2,-28208
 1002de4:	e0bfff15 	stw	r2,-4(fp)
 1002de8:	e0bfff17 	ldw	r2,-4(fp)
}
 1002dec:	e037883a 	mov	sp,fp
 1002df0:	dfc00117 	ldw	ra,4(sp)
 1002df4:	df000017 	ldw	fp,0(sp)
 1002df8:	dec00204 	addi	sp,sp,8
 1002dfc:	f800283a 	ret

01002e00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1002e00:	deffeb04 	addi	sp,sp,-84
 1002e04:	dfc01415 	stw	ra,80(sp)
 1002e08:	df001315 	stw	fp,76(sp)
 1002e0c:	df001304 	addi	fp,sp,76
 1002e10:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002e14:	e0bffd17 	ldw	r2,-12(fp)
 1002e18:	1004803a 	cmplt	r2,r2,zero
 1002e1c:	1000081e 	bne	r2,zero,1002e40 <isatty+0x40>
 1002e20:	e0bffd17 	ldw	r2,-12(fp)
 1002e24:	10800324 	muli	r2,r2,12
 1002e28:	1007883a 	mov	r3,r2
 1002e2c:	00804034 	movhi	r2,256
 1002e30:	10990b04 	addi	r2,r2,25644
 1002e34:	1887883a 	add	r3,r3,r2
 1002e38:	e0ffff15 	stw	r3,-4(fp)
 1002e3c:	00000106 	br	1002e44 <isatty+0x44>
 1002e40:	e03fff15 	stw	zero,-4(fp)
 1002e44:	e0bfff17 	ldw	r2,-4(fp)
 1002e48:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1002e4c:	e0bfed17 	ldw	r2,-76(fp)
 1002e50:	1005003a 	cmpeq	r2,r2,zero
 1002e54:	10000f1e 	bne	r2,zero,1002e94 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1002e58:	e0bfed17 	ldw	r2,-76(fp)
 1002e5c:	10800017 	ldw	r2,0(r2)
 1002e60:	10800817 	ldw	r2,32(r2)
 1002e64:	1004c03a 	cmpne	r2,r2,zero
 1002e68:	1000031e 	bne	r2,zero,1002e78 <isatty+0x78>
    {
      return 1;
 1002e6c:	00800044 	movi	r2,1
 1002e70:	e0bffe15 	stw	r2,-8(fp)
 1002e74:	00000c06 	br	1002ea8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1002e78:	e17fee04 	addi	r5,fp,-72
 1002e7c:	e13ffd17 	ldw	r4,-12(fp)
 1002e80:	1002ccc0 	call	1002ccc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1002e84:	e0bfef17 	ldw	r2,-68(fp)
 1002e88:	10880020 	cmpeqi	r2,r2,8192
 1002e8c:	e0bffe15 	stw	r2,-8(fp)
 1002e90:	00000506 	br	1002ea8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002e94:	1002ec00 	call	1002ec0 <alt_get_errno>
 1002e98:	1007883a 	mov	r3,r2
 1002e9c:	00801444 	movi	r2,81
 1002ea0:	18800015 	stw	r2,0(r3)
    return 0;
 1002ea4:	e03ffe15 	stw	zero,-8(fp)
 1002ea8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002eac:	e037883a 	mov	sp,fp
 1002eb0:	dfc00117 	ldw	ra,4(sp)
 1002eb4:	df000017 	ldw	fp,0(sp)
 1002eb8:	dec00204 	addi	sp,sp,8
 1002ebc:	f800283a 	ret

01002ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002ec0:	defffd04 	addi	sp,sp,-12
 1002ec4:	dfc00215 	stw	ra,8(sp)
 1002ec8:	df000115 	stw	fp,4(sp)
 1002ecc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002ed0:	00804034 	movhi	r2,256
 1002ed4:	109db304 	addi	r2,r2,30412
 1002ed8:	10800017 	ldw	r2,0(r2)
 1002edc:	1005003a 	cmpeq	r2,r2,zero
 1002ee0:	1000061e 	bne	r2,zero,1002efc <alt_get_errno+0x3c>
 1002ee4:	00804034 	movhi	r2,256
 1002ee8:	109db304 	addi	r2,r2,30412
 1002eec:	10800017 	ldw	r2,0(r2)
 1002ef0:	103ee83a 	callr	r2
 1002ef4:	e0bfff15 	stw	r2,-4(fp)
 1002ef8:	00000306 	br	1002f08 <alt_get_errno+0x48>
 1002efc:	00804074 	movhi	r2,257
 1002f00:	10a47404 	addi	r2,r2,-28208
 1002f04:	e0bfff15 	stw	r2,-4(fp)
 1002f08:	e0bfff17 	ldw	r2,-4(fp)
}
 1002f0c:	e037883a 	mov	sp,fp
 1002f10:	dfc00117 	ldw	ra,4(sp)
 1002f14:	df000017 	ldw	fp,0(sp)
 1002f18:	dec00204 	addi	sp,sp,8
 1002f1c:	f800283a 	ret

01002f20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1002f20:	defffe04 	addi	sp,sp,-8
 1002f24:	dfc00115 	stw	ra,4(sp)
 1002f28:	df000015 	stw	fp,0(sp)
 1002f2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1002f30:	01004034 	movhi	r4,256
 1002f34:	211db804 	addi	r4,r4,30432
 1002f38:	01404034 	movhi	r5,256
 1002f3c:	2956ff04 	addi	r5,r5,23548
 1002f40:	01804034 	movhi	r6,256
 1002f44:	319db804 	addi	r6,r6,30432
 1002f48:	1002fa00 	call	1002fa0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1002f4c:	01004034 	movhi	r4,256
 1002f50:	21000804 	addi	r4,r4,32
 1002f54:	01404034 	movhi	r5,256
 1002f58:	29400804 	addi	r5,r5,32
 1002f5c:	01804034 	movhi	r6,256
 1002f60:	31806d04 	addi	r6,r6,436
 1002f64:	1002fa00 	call	1002fa0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1002f68:	01004034 	movhi	r4,256
 1002f6c:	2116cc04 	addi	r4,r4,23344
 1002f70:	01404034 	movhi	r5,256
 1002f74:	2956cc04 	addi	r5,r5,23344
 1002f78:	01804034 	movhi	r6,256
 1002f7c:	3196ff04 	addi	r6,r6,23548
 1002f80:	1002fa00 	call	1002fa0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1002f84:	100488c0 	call	100488c <alt_dcache_flush_all>
  alt_icache_flush_all();
 1002f88:	1004b400 	call	1004b40 <alt_icache_flush_all>
}
 1002f8c:	e037883a 	mov	sp,fp
 1002f90:	dfc00117 	ldw	ra,4(sp)
 1002f94:	df000017 	ldw	fp,0(sp)
 1002f98:	dec00204 	addi	sp,sp,8
 1002f9c:	f800283a 	ret

01002fa0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1002fa0:	defffc04 	addi	sp,sp,-16
 1002fa4:	df000315 	stw	fp,12(sp)
 1002fa8:	df000304 	addi	fp,sp,12
 1002fac:	e13ffd15 	stw	r4,-12(fp)
 1002fb0:	e17ffe15 	stw	r5,-8(fp)
 1002fb4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1002fb8:	e0fffe17 	ldw	r3,-8(fp)
 1002fbc:	e0bffd17 	ldw	r2,-12(fp)
 1002fc0:	18800e26 	beq	r3,r2,1002ffc <alt_load_section+0x5c>
  {
    while( to != end )
 1002fc4:	00000a06 	br	1002ff0 <alt_load_section+0x50>
    {
      *to++ = *from++;
 1002fc8:	e0bffd17 	ldw	r2,-12(fp)
 1002fcc:	10c00017 	ldw	r3,0(r2)
 1002fd0:	e0bffe17 	ldw	r2,-8(fp)
 1002fd4:	10c00015 	stw	r3,0(r2)
 1002fd8:	e0bffe17 	ldw	r2,-8(fp)
 1002fdc:	10800104 	addi	r2,r2,4
 1002fe0:	e0bffe15 	stw	r2,-8(fp)
 1002fe4:	e0bffd17 	ldw	r2,-12(fp)
 1002fe8:	10800104 	addi	r2,r2,4
 1002fec:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1002ff0:	e0fffe17 	ldw	r3,-8(fp)
 1002ff4:	e0bfff17 	ldw	r2,-4(fp)
 1002ff8:	18bff31e 	bne	r3,r2,1002fc8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1002ffc:	e037883a 	mov	sp,fp
 1003000:	df000017 	ldw	fp,0(sp)
 1003004:	dec00104 	addi	sp,sp,4
 1003008:	f800283a 	ret

0100300c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100300c:	defff804 	addi	sp,sp,-32
 1003010:	dfc00715 	stw	ra,28(sp)
 1003014:	df000615 	stw	fp,24(sp)
 1003018:	df000604 	addi	fp,sp,24
 100301c:	e13ffc15 	stw	r4,-16(fp)
 1003020:	e17ffd15 	stw	r5,-12(fp)
 1003024:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1003028:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100302c:	e0bffc17 	ldw	r2,-16(fp)
 1003030:	1004803a 	cmplt	r2,r2,zero
 1003034:	1000081e 	bne	r2,zero,1003058 <lseek+0x4c>
 1003038:	e0bffc17 	ldw	r2,-16(fp)
 100303c:	10800324 	muli	r2,r2,12
 1003040:	1007883a 	mov	r3,r2
 1003044:	00804034 	movhi	r2,256
 1003048:	10990b04 	addi	r2,r2,25644
 100304c:	1887883a 	add	r3,r3,r2
 1003050:	e0ffff15 	stw	r3,-4(fp)
 1003054:	00000106 	br	100305c <lseek+0x50>
 1003058:	e03fff15 	stw	zero,-4(fp)
 100305c:	e0bfff17 	ldw	r2,-4(fp)
 1003060:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1003064:	e0bffb17 	ldw	r2,-20(fp)
 1003068:	1005003a 	cmpeq	r2,r2,zero
 100306c:	1000111e 	bne	r2,zero,10030b4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1003070:	e0bffb17 	ldw	r2,-20(fp)
 1003074:	10800017 	ldw	r2,0(r2)
 1003078:	10800717 	ldw	r2,28(r2)
 100307c:	1005003a 	cmpeq	r2,r2,zero
 1003080:	1000091e 	bne	r2,zero,10030a8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1003084:	e0bffb17 	ldw	r2,-20(fp)
 1003088:	10800017 	ldw	r2,0(r2)
 100308c:	10800717 	ldw	r2,28(r2)
 1003090:	e13ffb17 	ldw	r4,-20(fp)
 1003094:	e17ffd17 	ldw	r5,-12(fp)
 1003098:	e1bffe17 	ldw	r6,-8(fp)
 100309c:	103ee83a 	callr	r2
 10030a0:	e0bffa15 	stw	r2,-24(fp)
 10030a4:	00000506 	br	10030bc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 10030a8:	00bfde84 	movi	r2,-134
 10030ac:	e0bffa15 	stw	r2,-24(fp)
 10030b0:	00000206 	br	10030bc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 10030b4:	00bfebc4 	movi	r2,-81
 10030b8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 10030bc:	e0bffa17 	ldw	r2,-24(fp)
 10030c0:	1004403a 	cmpge	r2,r2,zero
 10030c4:	1000071e 	bne	r2,zero,10030e4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 10030c8:	10030fc0 	call	10030fc <alt_get_errno>
 10030cc:	1007883a 	mov	r3,r2
 10030d0:	e0bffa17 	ldw	r2,-24(fp)
 10030d4:	0085c83a 	sub	r2,zero,r2
 10030d8:	18800015 	stw	r2,0(r3)
    rc = -1;
 10030dc:	00bfffc4 	movi	r2,-1
 10030e0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 10030e4:	e0bffa17 	ldw	r2,-24(fp)
}
 10030e8:	e037883a 	mov	sp,fp
 10030ec:	dfc00117 	ldw	ra,4(sp)
 10030f0:	df000017 	ldw	fp,0(sp)
 10030f4:	dec00204 	addi	sp,sp,8
 10030f8:	f800283a 	ret

010030fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10030fc:	defffd04 	addi	sp,sp,-12
 1003100:	dfc00215 	stw	ra,8(sp)
 1003104:	df000115 	stw	fp,4(sp)
 1003108:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100310c:	00804034 	movhi	r2,256
 1003110:	109db304 	addi	r2,r2,30412
 1003114:	10800017 	ldw	r2,0(r2)
 1003118:	1005003a 	cmpeq	r2,r2,zero
 100311c:	1000061e 	bne	r2,zero,1003138 <alt_get_errno+0x3c>
 1003120:	00804034 	movhi	r2,256
 1003124:	109db304 	addi	r2,r2,30412
 1003128:	10800017 	ldw	r2,0(r2)
 100312c:	103ee83a 	callr	r2
 1003130:	e0bfff15 	stw	r2,-4(fp)
 1003134:	00000306 	br	1003144 <alt_get_errno+0x48>
 1003138:	00804074 	movhi	r2,257
 100313c:	10a47404 	addi	r2,r2,-28208
 1003140:	e0bfff15 	stw	r2,-4(fp)
 1003144:	e0bfff17 	ldw	r2,-4(fp)
}
 1003148:	e037883a 	mov	sp,fp
 100314c:	dfc00117 	ldw	ra,4(sp)
 1003150:	df000017 	ldw	fp,0(sp)
 1003154:	dec00204 	addi	sp,sp,8
 1003158:	f800283a 	ret

0100315c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100315c:	defffd04 	addi	sp,sp,-12
 1003160:	dfc00215 	stw	ra,8(sp)
 1003164:	df000115 	stw	fp,4(sp)
 1003168:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100316c:	0009883a 	mov	r4,zero
 1003170:	10036240 	call	1003624 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1003174:	10036580 	call	1003658 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1003178:	01004034 	movhi	r4,256
 100317c:	2116d604 	addi	r4,r4,23384
 1003180:	01404034 	movhi	r5,256
 1003184:	2956d604 	addi	r5,r5,23384
 1003188:	01804034 	movhi	r6,256
 100318c:	3196d604 	addi	r6,r6,23384
 1003190:	1004f000 	call	1004f00 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1003194:	10049e40 	call	10049e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1003198:	01004034 	movhi	r4,256
 100319c:	21129204 	addi	r4,r4,19016
 10031a0:	10056680 	call	1005668 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10031a4:	d126cb17 	ldw	r4,-25812(gp)
 10031a8:	d166cc17 	ldw	r5,-25808(gp)
 10031ac:	d1a6cd17 	ldw	r6,-25804(gp)
 10031b0:	10002000 	call	1000200 <main>
 10031b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10031b8:	01000044 	movi	r4,1
 10031bc:	1002b440 	call	1002b44 <close>
  exit (result);
 10031c0:	e13fff17 	ldw	r4,-4(fp)
 10031c4:	100567c0 	call	100567c <exit>

010031c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 10031c8:	defffe04 	addi	sp,sp,-8
 10031cc:	df000115 	stw	fp,4(sp)
 10031d0:	df000104 	addi	fp,sp,4
 10031d4:	e13fff15 	stw	r4,-4(fp)
}
 10031d8:	e037883a 	mov	sp,fp
 10031dc:	df000017 	ldw	fp,0(sp)
 10031e0:	dec00104 	addi	sp,sp,4
 10031e4:	f800283a 	ret

010031e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 10031e8:	defffe04 	addi	sp,sp,-8
 10031ec:	df000115 	stw	fp,4(sp)
 10031f0:	df000104 	addi	fp,sp,4
 10031f4:	e13fff15 	stw	r4,-4(fp)
}
 10031f8:	e037883a 	mov	sp,fp
 10031fc:	df000017 	ldw	fp,0(sp)
 1003200:	dec00104 	addi	sp,sp,4
 1003204:	f800283a 	ret

01003208 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1003208:	defff704 	addi	sp,sp,-36
 100320c:	dfc00815 	stw	ra,32(sp)
 1003210:	df000715 	stw	fp,28(sp)
 1003214:	df000704 	addi	fp,sp,28
 1003218:	e13ffb15 	stw	r4,-20(fp)
 100321c:	e17ffc15 	stw	r5,-16(fp)
 1003220:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003224:	e0bffb17 	ldw	r2,-20(fp)
 1003228:	1004803a 	cmplt	r2,r2,zero
 100322c:	1000081e 	bne	r2,zero,1003250 <read+0x48>
 1003230:	e0bffb17 	ldw	r2,-20(fp)
 1003234:	10800324 	muli	r2,r2,12
 1003238:	1007883a 	mov	r3,r2
 100323c:	00804034 	movhi	r2,256
 1003240:	10990b04 	addi	r2,r2,25644
 1003244:	1887883a 	add	r3,r3,r2
 1003248:	e0ffff15 	stw	r3,-4(fp)
 100324c:	00000106 	br	1003254 <read+0x4c>
 1003250:	e03fff15 	stw	zero,-4(fp)
 1003254:	e0bfff17 	ldw	r2,-4(fp)
 1003258:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100325c:	e0bffa17 	ldw	r2,-24(fp)
 1003260:	1005003a 	cmpeq	r2,r2,zero
 1003264:	1000241e 	bne	r2,zero,10032f8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003268:	e0bffa17 	ldw	r2,-24(fp)
 100326c:	10800217 	ldw	r2,8(r2)
 1003270:	108000cc 	andi	r2,r2,3
 1003274:	10800060 	cmpeqi	r2,r2,1
 1003278:	10001a1e 	bne	r2,zero,10032e4 <read+0xdc>
 100327c:	e0bffa17 	ldw	r2,-24(fp)
 1003280:	10800017 	ldw	r2,0(r2)
 1003284:	10800517 	ldw	r2,20(r2)
 1003288:	1005003a 	cmpeq	r2,r2,zero
 100328c:	1000151e 	bne	r2,zero,10032e4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003290:	e0bffa17 	ldw	r2,-24(fp)
 1003294:	10800017 	ldw	r2,0(r2)
 1003298:	10800517 	ldw	r2,20(r2)
 100329c:	e17ffc17 	ldw	r5,-16(fp)
 10032a0:	e1bffd17 	ldw	r6,-12(fp)
 10032a4:	e13ffa17 	ldw	r4,-24(fp)
 10032a8:	103ee83a 	callr	r2
 10032ac:	e0bff915 	stw	r2,-28(fp)
 10032b0:	e0bff917 	ldw	r2,-28(fp)
 10032b4:	1004403a 	cmpge	r2,r2,zero
 10032b8:	1000071e 	bne	r2,zero,10032d8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 10032bc:	10033280 	call	1003328 <alt_get_errno>
 10032c0:	e0fff917 	ldw	r3,-28(fp)
 10032c4:	00c7c83a 	sub	r3,zero,r3
 10032c8:	10c00015 	stw	r3,0(r2)
          return -1;
 10032cc:	00bfffc4 	movi	r2,-1
 10032d0:	e0bffe15 	stw	r2,-8(fp)
 10032d4:	00000e06 	br	1003310 <read+0x108>
        }
        return rval;
 10032d8:	e0bff917 	ldw	r2,-28(fp)
 10032dc:	e0bffe15 	stw	r2,-8(fp)
 10032e0:	00000b06 	br	1003310 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10032e4:	10033280 	call	1003328 <alt_get_errno>
 10032e8:	1007883a 	mov	r3,r2
 10032ec:	00800344 	movi	r2,13
 10032f0:	18800015 	stw	r2,0(r3)
 10032f4:	00000406 	br	1003308 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10032f8:	10033280 	call	1003328 <alt_get_errno>
 10032fc:	1007883a 	mov	r3,r2
 1003300:	00801444 	movi	r2,81
 1003304:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003308:	00bfffc4 	movi	r2,-1
 100330c:	e0bffe15 	stw	r2,-8(fp)
 1003310:	e0bffe17 	ldw	r2,-8(fp)
}
 1003314:	e037883a 	mov	sp,fp
 1003318:	dfc00117 	ldw	ra,4(sp)
 100331c:	df000017 	ldw	fp,0(sp)
 1003320:	dec00204 	addi	sp,sp,8
 1003324:	f800283a 	ret

01003328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003328:	defffd04 	addi	sp,sp,-12
 100332c:	dfc00215 	stw	ra,8(sp)
 1003330:	df000115 	stw	fp,4(sp)
 1003334:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003338:	00804034 	movhi	r2,256
 100333c:	109db304 	addi	r2,r2,30412
 1003340:	10800017 	ldw	r2,0(r2)
 1003344:	1005003a 	cmpeq	r2,r2,zero
 1003348:	1000061e 	bne	r2,zero,1003364 <alt_get_errno+0x3c>
 100334c:	00804034 	movhi	r2,256
 1003350:	109db304 	addi	r2,r2,30412
 1003354:	10800017 	ldw	r2,0(r2)
 1003358:	103ee83a 	callr	r2
 100335c:	e0bfff15 	stw	r2,-4(fp)
 1003360:	00000306 	br	1003370 <alt_get_errno+0x48>
 1003364:	00804074 	movhi	r2,257
 1003368:	10a47404 	addi	r2,r2,-28208
 100336c:	e0bfff15 	stw	r2,-4(fp)
 1003370:	e0bfff17 	ldw	r2,-4(fp)
}
 1003374:	e037883a 	mov	sp,fp
 1003378:	dfc00117 	ldw	ra,4(sp)
 100337c:	df000017 	ldw	fp,0(sp)
 1003380:	dec00204 	addi	sp,sp,8
 1003384:	f800283a 	ret

01003388 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1003388:	defffe04 	addi	sp,sp,-8
 100338c:	df000115 	stw	fp,4(sp)
 1003390:	df000104 	addi	fp,sp,4
 1003394:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1003398:	e0bfff17 	ldw	r2,-4(fp)
 100339c:	108000d0 	cmplti	r2,r2,3
 10033a0:	10000d1e 	bne	r2,zero,10033d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10033a4:	e0bfff17 	ldw	r2,-4(fp)
 10033a8:	00c04034 	movhi	r3,256
 10033ac:	18d90b04 	addi	r3,r3,25644
 10033b0:	10800324 	muli	r2,r2,12
 10033b4:	10c5883a 	add	r2,r2,r3
 10033b8:	10800204 	addi	r2,r2,8
 10033bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10033c0:	e0bfff17 	ldw	r2,-4(fp)
 10033c4:	00c04034 	movhi	r3,256
 10033c8:	18d90b04 	addi	r3,r3,25644
 10033cc:	10800324 	muli	r2,r2,12
 10033d0:	10c5883a 	add	r2,r2,r3
 10033d4:	10000015 	stw	zero,0(r2)
  }
}
 10033d8:	e037883a 	mov	sp,fp
 10033dc:	df000017 	ldw	fp,0(sp)
 10033e0:	dec00104 	addi	sp,sp,4
 10033e4:	f800283a 	ret

010033e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10033e8:	defff804 	addi	sp,sp,-32
 10033ec:	df000715 	stw	fp,28(sp)
 10033f0:	df000704 	addi	fp,sp,28
 10033f4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10033f8:	0005303a 	rdctl	r2,status
 10033fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003400:	e0fffb17 	ldw	r3,-20(fp)
 1003404:	00bfff84 	movi	r2,-2
 1003408:	1884703a 	and	r2,r3,r2
 100340c:	1001703a 	wrctl	status,r2
  
  return context;
 1003410:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003414:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1003418:	d0a00a17 	ldw	r2,-32728(gp)
 100341c:	10c000c4 	addi	r3,r2,3
 1003420:	00bfff04 	movi	r2,-4
 1003424:	1884703a 	and	r2,r3,r2
 1003428:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100342c:	d0e00a17 	ldw	r3,-32728(gp)
 1003430:	e0bffe17 	ldw	r2,-8(fp)
 1003434:	1887883a 	add	r3,r3,r2
 1003438:	00806034 	movhi	r2,384
 100343c:	10800004 	addi	r2,r2,0
 1003440:	10c0072e 	bgeu	r2,r3,1003460 <sbrk+0x78>
 1003444:	e0bffd17 	ldw	r2,-12(fp)
 1003448:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100344c:	e0bffa17 	ldw	r2,-24(fp)
 1003450:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003454:	00bfffc4 	movi	r2,-1
 1003458:	e0bfff15 	stw	r2,-4(fp)
 100345c:	00000c06 	br	1003490 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1003460:	d0a00a17 	ldw	r2,-32728(gp)
 1003464:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1003468:	d0e00a17 	ldw	r3,-32728(gp)
 100346c:	e0bffe17 	ldw	r2,-8(fp)
 1003470:	1885883a 	add	r2,r3,r2
 1003474:	d0a00a15 	stw	r2,-32728(gp)
 1003478:	e0bffd17 	ldw	r2,-12(fp)
 100347c:	e0bff915 	stw	r2,-28(fp)
 1003480:	e0bff917 	ldw	r2,-28(fp)
 1003484:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1003488:	e0bffc17 	ldw	r2,-16(fp)
 100348c:	e0bfff15 	stw	r2,-4(fp)
 1003490:	e0bfff17 	ldw	r2,-4(fp)
} 
 1003494:	e037883a 	mov	sp,fp
 1003498:	df000017 	ldw	fp,0(sp)
 100349c:	dec00104 	addi	sp,sp,4
 10034a0:	f800283a 	ret

010034a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10034a4:	defff704 	addi	sp,sp,-36
 10034a8:	dfc00815 	stw	ra,32(sp)
 10034ac:	df000715 	stw	fp,28(sp)
 10034b0:	df000704 	addi	fp,sp,28
 10034b4:	e13ffb15 	stw	r4,-20(fp)
 10034b8:	e17ffc15 	stw	r5,-16(fp)
 10034bc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10034c0:	e0bffb17 	ldw	r2,-20(fp)
 10034c4:	1004803a 	cmplt	r2,r2,zero
 10034c8:	1000081e 	bne	r2,zero,10034ec <write+0x48>
 10034cc:	e0bffb17 	ldw	r2,-20(fp)
 10034d0:	10800324 	muli	r2,r2,12
 10034d4:	1007883a 	mov	r3,r2
 10034d8:	00804034 	movhi	r2,256
 10034dc:	10990b04 	addi	r2,r2,25644
 10034e0:	1887883a 	add	r3,r3,r2
 10034e4:	e0ffff15 	stw	r3,-4(fp)
 10034e8:	00000106 	br	10034f0 <write+0x4c>
 10034ec:	e03fff15 	stw	zero,-4(fp)
 10034f0:	e0bfff17 	ldw	r2,-4(fp)
 10034f4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10034f8:	e0bffa17 	ldw	r2,-24(fp)
 10034fc:	1005003a 	cmpeq	r2,r2,zero
 1003500:	1000241e 	bne	r2,zero,1003594 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1003504:	e0bffa17 	ldw	r2,-24(fp)
 1003508:	10800217 	ldw	r2,8(r2)
 100350c:	108000cc 	andi	r2,r2,3
 1003510:	1005003a 	cmpeq	r2,r2,zero
 1003514:	10001a1e 	bne	r2,zero,1003580 <write+0xdc>
 1003518:	e0bffa17 	ldw	r2,-24(fp)
 100351c:	10800017 	ldw	r2,0(r2)
 1003520:	10800617 	ldw	r2,24(r2)
 1003524:	1005003a 	cmpeq	r2,r2,zero
 1003528:	1000151e 	bne	r2,zero,1003580 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100352c:	e0bffa17 	ldw	r2,-24(fp)
 1003530:	10800017 	ldw	r2,0(r2)
 1003534:	10800617 	ldw	r2,24(r2)
 1003538:	e17ffc17 	ldw	r5,-16(fp)
 100353c:	e1bffd17 	ldw	r6,-12(fp)
 1003540:	e13ffa17 	ldw	r4,-24(fp)
 1003544:	103ee83a 	callr	r2
 1003548:	e0bff915 	stw	r2,-28(fp)
 100354c:	e0bff917 	ldw	r2,-28(fp)
 1003550:	1004403a 	cmpge	r2,r2,zero
 1003554:	1000071e 	bne	r2,zero,1003574 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 1003558:	10035c40 	call	10035c4 <alt_get_errno>
 100355c:	e0fff917 	ldw	r3,-28(fp)
 1003560:	00c7c83a 	sub	r3,zero,r3
 1003564:	10c00015 	stw	r3,0(r2)
        return -1;
 1003568:	00bfffc4 	movi	r2,-1
 100356c:	e0bffe15 	stw	r2,-8(fp)
 1003570:	00000e06 	br	10035ac <write+0x108>
      }
      return rval;
 1003574:	e0bff917 	ldw	r2,-28(fp)
 1003578:	e0bffe15 	stw	r2,-8(fp)
 100357c:	00000b06 	br	10035ac <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003580:	10035c40 	call	10035c4 <alt_get_errno>
 1003584:	1007883a 	mov	r3,r2
 1003588:	00800344 	movi	r2,13
 100358c:	18800015 	stw	r2,0(r3)
 1003590:	00000406 	br	10035a4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003594:	10035c40 	call	10035c4 <alt_get_errno>
 1003598:	1007883a 	mov	r3,r2
 100359c:	00801444 	movi	r2,81
 10035a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10035a4:	00bfffc4 	movi	r2,-1
 10035a8:	e0bffe15 	stw	r2,-8(fp)
 10035ac:	e0bffe17 	ldw	r2,-8(fp)
}
 10035b0:	e037883a 	mov	sp,fp
 10035b4:	dfc00117 	ldw	ra,4(sp)
 10035b8:	df000017 	ldw	fp,0(sp)
 10035bc:	dec00204 	addi	sp,sp,8
 10035c0:	f800283a 	ret

010035c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10035c4:	defffd04 	addi	sp,sp,-12
 10035c8:	dfc00215 	stw	ra,8(sp)
 10035cc:	df000115 	stw	fp,4(sp)
 10035d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10035d4:	00804034 	movhi	r2,256
 10035d8:	109db304 	addi	r2,r2,30412
 10035dc:	10800017 	ldw	r2,0(r2)
 10035e0:	1005003a 	cmpeq	r2,r2,zero
 10035e4:	1000061e 	bne	r2,zero,1003600 <alt_get_errno+0x3c>
 10035e8:	00804034 	movhi	r2,256
 10035ec:	109db304 	addi	r2,r2,30412
 10035f0:	10800017 	ldw	r2,0(r2)
 10035f4:	103ee83a 	callr	r2
 10035f8:	e0bfff15 	stw	r2,-4(fp)
 10035fc:	00000306 	br	100360c <alt_get_errno+0x48>
 1003600:	00804074 	movhi	r2,257
 1003604:	10a47404 	addi	r2,r2,-28208
 1003608:	e0bfff15 	stw	r2,-4(fp)
 100360c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003610:	e037883a 	mov	sp,fp
 1003614:	dfc00117 	ldw	ra,4(sp)
 1003618:	df000017 	ldw	fp,0(sp)
 100361c:	dec00204 	addi	sp,sp,8
 1003620:	f800283a 	ret

01003624 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003624:	defffd04 	addi	sp,sp,-12
 1003628:	dfc00215 	stw	ra,8(sp)
 100362c:	df000115 	stw	fp,4(sp)
 1003630:	df000104 	addi	fp,sp,4
 1003634:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1003638:	10053e00 	call	10053e0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100363c:	00800044 	movi	r2,1
 1003640:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003644:	e037883a 	mov	sp,fp
 1003648:	dfc00117 	ldw	ra,4(sp)
 100364c:	df000017 	ldw	fp,0(sp)
 1003650:	dec00204 	addi	sp,sp,8
 1003654:	f800283a 	ret

01003658 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1003658:	defffd04 	addi	sp,sp,-12
 100365c:	dfc00215 	stw	ra,8(sp)
 1003660:	df000115 	stw	fp,4(sp)
 1003664:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1003668:	01004034 	movhi	r4,256
 100366c:	21197504 	addi	r4,r4,26068
 1003670:	000b883a 	mov	r5,zero
 1003674:	01800144 	movi	r6,5
 1003678:	1003ad00 	call	1003ad0 <altera_avalon_jtag_uart_init>
 100367c:	01004034 	movhi	r4,256
 1003680:	21196b04 	addi	r4,r4,26028
 1003684:	10039500 	call	1003950 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 1003688:	00804034 	movhi	r2,256
 100368c:	109d8304 	addi	r2,r2,30220
 1003690:	10800a17 	ldw	r2,40(r2)
 1003694:	10800104 	addi	r2,r2,4
 1003698:	10800017 	ldw	r2,0(r2)
 100369c:	10ffffcc 	andi	r3,r2,65535
 10036a0:	00804034 	movhi	r2,256
 10036a4:	109d8304 	addi	r2,r2,30220
 10036a8:	10c00c15 	stw	r3,48(r2)
 10036ac:	00804034 	movhi	r2,256
 10036b0:	109d8304 	addi	r2,r2,30220
 10036b4:	10800a17 	ldw	r2,40(r2)
 10036b8:	10800104 	addi	r2,r2,4
 10036bc:	10800017 	ldw	r2,0(r2)
 10036c0:	1005d43a 	srai	r2,r2,16
 10036c4:	10ffffcc 	andi	r3,r2,65535
 10036c8:	00804034 	movhi	r2,256
 10036cc:	109d8304 	addi	r2,r2,30220
 10036d0:	10c00d15 	stw	r3,52(r2)
 10036d4:	00804034 	movhi	r2,256
 10036d8:	109d8304 	addi	r2,r2,30220
 10036dc:	10800c17 	ldw	r2,48(r2)
 10036e0:	10801068 	cmpgeui	r2,r2,65
 10036e4:	1000081e 	bne	r2,zero,1003708 <alt_sys_init+0xb0>
 10036e8:	00c04034 	movhi	r3,256
 10036ec:	18dd8304 	addi	r3,r3,30220
 10036f0:	00800fc4 	movi	r2,63
 10036f4:	18800f15 	stw	r2,60(r3)
 10036f8:	00c04034 	movhi	r3,256
 10036fc:	18dd8304 	addi	r3,r3,30220
 1003700:	00800184 	movi	r2,6
 1003704:	18801015 	stw	r2,64(r3)
 1003708:	00804034 	movhi	r2,256
 100370c:	109d8304 	addi	r2,r2,30220
 1003710:	10800d17 	ldw	r2,52(r2)
 1003714:	10800868 	cmpgeui	r2,r2,33
 1003718:	1000041e 	bne	r2,zero,100372c <alt_sys_init+0xd4>
 100371c:	00c04034 	movhi	r3,256
 1003720:	18dd8304 	addi	r3,r3,30220
 1003724:	008007c4 	movi	r2,31
 1003728:	18801115 	stw	r2,68(r3)
 100372c:	01004034 	movhi	r4,256
 1003730:	211d8304 	addi	r4,r4,30220
 1003734:	10044340 	call	1004434 <alt_up_char_buffer_init>
 1003738:	01004034 	movhi	r4,256
 100373c:	211d8304 	addi	r4,r4,30220
 1003740:	10039500 	call	1003950 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 1003744:	00804034 	movhi	r2,256
 1003748:	109d9504 	addi	r2,r2,30292
 100374c:	10800a17 	ldw	r2,40(r2)
 1003750:	10800017 	ldw	r2,0(r2)
 1003754:	1007883a 	mov	r3,r2
 1003758:	00804034 	movhi	r2,256
 100375c:	109d9504 	addi	r2,r2,30292
 1003760:	10c00b15 	stw	r3,44(r2)
 1003764:	00804034 	movhi	r2,256
 1003768:	109d9504 	addi	r2,r2,30292
 100376c:	10800a17 	ldw	r2,40(r2)
 1003770:	10800104 	addi	r2,r2,4
 1003774:	10800017 	ldw	r2,0(r2)
 1003778:	1007883a 	mov	r3,r2
 100377c:	00804034 	movhi	r2,256
 1003780:	109d9504 	addi	r2,r2,30292
 1003784:	10c00c15 	stw	r3,48(r2)
 1003788:	00804034 	movhi	r2,256
 100378c:	109d9504 	addi	r2,r2,30292
 1003790:	10800a17 	ldw	r2,40(r2)
 1003794:	10800204 	addi	r2,r2,8
 1003798:	10800017 	ldw	r2,0(r2)
 100379c:	10ffffcc 	andi	r3,r2,65535
 10037a0:	00804034 	movhi	r2,256
 10037a4:	109d9504 	addi	r2,r2,30292
 10037a8:	10c00f15 	stw	r3,60(r2)
 10037ac:	00804034 	movhi	r2,256
 10037b0:	109d9504 	addi	r2,r2,30292
 10037b4:	10800a17 	ldw	r2,40(r2)
 10037b8:	10800204 	addi	r2,r2,8
 10037bc:	10800017 	ldw	r2,0(r2)
 10037c0:	1005d43a 	srai	r2,r2,16
 10037c4:	10ffffcc 	andi	r3,r2,65535
 10037c8:	00804034 	movhi	r2,256
 10037cc:	109d9504 	addi	r2,r2,30292
 10037d0:	10c01015 	stw	r3,64(r2)
 10037d4:	00804034 	movhi	r2,256
 10037d8:	109d9504 	addi	r2,r2,30292
 10037dc:	10800a17 	ldw	r2,40(r2)
 10037e0:	10800304 	addi	r2,r2,12
 10037e4:	10800017 	ldw	r2,0(r2)
 10037e8:	1005d07a 	srai	r2,r2,1
 10037ec:	10c0004c 	andi	r3,r2,1
 10037f0:	00804034 	movhi	r2,256
 10037f4:	109d9504 	addi	r2,r2,30292
 10037f8:	10c00d15 	stw	r3,52(r2)
 10037fc:	00804034 	movhi	r2,256
 1003800:	109d9504 	addi	r2,r2,30292
 1003804:	10800a17 	ldw	r2,40(r2)
 1003808:	10800304 	addi	r2,r2,12
 100380c:	10800017 	ldw	r2,0(r2)
 1003810:	1005d13a 	srai	r2,r2,4
 1003814:	10c003cc 	andi	r3,r2,15
 1003818:	00804034 	movhi	r2,256
 100381c:	109d9504 	addi	r2,r2,30292
 1003820:	10c00e15 	stw	r3,56(r2)
 1003824:	00804034 	movhi	r2,256
 1003828:	109d9504 	addi	r2,r2,30292
 100382c:	10800a17 	ldw	r2,40(r2)
 1003830:	10800304 	addi	r2,r2,12
 1003834:	10800017 	ldw	r2,0(r2)
 1003838:	1005d43a 	srai	r2,r2,16
 100383c:	1007883a 	mov	r3,r2
 1003840:	00bfffc4 	movi	r2,-1
 1003844:	1884703a 	and	r2,r3,r2
 1003848:	e0bfff45 	stb	r2,-3(fp)
 100384c:	00804034 	movhi	r2,256
 1003850:	109d9504 	addi	r2,r2,30292
 1003854:	10800a17 	ldw	r2,40(r2)
 1003858:	10800304 	addi	r2,r2,12
 100385c:	10800017 	ldw	r2,0(r2)
 1003860:	1005d63a 	srai	r2,r2,24
 1003864:	1007883a 	mov	r3,r2
 1003868:	00bfffc4 	movi	r2,-1
 100386c:	1884703a 	and	r2,r3,r2
 1003870:	e0bfff05 	stb	r2,-4(fp)
 1003874:	00804034 	movhi	r2,256
 1003878:	109d9504 	addi	r2,r2,30292
 100387c:	10800e17 	ldw	r2,56(r2)
 1003880:	10800058 	cmpnei	r2,r2,1
 1003884:	1000041e 	bne	r2,zero,1003898 <alt_sys_init+0x240>
 1003888:	00804034 	movhi	r2,256
 100388c:	109d9504 	addi	r2,r2,30292
 1003890:	10001115 	stw	zero,68(r2)
 1003894:	00000e06 	br	10038d0 <alt_sys_init+0x278>
 1003898:	00804034 	movhi	r2,256
 100389c:	109d9504 	addi	r2,r2,30292
 10038a0:	10800e17 	ldw	r2,56(r2)
 10038a4:	10800098 	cmpnei	r2,r2,2
 10038a8:	1000051e 	bne	r2,zero,10038c0 <alt_sys_init+0x268>
 10038ac:	00c04034 	movhi	r3,256
 10038b0:	18dd9504 	addi	r3,r3,30292
 10038b4:	00800044 	movi	r2,1
 10038b8:	18801115 	stw	r2,68(r3)
 10038bc:	00000406 	br	10038d0 <alt_sys_init+0x278>
 10038c0:	00c04034 	movhi	r3,256
 10038c4:	18dd9504 	addi	r3,r3,30292
 10038c8:	00800084 	movi	r2,2
 10038cc:	18801115 	stw	r2,68(r3)
 10038d0:	e0ffff43 	ldbu	r3,-3(fp)
 10038d4:	00800804 	movi	r2,32
 10038d8:	10c7c83a 	sub	r3,r2,r3
 10038dc:	00bfffc4 	movi	r2,-1
 10038e0:	10c6d83a 	srl	r3,r2,r3
 10038e4:	00804034 	movhi	r2,256
 10038e8:	109d9504 	addi	r2,r2,30292
 10038ec:	10c01215 	stw	r3,72(r2)
 10038f0:	e0ffff43 	ldbu	r3,-3(fp)
 10038f4:	00804034 	movhi	r2,256
 10038f8:	109d9504 	addi	r2,r2,30292
 10038fc:	10801117 	ldw	r2,68(r2)
 1003900:	1887883a 	add	r3,r3,r2
 1003904:	00804034 	movhi	r2,256
 1003908:	109d9504 	addi	r2,r2,30292
 100390c:	10c01315 	stw	r3,76(r2)
 1003910:	e0ffff03 	ldbu	r3,-4(fp)
 1003914:	00800804 	movi	r2,32
 1003918:	10c7c83a 	sub	r3,r2,r3
 100391c:	00bfffc4 	movi	r2,-1
 1003920:	10c6d83a 	srl	r3,r2,r3
 1003924:	00804034 	movhi	r2,256
 1003928:	109d9504 	addi	r2,r2,30292
 100392c:	10c01415 	stw	r3,80(r2)
 1003930:	01004034 	movhi	r4,256
 1003934:	211d9504 	addi	r4,r4,30292
 1003938:	10039500 	call	1003950 <alt_dev_reg>
}
 100393c:	e037883a 	mov	sp,fp
 1003940:	dfc00117 	ldw	ra,4(sp)
 1003944:	df000017 	ldw	fp,0(sp)
 1003948:	dec00204 	addi	sp,sp,8
 100394c:	f800283a 	ret

01003950 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1003950:	defffd04 	addi	sp,sp,-12
 1003954:	dfc00215 	stw	ra,8(sp)
 1003958:	df000115 	stw	fp,4(sp)
 100395c:	df000104 	addi	fp,sp,4
 1003960:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1003964:	e13fff17 	ldw	r4,-4(fp)
 1003968:	01404034 	movhi	r5,256
 100396c:	295db004 	addi	r5,r5,30400
 1003970:	10048d00 	call	10048d0 <alt_dev_llist_insert>
}
 1003974:	e037883a 	mov	sp,fp
 1003978:	dfc00117 	ldw	ra,4(sp)
 100397c:	df000017 	ldw	fp,0(sp)
 1003980:	dec00204 	addi	sp,sp,8
 1003984:	f800283a 	ret

01003988 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1003988:	defffa04 	addi	sp,sp,-24
 100398c:	dfc00515 	stw	ra,20(sp)
 1003990:	df000415 	stw	fp,16(sp)
 1003994:	df000404 	addi	fp,sp,16
 1003998:	e13ffd15 	stw	r4,-12(fp)
 100399c:	e17ffe15 	stw	r5,-8(fp)
 10039a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10039a4:	e0bffd17 	ldw	r2,-12(fp)
 10039a8:	10800017 	ldw	r2,0(r2)
 10039ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10039b0:	e0bffc17 	ldw	r2,-16(fp)
 10039b4:	11000a04 	addi	r4,r2,40
 10039b8:	e0bffd17 	ldw	r2,-12(fp)
 10039bc:	11c00217 	ldw	r7,8(r2)
 10039c0:	e17ffe17 	ldw	r5,-8(fp)
 10039c4:	e1bfff17 	ldw	r6,-4(fp)
 10039c8:	1003fd00 	call	1003fd0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10039cc:	e037883a 	mov	sp,fp
 10039d0:	dfc00117 	ldw	ra,4(sp)
 10039d4:	df000017 	ldw	fp,0(sp)
 10039d8:	dec00204 	addi	sp,sp,8
 10039dc:	f800283a 	ret

010039e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10039e0:	defffa04 	addi	sp,sp,-24
 10039e4:	dfc00515 	stw	ra,20(sp)
 10039e8:	df000415 	stw	fp,16(sp)
 10039ec:	df000404 	addi	fp,sp,16
 10039f0:	e13ffd15 	stw	r4,-12(fp)
 10039f4:	e17ffe15 	stw	r5,-8(fp)
 10039f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10039fc:	e0bffd17 	ldw	r2,-12(fp)
 1003a00:	10800017 	ldw	r2,0(r2)
 1003a04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1003a08:	e0bffc17 	ldw	r2,-16(fp)
 1003a0c:	11000a04 	addi	r4,r2,40
 1003a10:	e0bffd17 	ldw	r2,-12(fp)
 1003a14:	11c00217 	ldw	r7,8(r2)
 1003a18:	e17ffe17 	ldw	r5,-8(fp)
 1003a1c:	e1bfff17 	ldw	r6,-4(fp)
 1003a20:	10041f40 	call	10041f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1003a24:	e037883a 	mov	sp,fp
 1003a28:	dfc00117 	ldw	ra,4(sp)
 1003a2c:	df000017 	ldw	fp,0(sp)
 1003a30:	dec00204 	addi	sp,sp,8
 1003a34:	f800283a 	ret

01003a38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1003a38:	defffc04 	addi	sp,sp,-16
 1003a3c:	dfc00315 	stw	ra,12(sp)
 1003a40:	df000215 	stw	fp,8(sp)
 1003a44:	df000204 	addi	fp,sp,8
 1003a48:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003a4c:	e0bfff17 	ldw	r2,-4(fp)
 1003a50:	10800017 	ldw	r2,0(r2)
 1003a54:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1003a58:	e0bffe17 	ldw	r2,-8(fp)
 1003a5c:	11000a04 	addi	r4,r2,40
 1003a60:	e0bfff17 	ldw	r2,-4(fp)
 1003a64:	11400217 	ldw	r5,8(r2)
 1003a68:	1003e680 	call	1003e68 <altera_avalon_jtag_uart_close>
}
 1003a6c:	e037883a 	mov	sp,fp
 1003a70:	dfc00117 	ldw	ra,4(sp)
 1003a74:	df000017 	ldw	fp,0(sp)
 1003a78:	dec00204 	addi	sp,sp,8
 1003a7c:	f800283a 	ret

01003a80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1003a80:	defffa04 	addi	sp,sp,-24
 1003a84:	dfc00515 	stw	ra,20(sp)
 1003a88:	df000415 	stw	fp,16(sp)
 1003a8c:	df000404 	addi	fp,sp,16
 1003a90:	e13ffd15 	stw	r4,-12(fp)
 1003a94:	e17ffe15 	stw	r5,-8(fp)
 1003a98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1003a9c:	e0bffd17 	ldw	r2,-12(fp)
 1003aa0:	10800017 	ldw	r2,0(r2)
 1003aa4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1003aa8:	e0bffc17 	ldw	r2,-16(fp)
 1003aac:	11000a04 	addi	r4,r2,40
 1003ab0:	e17ffe17 	ldw	r5,-8(fp)
 1003ab4:	e1bfff17 	ldw	r6,-4(fp)
 1003ab8:	1003edc0 	call	1003edc <altera_avalon_jtag_uart_ioctl>
}
 1003abc:	e037883a 	mov	sp,fp
 1003ac0:	dfc00117 	ldw	ra,4(sp)
 1003ac4:	df000017 	ldw	fp,0(sp)
 1003ac8:	dec00204 	addi	sp,sp,8
 1003acc:	f800283a 	ret

01003ad0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1003ad0:	defffa04 	addi	sp,sp,-24
 1003ad4:	dfc00515 	stw	ra,20(sp)
 1003ad8:	df000415 	stw	fp,16(sp)
 1003adc:	df000404 	addi	fp,sp,16
 1003ae0:	e13ffd15 	stw	r4,-12(fp)
 1003ae4:	e17ffe15 	stw	r5,-8(fp)
 1003ae8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003aec:	e0fffd17 	ldw	r3,-12(fp)
 1003af0:	00800044 	movi	r2,1
 1003af4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1003af8:	e0bffd17 	ldw	r2,-12(fp)
 1003afc:	10800017 	ldw	r2,0(r2)
 1003b00:	11000104 	addi	r4,r2,4
 1003b04:	e0bffd17 	ldw	r2,-12(fp)
 1003b08:	10800817 	ldw	r2,32(r2)
 1003b0c:	1007883a 	mov	r3,r2
 1003b10:	2005883a 	mov	r2,r4
 1003b14:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1003b18:	e13ffe17 	ldw	r4,-8(fp)
 1003b1c:	e17fff17 	ldw	r5,-4(fp)
 1003b20:	d8000015 	stw	zero,0(sp)
 1003b24:	01804034 	movhi	r6,256
 1003b28:	318ee404 	addi	r6,r6,15248
 1003b2c:	e1fffd17 	ldw	r7,-12(fp)
 1003b30:	1004b700 	call	1004b70 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1003b34:	e0bffd17 	ldw	r2,-12(fp)
 1003b38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1003b3c:	e0bffd17 	ldw	r2,-12(fp)
 1003b40:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1003b44:	00804074 	movhi	r2,257
 1003b48:	10a47904 	addi	r2,r2,-28188
 1003b4c:	10800017 	ldw	r2,0(r2)
 1003b50:	100b883a 	mov	r5,r2
 1003b54:	01804034 	movhi	r6,256
 1003b58:	318f6e04 	addi	r6,r6,15800
 1003b5c:	e1fffd17 	ldw	r7,-12(fp)
 1003b60:	10047380 	call	1004738 <alt_alarm_start>
 1003b64:	1004403a 	cmpge	r2,r2,zero
 1003b68:	1000041e 	bne	r2,zero,1003b7c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1003b6c:	e0fffd17 	ldw	r3,-12(fp)
 1003b70:	00a00034 	movhi	r2,32768
 1003b74:	10bfffc4 	addi	r2,r2,-1
 1003b78:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1003b7c:	e037883a 	mov	sp,fp
 1003b80:	dfc00117 	ldw	ra,4(sp)
 1003b84:	df000017 	ldw	fp,0(sp)
 1003b88:	dec00204 	addi	sp,sp,8
 1003b8c:	f800283a 	ret

01003b90 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1003b90:	defff804 	addi	sp,sp,-32
 1003b94:	df000715 	stw	fp,28(sp)
 1003b98:	df000704 	addi	fp,sp,28
 1003b9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1003ba0:	e0bfff17 	ldw	r2,-4(fp)
 1003ba4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 1003ba8:	e0bffe17 	ldw	r2,-8(fp)
 1003bac:	10800017 	ldw	r2,0(r2)
 1003bb0:	e0bffd15 	stw	r2,-12(fp)
 1003bb4:	00000006 	br	1003bb8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003bb8:	e0bffd17 	ldw	r2,-12(fp)
 1003bbc:	10800104 	addi	r2,r2,4
 1003bc0:	10800037 	ldwio	r2,0(r2)
 1003bc4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1003bc8:	e0bffc17 	ldw	r2,-16(fp)
 1003bcc:	1080c00c 	andi	r2,r2,768
 1003bd0:	1005003a 	cmpeq	r2,r2,zero
 1003bd4:	1000741e 	bne	r2,zero,1003da8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1003bd8:	e0bffc17 	ldw	r2,-16(fp)
 1003bdc:	1080400c 	andi	r2,r2,256
 1003be0:	1005003a 	cmpeq	r2,r2,zero
 1003be4:	1000351e 	bne	r2,zero,1003cbc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1003be8:	00800074 	movhi	r2,1
 1003bec:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003bf0:	e0bffe17 	ldw	r2,-8(fp)
 1003bf4:	10800a17 	ldw	r2,40(r2)
 1003bf8:	10800044 	addi	r2,r2,1
 1003bfc:	1081ffcc 	andi	r2,r2,2047
 1003c00:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 1003c04:	e0bffe17 	ldw	r2,-8(fp)
 1003c08:	10c00b17 	ldw	r3,44(r2)
 1003c0c:	e0bffa17 	ldw	r2,-24(fp)
 1003c10:	18801626 	beq	r3,r2,1003c6c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1003c14:	e0bffd17 	ldw	r2,-12(fp)
 1003c18:	10800037 	ldwio	r2,0(r2)
 1003c1c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1003c20:	e0bffb17 	ldw	r2,-20(fp)
 1003c24:	10a0000c 	andi	r2,r2,32768
 1003c28:	1005003a 	cmpeq	r2,r2,zero
 1003c2c:	10000f1e 	bne	r2,zero,1003c6c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1003c30:	e0bffe17 	ldw	r2,-8(fp)
 1003c34:	10c00a17 	ldw	r3,40(r2)
 1003c38:	e0bffb17 	ldw	r2,-20(fp)
 1003c3c:	1009883a 	mov	r4,r2
 1003c40:	e0bffe17 	ldw	r2,-8(fp)
 1003c44:	1885883a 	add	r2,r3,r2
 1003c48:	10800e04 	addi	r2,r2,56
 1003c4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003c50:	e0bffe17 	ldw	r2,-8(fp)
 1003c54:	10800a17 	ldw	r2,40(r2)
 1003c58:	10800044 	addi	r2,r2,1
 1003c5c:	10c1ffcc 	andi	r3,r2,2047
 1003c60:	e0bffe17 	ldw	r2,-8(fp)
 1003c64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1003c68:	003fe106 	br	1003bf0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1003c6c:	e0bffb17 	ldw	r2,-20(fp)
 1003c70:	10bfffec 	andhi	r2,r2,65535
 1003c74:	1005003a 	cmpeq	r2,r2,zero
 1003c78:	1000101e 	bne	r2,zero,1003cbc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003c7c:	e0bffe17 	ldw	r2,-8(fp)
 1003c80:	10c00817 	ldw	r3,32(r2)
 1003c84:	00bfff84 	movi	r2,-2
 1003c88:	1886703a 	and	r3,r3,r2
 1003c8c:	e0bffe17 	ldw	r2,-8(fp)
 1003c90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1003c94:	e0bffd17 	ldw	r2,-12(fp)
 1003c98:	11000104 	addi	r4,r2,4
 1003c9c:	e0bffe17 	ldw	r2,-8(fp)
 1003ca0:	10800817 	ldw	r2,32(r2)
 1003ca4:	1007883a 	mov	r3,r2
 1003ca8:	2005883a 	mov	r2,r4
 1003cac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003cb0:	e0bffd17 	ldw	r2,-12(fp)
 1003cb4:	10800104 	addi	r2,r2,4
 1003cb8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1003cbc:	e0bffc17 	ldw	r2,-16(fp)
 1003cc0:	1080800c 	andi	r2,r2,512
 1003cc4:	1005003a 	cmpeq	r2,r2,zero
 1003cc8:	103fbb1e 	bne	r2,zero,1003bb8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1003ccc:	e0bffc17 	ldw	r2,-16(fp)
 1003cd0:	10bfffec 	andhi	r2,r2,65535
 1003cd4:	1004d43a 	srli	r2,r2,16
 1003cd8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003cdc:	00001506 	br	1003d34 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1003ce0:	e13ffd17 	ldw	r4,-12(fp)
 1003ce4:	e0bffe17 	ldw	r2,-8(fp)
 1003ce8:	10c00d17 	ldw	r3,52(r2)
 1003cec:	e0bffe17 	ldw	r2,-8(fp)
 1003cf0:	1885883a 	add	r2,r3,r2
 1003cf4:	10820e04 	addi	r2,r2,2104
 1003cf8:	10800003 	ldbu	r2,0(r2)
 1003cfc:	10c03fcc 	andi	r3,r2,255
 1003d00:	18c0201c 	xori	r3,r3,128
 1003d04:	18ffe004 	addi	r3,r3,-128
 1003d08:	2005883a 	mov	r2,r4
 1003d0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1003d10:	e0bffe17 	ldw	r2,-8(fp)
 1003d14:	10800d17 	ldw	r2,52(r2)
 1003d18:	10800044 	addi	r2,r2,1
 1003d1c:	10c1ffcc 	andi	r3,r2,2047
 1003d20:	e0bffe17 	ldw	r2,-8(fp)
 1003d24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1003d28:	e0bff917 	ldw	r2,-28(fp)
 1003d2c:	10bfffc4 	addi	r2,r2,-1
 1003d30:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1003d34:	e0bff917 	ldw	r2,-28(fp)
 1003d38:	1005003a 	cmpeq	r2,r2,zero
 1003d3c:	1000051e 	bne	r2,zero,1003d54 <altera_avalon_jtag_uart_irq+0x1c4>
 1003d40:	e0bffe17 	ldw	r2,-8(fp)
 1003d44:	10c00d17 	ldw	r3,52(r2)
 1003d48:	e0bffe17 	ldw	r2,-8(fp)
 1003d4c:	10800c17 	ldw	r2,48(r2)
 1003d50:	18bfe31e 	bne	r3,r2,1003ce0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1003d54:	e0bff917 	ldw	r2,-28(fp)
 1003d58:	1005003a 	cmpeq	r2,r2,zero
 1003d5c:	103f961e 	bne	r2,zero,1003bb8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1003d60:	e0bffe17 	ldw	r2,-8(fp)
 1003d64:	10c00817 	ldw	r3,32(r2)
 1003d68:	00bfff44 	movi	r2,-3
 1003d6c:	1886703a 	and	r3,r3,r2
 1003d70:	e0bffe17 	ldw	r2,-8(fp)
 1003d74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1003d78:	e0bffe17 	ldw	r2,-8(fp)
 1003d7c:	10800017 	ldw	r2,0(r2)
 1003d80:	11000104 	addi	r4,r2,4
 1003d84:	e0bffe17 	ldw	r2,-8(fp)
 1003d88:	10800817 	ldw	r2,32(r2)
 1003d8c:	1007883a 	mov	r3,r2
 1003d90:	2005883a 	mov	r2,r4
 1003d94:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1003d98:	e0bffd17 	ldw	r2,-12(fp)
 1003d9c:	10800104 	addi	r2,r2,4
 1003da0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1003da4:	003f8406 	br	1003bb8 <altera_avalon_jtag_uart_irq+0x28>
}
 1003da8:	e037883a 	mov	sp,fp
 1003dac:	df000017 	ldw	fp,0(sp)
 1003db0:	dec00104 	addi	sp,sp,4
 1003db4:	f800283a 	ret

01003db8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1003db8:	defffc04 	addi	sp,sp,-16
 1003dbc:	df000315 	stw	fp,12(sp)
 1003dc0:	df000304 	addi	fp,sp,12
 1003dc4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1003dc8:	e0bfff17 	ldw	r2,-4(fp)
 1003dcc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1003dd0:	e0bffe17 	ldw	r2,-8(fp)
 1003dd4:	10800017 	ldw	r2,0(r2)
 1003dd8:	10800104 	addi	r2,r2,4
 1003ddc:	10800037 	ldwio	r2,0(r2)
 1003de0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1003de4:	e0bffd17 	ldw	r2,-12(fp)
 1003de8:	1081000c 	andi	r2,r2,1024
 1003dec:	1005003a 	cmpeq	r2,r2,zero
 1003df0:	10000c1e 	bne	r2,zero,1003e24 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1003df4:	e0bffe17 	ldw	r2,-8(fp)
 1003df8:	10800017 	ldw	r2,0(r2)
 1003dfc:	11000104 	addi	r4,r2,4
 1003e00:	e0bffe17 	ldw	r2,-8(fp)
 1003e04:	10800817 	ldw	r2,32(r2)
 1003e08:	10810014 	ori	r2,r2,1024
 1003e0c:	1007883a 	mov	r3,r2
 1003e10:	2005883a 	mov	r2,r4
 1003e14:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1003e18:	e0bffe17 	ldw	r2,-8(fp)
 1003e1c:	10000915 	stw	zero,36(r2)
 1003e20:	00000a06 	br	1003e4c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1003e24:	e0bffe17 	ldw	r2,-8(fp)
 1003e28:	10c00917 	ldw	r3,36(r2)
 1003e2c:	00a00034 	movhi	r2,32768
 1003e30:	10bfff04 	addi	r2,r2,-4
 1003e34:	10c00536 	bltu	r2,r3,1003e4c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1003e38:	e0bffe17 	ldw	r2,-8(fp)
 1003e3c:	10800917 	ldw	r2,36(r2)
 1003e40:	10c00044 	addi	r3,r2,1
 1003e44:	e0bffe17 	ldw	r2,-8(fp)
 1003e48:	10c00915 	stw	r3,36(r2)
 1003e4c:	00804074 	movhi	r2,257
 1003e50:	10a47904 	addi	r2,r2,-28188
 1003e54:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1003e58:	e037883a 	mov	sp,fp
 1003e5c:	df000017 	ldw	fp,0(sp)
 1003e60:	dec00104 	addi	sp,sp,4
 1003e64:	f800283a 	ret

01003e68 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1003e68:	defffc04 	addi	sp,sp,-16
 1003e6c:	df000315 	stw	fp,12(sp)
 1003e70:	df000304 	addi	fp,sp,12
 1003e74:	e13ffd15 	stw	r4,-12(fp)
 1003e78:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1003e7c:	00000706 	br	1003e9c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1003e80:	e0bffe17 	ldw	r2,-8(fp)
 1003e84:	1090000c 	andi	r2,r2,16384
 1003e88:	1005003a 	cmpeq	r2,r2,zero
 1003e8c:	1000031e 	bne	r2,zero,1003e9c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1003e90:	00bffd44 	movi	r2,-11
 1003e94:	e0bfff15 	stw	r2,-4(fp)
 1003e98:	00000b06 	br	1003ec8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1003e9c:	e0bffd17 	ldw	r2,-12(fp)
 1003ea0:	10c00d17 	ldw	r3,52(r2)
 1003ea4:	e0bffd17 	ldw	r2,-12(fp)
 1003ea8:	10800c17 	ldw	r2,48(r2)
 1003eac:	18800526 	beq	r3,r2,1003ec4 <altera_avalon_jtag_uart_close+0x5c>
 1003eb0:	e0bffd17 	ldw	r2,-12(fp)
 1003eb4:	10c00917 	ldw	r3,36(r2)
 1003eb8:	e0bffd17 	ldw	r2,-12(fp)
 1003ebc:	10800117 	ldw	r2,4(r2)
 1003ec0:	18bfef36 	bltu	r3,r2,1003e80 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1003ec4:	e03fff15 	stw	zero,-4(fp)
 1003ec8:	e0bfff17 	ldw	r2,-4(fp)
}
 1003ecc:	e037883a 	mov	sp,fp
 1003ed0:	df000017 	ldw	fp,0(sp)
 1003ed4:	dec00104 	addi	sp,sp,4
 1003ed8:	f800283a 	ret

01003edc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1003edc:	defff804 	addi	sp,sp,-32
 1003ee0:	df000715 	stw	fp,28(sp)
 1003ee4:	df000704 	addi	fp,sp,28
 1003ee8:	e13ffb15 	stw	r4,-20(fp)
 1003eec:	e17ffc15 	stw	r5,-16(fp)
 1003ef0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1003ef4:	00bff9c4 	movi	r2,-25
 1003ef8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1003efc:	e0bffc17 	ldw	r2,-16(fp)
 1003f00:	e0bfff15 	stw	r2,-4(fp)
 1003f04:	e0ffff17 	ldw	r3,-4(fp)
 1003f08:	189a8060 	cmpeqi	r2,r3,27137
 1003f0c:	1000041e 	bne	r2,zero,1003f20 <altera_avalon_jtag_uart_ioctl+0x44>
 1003f10:	e0ffff17 	ldw	r3,-4(fp)
 1003f14:	189a80a0 	cmpeqi	r2,r3,27138
 1003f18:	10001b1e 	bne	r2,zero,1003f88 <altera_avalon_jtag_uart_ioctl+0xac>
 1003f1c:	00002706 	br	1003fbc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1003f20:	e0bffb17 	ldw	r2,-20(fp)
 1003f24:	10c00117 	ldw	r3,4(r2)
 1003f28:	00a00034 	movhi	r2,32768
 1003f2c:	10bfffc4 	addi	r2,r2,-1
 1003f30:	18802226 	beq	r3,r2,1003fbc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1003f34:	e0bffd17 	ldw	r2,-12(fp)
 1003f38:	10800017 	ldw	r2,0(r2)
 1003f3c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1003f40:	e0bff917 	ldw	r2,-28(fp)
 1003f44:	10800090 	cmplti	r2,r2,2
 1003f48:	1000071e 	bne	r2,zero,1003f68 <altera_avalon_jtag_uart_ioctl+0x8c>
 1003f4c:	e0fff917 	ldw	r3,-28(fp)
 1003f50:	00a00034 	movhi	r2,32768
 1003f54:	10bfffc4 	addi	r2,r2,-1
 1003f58:	18800326 	beq	r3,r2,1003f68 <altera_avalon_jtag_uart_ioctl+0x8c>
 1003f5c:	e0bff917 	ldw	r2,-28(fp)
 1003f60:	e0bffe15 	stw	r2,-8(fp)
 1003f64:	00000306 	br	1003f74 <altera_avalon_jtag_uart_ioctl+0x98>
 1003f68:	00e00034 	movhi	r3,32768
 1003f6c:	18ffff84 	addi	r3,r3,-2
 1003f70:	e0fffe15 	stw	r3,-8(fp)
 1003f74:	e0bffb17 	ldw	r2,-20(fp)
 1003f78:	e0fffe17 	ldw	r3,-8(fp)
 1003f7c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1003f80:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1003f84:	00000d06 	br	1003fbc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1003f88:	e0bffb17 	ldw	r2,-20(fp)
 1003f8c:	10c00117 	ldw	r3,4(r2)
 1003f90:	00a00034 	movhi	r2,32768
 1003f94:	10bfffc4 	addi	r2,r2,-1
 1003f98:	18800826 	beq	r3,r2,1003fbc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1003f9c:	e13ffd17 	ldw	r4,-12(fp)
 1003fa0:	e0bffb17 	ldw	r2,-20(fp)
 1003fa4:	10c00917 	ldw	r3,36(r2)
 1003fa8:	e0bffb17 	ldw	r2,-20(fp)
 1003fac:	10800117 	ldw	r2,4(r2)
 1003fb0:	1885803a 	cmpltu	r2,r3,r2
 1003fb4:	20800015 	stw	r2,0(r4)
      rc = 0;
 1003fb8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1003fbc:	e0bffa17 	ldw	r2,-24(fp)
}
 1003fc0:	e037883a 	mov	sp,fp
 1003fc4:	df000017 	ldw	fp,0(sp)
 1003fc8:	dec00104 	addi	sp,sp,4
 1003fcc:	f800283a 	ret

01003fd0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1003fd0:	defff204 	addi	sp,sp,-56
 1003fd4:	dfc00d15 	stw	ra,52(sp)
 1003fd8:	df000c15 	stw	fp,48(sp)
 1003fdc:	df000c04 	addi	fp,sp,48
 1003fe0:	e13ffb15 	stw	r4,-20(fp)
 1003fe4:	e17ffc15 	stw	r5,-16(fp)
 1003fe8:	e1bffd15 	stw	r6,-12(fp)
 1003fec:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1003ff0:	e0bffc17 	ldw	r2,-16(fp)
 1003ff4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1003ff8:	00004806 	br	100411c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1003ffc:	e0bffb17 	ldw	r2,-20(fp)
 1004000:	10800a17 	ldw	r2,40(r2)
 1004004:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1004008:	e0bffb17 	ldw	r2,-20(fp)
 100400c:	10800b17 	ldw	r2,44(r2)
 1004010:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1004014:	e0fff717 	ldw	r3,-36(fp)
 1004018:	e0bff617 	ldw	r2,-40(fp)
 100401c:	18800536 	bltu	r3,r2,1004034 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1004020:	e0bff717 	ldw	r2,-36(fp)
 1004024:	e0fff617 	ldw	r3,-40(fp)
 1004028:	10c5c83a 	sub	r2,r2,r3
 100402c:	e0bff815 	stw	r2,-32(fp)
 1004030:	00000406 	br	1004044 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1004034:	00820004 	movi	r2,2048
 1004038:	e0fff617 	ldw	r3,-40(fp)
 100403c:	10c5c83a 	sub	r2,r2,r3
 1004040:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1004044:	e0bff817 	ldw	r2,-32(fp)
 1004048:	1005003a 	cmpeq	r2,r2,zero
 100404c:	10001f1e 	bne	r2,zero,10040cc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1004050:	e0fffd17 	ldw	r3,-12(fp)
 1004054:	e0bff817 	ldw	r2,-32(fp)
 1004058:	1880022e 	bgeu	r3,r2,1004064 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100405c:	e0bffd17 	ldw	r2,-12(fp)
 1004060:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1004064:	e0bffb17 	ldw	r2,-20(fp)
 1004068:	10c00e04 	addi	r3,r2,56
 100406c:	e0bff617 	ldw	r2,-40(fp)
 1004070:	1887883a 	add	r3,r3,r2
 1004074:	e0bffa17 	ldw	r2,-24(fp)
 1004078:	1009883a 	mov	r4,r2
 100407c:	180b883a 	mov	r5,r3
 1004080:	e1bff817 	ldw	r6,-32(fp)
 1004084:	100101c0 	call	100101c <memcpy>
      ptr   += n;
 1004088:	e0fff817 	ldw	r3,-32(fp)
 100408c:	e0bffa17 	ldw	r2,-24(fp)
 1004090:	10c5883a 	add	r2,r2,r3
 1004094:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1004098:	e0fffd17 	ldw	r3,-12(fp)
 100409c:	e0bff817 	ldw	r2,-32(fp)
 10040a0:	1885c83a 	sub	r2,r3,r2
 10040a4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10040a8:	e0fff617 	ldw	r3,-40(fp)
 10040ac:	e0bff817 	ldw	r2,-32(fp)
 10040b0:	1885883a 	add	r2,r3,r2
 10040b4:	10c1ffcc 	andi	r3,r2,2047
 10040b8:	e0bffb17 	ldw	r2,-20(fp)
 10040bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10040c0:	e0bffd17 	ldw	r2,-12(fp)
 10040c4:	10800048 	cmpgei	r2,r2,1
 10040c8:	103fcc1e 	bne	r2,zero,1003ffc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 10040cc:	e0fffa17 	ldw	r3,-24(fp)
 10040d0:	e0bffc17 	ldw	r2,-16(fp)
 10040d4:	1880141e 	bne	r3,r2,1004128 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10040d8:	e0bffe17 	ldw	r2,-8(fp)
 10040dc:	1090000c 	andi	r2,r2,16384
 10040e0:	1004c03a 	cmpne	r2,r2,zero
 10040e4:	1000101e 	bne	r2,zero,1004128 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 10040e8:	e0bffb17 	ldw	r2,-20(fp)
 10040ec:	10c00a17 	ldw	r3,40(r2)
 10040f0:	e0bff717 	ldw	r2,-36(fp)
 10040f4:	1880051e 	bne	r3,r2,100410c <altera_avalon_jtag_uart_read+0x13c>
 10040f8:	e0bffb17 	ldw	r2,-20(fp)
 10040fc:	10c00917 	ldw	r3,36(r2)
 1004100:	e0bffb17 	ldw	r2,-20(fp)
 1004104:	10800117 	ldw	r2,4(r2)
 1004108:	18bff736 	bltu	r3,r2,10040e8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100410c:	e0bffb17 	ldw	r2,-20(fp)
 1004110:	10c00a17 	ldw	r3,40(r2)
 1004114:	e0bff717 	ldw	r2,-36(fp)
 1004118:	18800326 	beq	r3,r2,1004128 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100411c:	e0bffd17 	ldw	r2,-12(fp)
 1004120:	10800048 	cmpgei	r2,r2,1
 1004124:	103fb51e 	bne	r2,zero,1003ffc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1004128:	e0fffa17 	ldw	r3,-24(fp)
 100412c:	e0bffc17 	ldw	r2,-16(fp)
 1004130:	18801926 	beq	r3,r2,1004198 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004134:	0005303a 	rdctl	r2,status
 1004138:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100413c:	e0fff517 	ldw	r3,-44(fp)
 1004140:	00bfff84 	movi	r2,-2
 1004144:	1884703a 	and	r2,r3,r2
 1004148:	1001703a 	wrctl	status,r2
  
  return context;
 100414c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1004150:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004154:	e0bffb17 	ldw	r2,-20(fp)
 1004158:	10800817 	ldw	r2,32(r2)
 100415c:	10c00054 	ori	r3,r2,1
 1004160:	e0bffb17 	ldw	r2,-20(fp)
 1004164:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004168:	e0bffb17 	ldw	r2,-20(fp)
 100416c:	10800017 	ldw	r2,0(r2)
 1004170:	11000104 	addi	r4,r2,4
 1004174:	e0bffb17 	ldw	r2,-20(fp)
 1004178:	10800817 	ldw	r2,32(r2)
 100417c:	1007883a 	mov	r3,r2
 1004180:	2005883a 	mov	r2,r4
 1004184:	10c00035 	stwio	r3,0(r2)
 1004188:	e0bff917 	ldw	r2,-28(fp)
 100418c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004190:	e0bff417 	ldw	r2,-48(fp)
 1004194:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1004198:	e0fffa17 	ldw	r3,-24(fp)
 100419c:	e0bffc17 	ldw	r2,-16(fp)
 10041a0:	18800526 	beq	r3,r2,10041b8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 10041a4:	e0fffa17 	ldw	r3,-24(fp)
 10041a8:	e0bffc17 	ldw	r2,-16(fp)
 10041ac:	1887c83a 	sub	r3,r3,r2
 10041b0:	e0ffff15 	stw	r3,-4(fp)
 10041b4:	00000906 	br	10041dc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 10041b8:	e0bffe17 	ldw	r2,-8(fp)
 10041bc:	1090000c 	andi	r2,r2,16384
 10041c0:	1005003a 	cmpeq	r2,r2,zero
 10041c4:	1000031e 	bne	r2,zero,10041d4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 10041c8:	00bffd44 	movi	r2,-11
 10041cc:	e0bfff15 	stw	r2,-4(fp)
 10041d0:	00000206 	br	10041dc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 10041d4:	00bffec4 	movi	r2,-5
 10041d8:	e0bfff15 	stw	r2,-4(fp)
 10041dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10041e0:	e037883a 	mov	sp,fp
 10041e4:	dfc00117 	ldw	ra,4(sp)
 10041e8:	df000017 	ldw	fp,0(sp)
 10041ec:	dec00204 	addi	sp,sp,8
 10041f0:	f800283a 	ret

010041f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10041f4:	defff204 	addi	sp,sp,-56
 10041f8:	dfc00d15 	stw	ra,52(sp)
 10041fc:	df000c15 	stw	fp,48(sp)
 1004200:	df000c04 	addi	fp,sp,48
 1004204:	e13ffb15 	stw	r4,-20(fp)
 1004208:	e17ffc15 	stw	r5,-16(fp)
 100420c:	e1bffd15 	stw	r6,-12(fp)
 1004210:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1004214:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1004218:	e0bffc17 	ldw	r2,-16(fp)
 100421c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1004220:	00003a06 	br	100430c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1004224:	e0bffb17 	ldw	r2,-20(fp)
 1004228:	10800c17 	ldw	r2,48(r2)
 100422c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1004230:	e0bffb17 	ldw	r2,-20(fp)
 1004234:	10800d17 	ldw	r2,52(r2)
 1004238:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100423c:	e0fffa17 	ldw	r3,-24(fp)
 1004240:	e0bff917 	ldw	r2,-28(fp)
 1004244:	1880062e 	bgeu	r3,r2,1004260 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1004248:	e0fff917 	ldw	r3,-28(fp)
 100424c:	e0bffa17 	ldw	r2,-24(fp)
 1004250:	1885c83a 	sub	r2,r3,r2
 1004254:	10bfffc4 	addi	r2,r2,-1
 1004258:	e0bff815 	stw	r2,-32(fp)
 100425c:	00000c06 	br	1004290 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 1004260:	e0bff917 	ldw	r2,-28(fp)
 1004264:	1005003a 	cmpeq	r2,r2,zero
 1004268:	1000051e 	bne	r2,zero,1004280 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100426c:	00820004 	movi	r2,2048
 1004270:	e0fffa17 	ldw	r3,-24(fp)
 1004274:	10c5c83a 	sub	r2,r2,r3
 1004278:	e0bff815 	stw	r2,-32(fp)
 100427c:	00000406 	br	1004290 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1004280:	0081ffc4 	movi	r2,2047
 1004284:	e0fffa17 	ldw	r3,-24(fp)
 1004288:	10c5c83a 	sub	r2,r2,r3
 100428c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1004290:	e0bff817 	ldw	r2,-32(fp)
 1004294:	1005003a 	cmpeq	r2,r2,zero
 1004298:	10001f1e 	bne	r2,zero,1004318 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100429c:	e0fffd17 	ldw	r3,-12(fp)
 10042a0:	e0bff817 	ldw	r2,-32(fp)
 10042a4:	1880022e 	bgeu	r3,r2,10042b0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 10042a8:	e0bffd17 	ldw	r2,-12(fp)
 10042ac:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10042b0:	e0bffb17 	ldw	r2,-20(fp)
 10042b4:	10c20e04 	addi	r3,r2,2104
 10042b8:	e0bffa17 	ldw	r2,-24(fp)
 10042bc:	1885883a 	add	r2,r3,r2
 10042c0:	e0fffc17 	ldw	r3,-16(fp)
 10042c4:	1009883a 	mov	r4,r2
 10042c8:	180b883a 	mov	r5,r3
 10042cc:	e1bff817 	ldw	r6,-32(fp)
 10042d0:	100101c0 	call	100101c <memcpy>
      ptr   += n;
 10042d4:	e0fff817 	ldw	r3,-32(fp)
 10042d8:	e0bffc17 	ldw	r2,-16(fp)
 10042dc:	10c5883a 	add	r2,r2,r3
 10042e0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 10042e4:	e0fffd17 	ldw	r3,-12(fp)
 10042e8:	e0bff817 	ldw	r2,-32(fp)
 10042ec:	1885c83a 	sub	r2,r3,r2
 10042f0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10042f4:	e0fffa17 	ldw	r3,-24(fp)
 10042f8:	e0bff817 	ldw	r2,-32(fp)
 10042fc:	1885883a 	add	r2,r3,r2
 1004300:	10c1ffcc 	andi	r3,r2,2047
 1004304:	e0bffb17 	ldw	r2,-20(fp)
 1004308:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100430c:	e0bffd17 	ldw	r2,-12(fp)
 1004310:	10800048 	cmpgei	r2,r2,1
 1004314:	103fc31e 	bne	r2,zero,1004224 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004318:	0005303a 	rdctl	r2,status
 100431c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004320:	e0fff517 	ldw	r3,-44(fp)
 1004324:	00bfff84 	movi	r2,-2
 1004328:	1884703a 	and	r2,r3,r2
 100432c:	1001703a 	wrctl	status,r2
  
  return context;
 1004330:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1004334:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1004338:	e0bffb17 	ldw	r2,-20(fp)
 100433c:	10800817 	ldw	r2,32(r2)
 1004340:	10c00094 	ori	r3,r2,2
 1004344:	e0bffb17 	ldw	r2,-20(fp)
 1004348:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100434c:	e0bffb17 	ldw	r2,-20(fp)
 1004350:	10800017 	ldw	r2,0(r2)
 1004354:	11000104 	addi	r4,r2,4
 1004358:	e0bffb17 	ldw	r2,-20(fp)
 100435c:	10800817 	ldw	r2,32(r2)
 1004360:	1007883a 	mov	r3,r2
 1004364:	2005883a 	mov	r2,r4
 1004368:	10c00035 	stwio	r3,0(r2)
 100436c:	e0bff717 	ldw	r2,-36(fp)
 1004370:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004374:	e0bff417 	ldw	r2,-48(fp)
 1004378:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100437c:	e0bffd17 	ldw	r2,-12(fp)
 1004380:	10800050 	cmplti	r2,r2,1
 1004384:	1000111e 	bne	r2,zero,10043cc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1004388:	e0bffe17 	ldw	r2,-8(fp)
 100438c:	1090000c 	andi	r2,r2,16384
 1004390:	1004c03a 	cmpne	r2,r2,zero
 1004394:	1000101e 	bne	r2,zero,10043d8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1004398:	e0bffb17 	ldw	r2,-20(fp)
 100439c:	10c00d17 	ldw	r3,52(r2)
 10043a0:	e0bff917 	ldw	r2,-28(fp)
 10043a4:	1880051e 	bne	r3,r2,10043bc <altera_avalon_jtag_uart_write+0x1c8>
 10043a8:	e0bffb17 	ldw	r2,-20(fp)
 10043ac:	10c00917 	ldw	r3,36(r2)
 10043b0:	e0bffb17 	ldw	r2,-20(fp)
 10043b4:	10800117 	ldw	r2,4(r2)
 10043b8:	18bff736 	bltu	r3,r2,1004398 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 10043bc:	e0bffb17 	ldw	r2,-20(fp)
 10043c0:	10c00d17 	ldw	r3,52(r2)
 10043c4:	e0bff917 	ldw	r2,-28(fp)
 10043c8:	18800326 	beq	r3,r2,10043d8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 10043cc:	e0bffd17 	ldw	r2,-12(fp)
 10043d0:	10800048 	cmpgei	r2,r2,1
 10043d4:	103fcd1e 	bne	r2,zero,100430c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 10043d8:	e0fffc17 	ldw	r3,-16(fp)
 10043dc:	e0bff617 	ldw	r2,-40(fp)
 10043e0:	18800526 	beq	r3,r2,10043f8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 10043e4:	e0fffc17 	ldw	r3,-16(fp)
 10043e8:	e0bff617 	ldw	r2,-40(fp)
 10043ec:	1887c83a 	sub	r3,r3,r2
 10043f0:	e0ffff15 	stw	r3,-4(fp)
 10043f4:	00000906 	br	100441c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 10043f8:	e0bffe17 	ldw	r2,-8(fp)
 10043fc:	1090000c 	andi	r2,r2,16384
 1004400:	1005003a 	cmpeq	r2,r2,zero
 1004404:	1000031e 	bne	r2,zero,1004414 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1004408:	00bffd44 	movi	r2,-11
 100440c:	e0bfff15 	stw	r2,-4(fp)
 1004410:	00000206 	br	100441c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1004414:	00bffec4 	movi	r2,-5
 1004418:	e0bfff15 	stw	r2,-4(fp)
 100441c:	e0bfff17 	ldw	r2,-4(fp)
}
 1004420:	e037883a 	mov	sp,fp
 1004424:	dfc00117 	ldw	ra,4(sp)
 1004428:	df000017 	ldw	fp,0(sp)
 100442c:	dec00204 	addi	sp,sp,8
 1004430:	f800283a 	ret

01004434 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 1004434:	defffc04 	addi	sp,sp,-16
 1004438:	dfc00315 	stw	ra,12(sp)
 100443c:	df000215 	stw	fp,8(sp)
 1004440:	df000204 	addi	fp,sp,8
 1004444:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 1004448:	e0bfff17 	ldw	r2,-4(fp)
 100444c:	10800217 	ldw	r2,8(r2)
 1004450:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 1004454:	00000c06 	br	1004488 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 1004458:	e13ffe17 	ldw	r4,-8(fp)
 100445c:	01404034 	movhi	r5,256
 1004460:	2956f804 	addi	r5,r5,23520
 1004464:	10057280 	call	1005728 <strcmp>
 1004468:	1004c03a 	cmpne	r2,r2,zero
 100446c:	1000031e 	bne	r2,zero,100447c <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 1004470:	e0bffe17 	ldw	r2,-8(fp)
 1004474:	10000005 	stb	zero,0(r2)
			break;
 1004478:	00000a06 	br	10044a4 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 100447c:	e0bffe17 	ldw	r2,-8(fp)
 1004480:	10800044 	addi	r2,r2,1
 1004484:	e0bffe15 	stw	r2,-8(fp)
 1004488:	e0bffe17 	ldw	r2,-8(fp)
 100448c:	10800003 	ldbu	r2,0(r2)
 1004490:	10803fcc 	andi	r2,r2,255
 1004494:	1080201c 	xori	r2,r2,128
 1004498:	10bfe004 	addi	r2,r2,-128
 100449c:	1004c03a 	cmpne	r2,r2,zero
 10044a0:	103fed1e 	bne	r2,zero,1004458 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 10044a4:	e037883a 	mov	sp,fp
 10044a8:	dfc00117 	ldw	ra,4(sp)
 10044ac:	df000017 	ldw	fp,0(sp)
 10044b0:	dec00204 	addi	sp,sp,8
 10044b4:	f800283a 	ret

010044b8 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 10044b8:	defffc04 	addi	sp,sp,-16
 10044bc:	dfc00315 	stw	ra,12(sp)
 10044c0:	df000215 	stw	fp,8(sp)
 10044c4:	df000204 	addi	fp,sp,8
 10044c8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 10044cc:	e13fff17 	ldw	r4,-4(fp)
 10044d0:	01404034 	movhi	r5,256
 10044d4:	295db004 	addi	r5,r5,30400
 10044d8:	1004aac0 	call	1004aac <alt_find_dev>
 10044dc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10044e0:	e0bffe17 	ldw	r2,-8(fp)
}
 10044e4:	e037883a 	mov	sp,fp
 10044e8:	dfc00117 	ldw	ra,4(sp)
 10044ec:	df000017 	ldw	fp,0(sp)
 10044f0:	dec00204 	addi	sp,sp,8
 10044f4:	f800283a 	ret

010044f8 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 10044f8:	defff904 	addi	sp,sp,-28
 10044fc:	df000615 	stw	fp,24(sp)
 1004500:	df000604 	addi	fp,sp,24
 1004504:	e13ffb15 	stw	r4,-20(fp)
 1004508:	e1bffd15 	stw	r6,-12(fp)
 100450c:	e1fffe15 	stw	r7,-8(fp)
 1004510:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 1004514:	e0bffb17 	ldw	r2,-20(fp)
 1004518:	10c00c17 	ldw	r3,48(r2)
 100451c:	e0bffd17 	ldw	r2,-12(fp)
 1004520:	10c0042e 	bgeu	r2,r3,1004534 <alt_up_char_buffer_draw+0x3c>
 1004524:	e0bffb17 	ldw	r2,-20(fp)
 1004528:	10c00d17 	ldw	r3,52(r2)
 100452c:	e0bffe17 	ldw	r2,-8(fp)
 1004530:	10c00336 	bltu	r2,r3,1004540 <alt_up_char_buffer_draw+0x48>
		return -1;
 1004534:	00bfffc4 	movi	r2,-1
 1004538:	e0bfff15 	stw	r2,-4(fp)
 100453c:	00001d06 	br	10045b4 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 1004540:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 1004544:	e0bffb17 	ldw	r2,-20(fp)
 1004548:	10c00f17 	ldw	r3,60(r2)
 100454c:	e0bffd17 	ldw	r2,-12(fp)
 1004550:	1886703a 	and	r3,r3,r2
 1004554:	e0bffb17 	ldw	r2,-20(fp)
 1004558:	10800e17 	ldw	r2,56(r2)
 100455c:	1886983a 	sll	r3,r3,r2
 1004560:	e0bffa17 	ldw	r2,-24(fp)
 1004564:	10c4b03a 	or	r2,r2,r3
 1004568:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 100456c:	e0bffb17 	ldw	r2,-20(fp)
 1004570:	10c01117 	ldw	r3,68(r2)
 1004574:	e0bffe17 	ldw	r2,-8(fp)
 1004578:	1886703a 	and	r3,r3,r2
 100457c:	e0bffb17 	ldw	r2,-20(fp)
 1004580:	10801017 	ldw	r2,64(r2)
 1004584:	1886983a 	sll	r3,r3,r2
 1004588:	e0bffa17 	ldw	r2,-24(fp)
 100458c:	10c4b03a 	or	r2,r2,r3
 1004590:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 1004594:	e0bffb17 	ldw	r2,-20(fp)
 1004598:	10800b17 	ldw	r2,44(r2)
 100459c:	1007883a 	mov	r3,r2
 10045a0:	e0bffa17 	ldw	r2,-24(fp)
 10045a4:	1885883a 	add	r2,r3,r2
 10045a8:	e0fffc03 	ldbu	r3,-16(fp)
 10045ac:	10c00025 	stbio	r3,0(r2)

	return 0;
 10045b0:	e03fff15 	stw	zero,-4(fp)
 10045b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10045b8:	e037883a 	mov	sp,fp
 10045bc:	df000017 	ldw	fp,0(sp)
 10045c0:	dec00104 	addi	sp,sp,4
 10045c4:	f800283a 	ret

010045c8 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 10045c8:	defff904 	addi	sp,sp,-28
 10045cc:	df000615 	stw	fp,24(sp)
 10045d0:	df000604 	addi	fp,sp,24
 10045d4:	e13ffb15 	stw	r4,-20(fp)
 10045d8:	e17ffc15 	stw	r5,-16(fp)
 10045dc:	e1bffd15 	stw	r6,-12(fp)
 10045e0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 10045e4:	e0bffb17 	ldw	r2,-20(fp)
 10045e8:	10c00c17 	ldw	r3,48(r2)
 10045ec:	e0bffd17 	ldw	r2,-12(fp)
 10045f0:	10c0042e 	bgeu	r2,r3,1004604 <alt_up_char_buffer_string+0x3c>
 10045f4:	e0bffb17 	ldw	r2,-20(fp)
 10045f8:	10c00d17 	ldw	r3,52(r2)
 10045fc:	e0bffe17 	ldw	r2,-8(fp)
 1004600:	10c00336 	bltu	r2,r3,1004610 <alt_up_char_buffer_string+0x48>
		return -1;
 1004604:	00bfffc4 	movi	r2,-1
 1004608:	e0bfff15 	stw	r2,-4(fp)
 100460c:	00002e06 	br	10046c8 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 1004610:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 1004614:	e0bffb17 	ldw	r2,-20(fp)
 1004618:	10801017 	ldw	r2,64(r2)
 100461c:	1007883a 	mov	r3,r2
 1004620:	e0bffe17 	ldw	r2,-8(fp)
 1004624:	10c6983a 	sll	r3,r2,r3
 1004628:	e0bffd17 	ldw	r2,-12(fp)
 100462c:	1885883a 	add	r2,r3,r2
 1004630:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 1004634:	00001c06 	br	10046a8 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 1004638:	e0bffb17 	ldw	r2,-20(fp)
 100463c:	10800b17 	ldw	r2,44(r2)
 1004640:	1007883a 	mov	r3,r2
 1004644:	e0bffa17 	ldw	r2,-24(fp)
 1004648:	1889883a 	add	r4,r3,r2
 100464c:	e0bffc17 	ldw	r2,-16(fp)
 1004650:	10800003 	ldbu	r2,0(r2)
 1004654:	10c03fcc 	andi	r3,r2,255
 1004658:	18c0201c 	xori	r3,r3,128
 100465c:	18ffe004 	addi	r3,r3,-128
 1004660:	2005883a 	mov	r2,r4
 1004664:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1004668:	e0bffc17 	ldw	r2,-16(fp)
 100466c:	10800044 	addi	r2,r2,1
 1004670:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 1004674:	e0bffd17 	ldw	r2,-12(fp)
 1004678:	10800044 	addi	r2,r2,1
 100467c:	e0bffd15 	stw	r2,-12(fp)
 1004680:	e0bffb17 	ldw	r2,-20(fp)
 1004684:	10c00c17 	ldw	r3,48(r2)
 1004688:	e0bffd17 	ldw	r2,-12(fp)
 100468c:	10c00336 	bltu	r2,r3,100469c <alt_up_char_buffer_string+0xd4>
			return -1;
 1004690:	00bfffc4 	movi	r2,-1
 1004694:	e0bfff15 	stw	r2,-4(fp)
 1004698:	00000b06 	br	10046c8 <alt_up_char_buffer_string+0x100>
		++offset;
 100469c:	e0bffa17 	ldw	r2,-24(fp)
 10046a0:	10800044 	addi	r2,r2,1
 10046a4:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 10046a8:	e0bffc17 	ldw	r2,-16(fp)
 10046ac:	10800003 	ldbu	r2,0(r2)
 10046b0:	10803fcc 	andi	r2,r2,255
 10046b4:	1080201c 	xori	r2,r2,128
 10046b8:	10bfe004 	addi	r2,r2,-128
 10046bc:	1004c03a 	cmpne	r2,r2,zero
 10046c0:	103fdd1e 	bne	r2,zero,1004638 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 10046c4:	e03fff15 	stw	zero,-4(fp)
 10046c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10046cc:	e037883a 	mov	sp,fp
 10046d0:	df000017 	ldw	fp,0(sp)
 10046d4:	dec00104 	addi	sp,sp,4
 10046d8:	f800283a 	ret

010046dc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 10046dc:	defffe04 	addi	sp,sp,-8
 10046e0:	df000115 	stw	fp,4(sp)
 10046e4:	df000104 	addi	fp,sp,4
 10046e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 10046ec:	e0bfff17 	ldw	r2,-4(fp)
 10046f0:	10800a17 	ldw	r2,40(r2)
 10046f4:	10800084 	addi	r2,r2,2
 10046f8:	1007883a 	mov	r3,r2
 10046fc:	00800044 	movi	r2,1
 1004700:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 1004704:	e0bfff17 	ldw	r2,-4(fp)
 1004708:	10800a17 	ldw	r2,40(r2)
 100470c:	10800084 	addi	r2,r2,2
 1004710:	10800023 	ldbuio	r2,0(r2)
 1004714:	1080004c 	andi	r2,r2,1
 1004718:	10803fcc 	andi	r2,r2,255
 100471c:	1004c03a 	cmpne	r2,r2,zero
 1004720:	103ff81e 	bne	r2,zero,1004704 <alt_up_char_buffer_clear+0x28>
	return 0;
 1004724:	0005883a 	mov	r2,zero
}
 1004728:	e037883a 	mov	sp,fp
 100472c:	df000017 	ldw	fp,0(sp)
 1004730:	dec00104 	addi	sp,sp,4
 1004734:	f800283a 	ret

01004738 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1004738:	defff404 	addi	sp,sp,-48
 100473c:	df000b15 	stw	fp,44(sp)
 1004740:	df000b04 	addi	fp,sp,44
 1004744:	e13ffb15 	stw	r4,-20(fp)
 1004748:	e17ffc15 	stw	r5,-16(fp)
 100474c:	e1bffd15 	stw	r6,-12(fp)
 1004750:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1004754:	e03ff915 	stw	zero,-28(fp)
 1004758:	00804074 	movhi	r2,257
 100475c:	10a47904 	addi	r2,r2,-28188
 1004760:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1004764:	1005003a 	cmpeq	r2,r2,zero
 1004768:	1000411e 	bne	r2,zero,1004870 <alt_alarm_start+0x138>
  {
    if (alarm)
 100476c:	e0bffb17 	ldw	r2,-20(fp)
 1004770:	1005003a 	cmpeq	r2,r2,zero
 1004774:	10003b1e 	bne	r2,zero,1004864 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1004778:	e0fffb17 	ldw	r3,-20(fp)
 100477c:	e0bffd17 	ldw	r2,-12(fp)
 1004780:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1004784:	e0fffb17 	ldw	r3,-20(fp)
 1004788:	e0bffe17 	ldw	r2,-8(fp)
 100478c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004790:	0005303a 	rdctl	r2,status
 1004794:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004798:	e0fff817 	ldw	r3,-32(fp)
 100479c:	00bfff84 	movi	r2,-2
 10047a0:	1884703a 	and	r2,r3,r2
 10047a4:	1001703a 	wrctl	status,r2
  
  return context;
 10047a8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10047ac:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10047b0:	00804074 	movhi	r2,257
 10047b4:	10a47a04 	addi	r2,r2,-28184
 10047b8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10047bc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10047c0:	e0fffc17 	ldw	r3,-16(fp)
 10047c4:	e0bff917 	ldw	r2,-28(fp)
 10047c8:	1885883a 	add	r2,r3,r2
 10047cc:	10c00044 	addi	r3,r2,1
 10047d0:	e0bffb17 	ldw	r2,-20(fp)
 10047d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10047d8:	e0bffb17 	ldw	r2,-20(fp)
 10047dc:	10c00217 	ldw	r3,8(r2)
 10047e0:	e0bff917 	ldw	r2,-28(fp)
 10047e4:	1880042e 	bgeu	r3,r2,10047f8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 10047e8:	e0fffb17 	ldw	r3,-20(fp)
 10047ec:	00800044 	movi	r2,1
 10047f0:	18800405 	stb	r2,16(r3)
 10047f4:	00000206 	br	1004800 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10047f8:	e0bffb17 	ldw	r2,-20(fp)
 10047fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1004800:	e0fffb17 	ldw	r3,-20(fp)
 1004804:	00804034 	movhi	r2,256
 1004808:	109db604 	addi	r2,r2,30424
 100480c:	e0bff615 	stw	r2,-40(fp)
 1004810:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004814:	e0fff717 	ldw	r3,-36(fp)
 1004818:	e0bff617 	ldw	r2,-40(fp)
 100481c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1004820:	e0bff617 	ldw	r2,-40(fp)
 1004824:	10c00017 	ldw	r3,0(r2)
 1004828:	e0bff717 	ldw	r2,-36(fp)
 100482c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004830:	e0bff617 	ldw	r2,-40(fp)
 1004834:	10c00017 	ldw	r3,0(r2)
 1004838:	e0bff717 	ldw	r2,-36(fp)
 100483c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1004840:	e0fff617 	ldw	r3,-40(fp)
 1004844:	e0bff717 	ldw	r2,-36(fp)
 1004848:	18800015 	stw	r2,0(r3)
 100484c:	e0bffa17 	ldw	r2,-24(fp)
 1004850:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004854:	e0bff517 	ldw	r2,-44(fp)
 1004858:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100485c:	e03fff15 	stw	zero,-4(fp)
 1004860:	00000506 	br	1004878 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1004864:	00bffa84 	movi	r2,-22
 1004868:	e0bfff15 	stw	r2,-4(fp)
 100486c:	00000206 	br	1004878 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1004870:	00bfde84 	movi	r2,-134
 1004874:	e0bfff15 	stw	r2,-4(fp)
 1004878:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100487c:	e037883a 	mov	sp,fp
 1004880:	df000017 	ldw	fp,0(sp)
 1004884:	dec00104 	addi	sp,sp,4
 1004888:	f800283a 	ret

0100488c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100488c:	defffe04 	addi	sp,sp,-8
 1004890:	df000115 	stw	fp,4(sp)
 1004894:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1004898:	e03fff15 	stw	zero,-4(fp)
 100489c:	00000506 	br	10048b4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 10048a0:	e0bfff17 	ldw	r2,-4(fp)
 10048a4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10048a8:	e0bfff17 	ldw	r2,-4(fp)
 10048ac:	10800804 	addi	r2,r2,32
 10048b0:	e0bfff15 	stw	r2,-4(fp)
 10048b4:	e0bfff17 	ldw	r2,-4(fp)
 10048b8:	10820030 	cmpltui	r2,r2,2048
 10048bc:	103ff81e 	bne	r2,zero,10048a0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10048c0:	e037883a 	mov	sp,fp
 10048c4:	df000017 	ldw	fp,0(sp)
 10048c8:	dec00104 	addi	sp,sp,4
 10048cc:	f800283a 	ret

010048d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10048d0:	defff904 	addi	sp,sp,-28
 10048d4:	dfc00615 	stw	ra,24(sp)
 10048d8:	df000515 	stw	fp,20(sp)
 10048dc:	df000504 	addi	fp,sp,20
 10048e0:	e13ffd15 	stw	r4,-12(fp)
 10048e4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10048e8:	e0bffd17 	ldw	r2,-12(fp)
 10048ec:	1005003a 	cmpeq	r2,r2,zero
 10048f0:	1000041e 	bne	r2,zero,1004904 <alt_dev_llist_insert+0x34>
 10048f4:	e0bffd17 	ldw	r2,-12(fp)
 10048f8:	10800217 	ldw	r2,8(r2)
 10048fc:	1004c03a 	cmpne	r2,r2,zero
 1004900:	1000071e 	bne	r2,zero,1004920 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1004904:	10049840 	call	1004984 <alt_get_errno>
 1004908:	1007883a 	mov	r3,r2
 100490c:	00800584 	movi	r2,22
 1004910:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1004914:	00bffa84 	movi	r2,-22
 1004918:	e0bfff15 	stw	r2,-4(fp)
 100491c:	00001306 	br	100496c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1004920:	e0fffd17 	ldw	r3,-12(fp)
 1004924:	e0bffe17 	ldw	r2,-8(fp)
 1004928:	e0bffb15 	stw	r2,-20(fp)
 100492c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004930:	e0fffc17 	ldw	r3,-16(fp)
 1004934:	e0bffb17 	ldw	r2,-20(fp)
 1004938:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100493c:	e0bffb17 	ldw	r2,-20(fp)
 1004940:	10c00017 	ldw	r3,0(r2)
 1004944:	e0bffc17 	ldw	r2,-16(fp)
 1004948:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100494c:	e0bffb17 	ldw	r2,-20(fp)
 1004950:	10c00017 	ldw	r3,0(r2)
 1004954:	e0bffc17 	ldw	r2,-16(fp)
 1004958:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100495c:	e0fffb17 	ldw	r3,-20(fp)
 1004960:	e0bffc17 	ldw	r2,-16(fp)
 1004964:	18800015 	stw	r2,0(r3)

  return 0;  
 1004968:	e03fff15 	stw	zero,-4(fp)
 100496c:	e0bfff17 	ldw	r2,-4(fp)
}
 1004970:	e037883a 	mov	sp,fp
 1004974:	dfc00117 	ldw	ra,4(sp)
 1004978:	df000017 	ldw	fp,0(sp)
 100497c:	dec00204 	addi	sp,sp,8
 1004980:	f800283a 	ret

01004984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004984:	defffd04 	addi	sp,sp,-12
 1004988:	dfc00215 	stw	ra,8(sp)
 100498c:	df000115 	stw	fp,4(sp)
 1004990:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1004994:	00804034 	movhi	r2,256
 1004998:	109db304 	addi	r2,r2,30412
 100499c:	10800017 	ldw	r2,0(r2)
 10049a0:	1005003a 	cmpeq	r2,r2,zero
 10049a4:	1000061e 	bne	r2,zero,10049c0 <alt_get_errno+0x3c>
 10049a8:	00804034 	movhi	r2,256
 10049ac:	109db304 	addi	r2,r2,30412
 10049b0:	10800017 	ldw	r2,0(r2)
 10049b4:	103ee83a 	callr	r2
 10049b8:	e0bfff15 	stw	r2,-4(fp)
 10049bc:	00000306 	br	10049cc <alt_get_errno+0x48>
 10049c0:	00804074 	movhi	r2,257
 10049c4:	10a47404 	addi	r2,r2,-28208
 10049c8:	e0bfff15 	stw	r2,-4(fp)
 10049cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10049d0:	e037883a 	mov	sp,fp
 10049d4:	dfc00117 	ldw	ra,4(sp)
 10049d8:	df000017 	ldw	fp,0(sp)
 10049dc:	dec00204 	addi	sp,sp,8
 10049e0:	f800283a 	ret

010049e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10049e4:	defffd04 	addi	sp,sp,-12
 10049e8:	dfc00215 	stw	ra,8(sp)
 10049ec:	df000115 	stw	fp,4(sp)
 10049f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10049f4:	00bfff04 	movi	r2,-4
 10049f8:	00c04034 	movhi	r3,256
 10049fc:	18d6cc04 	addi	r3,r3,23344
 1004a00:	1885883a 	add	r2,r3,r2
 1004a04:	e0bfff15 	stw	r2,-4(fp)
 1004a08:	00000606 	br	1004a24 <_do_ctors+0x40>
        (*ctor) (); 
 1004a0c:	e0bfff17 	ldw	r2,-4(fp)
 1004a10:	10800017 	ldw	r2,0(r2)
 1004a14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004a18:	e0bfff17 	ldw	r2,-4(fp)
 1004a1c:	10bfff04 	addi	r2,r2,-4
 1004a20:	e0bfff15 	stw	r2,-4(fp)
 1004a24:	e0ffff17 	ldw	r3,-4(fp)
 1004a28:	00804034 	movhi	r2,256
 1004a2c:	1096cb04 	addi	r2,r2,23340
 1004a30:	18bff62e 	bgeu	r3,r2,1004a0c <_do_ctors+0x28>
        (*ctor) (); 
}
 1004a34:	e037883a 	mov	sp,fp
 1004a38:	dfc00117 	ldw	ra,4(sp)
 1004a3c:	df000017 	ldw	fp,0(sp)
 1004a40:	dec00204 	addi	sp,sp,8
 1004a44:	f800283a 	ret

01004a48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1004a48:	defffd04 	addi	sp,sp,-12
 1004a4c:	dfc00215 	stw	ra,8(sp)
 1004a50:	df000115 	stw	fp,4(sp)
 1004a54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004a58:	00bfff04 	movi	r2,-4
 1004a5c:	00c04034 	movhi	r3,256
 1004a60:	18d6cc04 	addi	r3,r3,23344
 1004a64:	1885883a 	add	r2,r3,r2
 1004a68:	e0bfff15 	stw	r2,-4(fp)
 1004a6c:	00000606 	br	1004a88 <_do_dtors+0x40>
        (*dtor) (); 
 1004a70:	e0bfff17 	ldw	r2,-4(fp)
 1004a74:	10800017 	ldw	r2,0(r2)
 1004a78:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004a7c:	e0bfff17 	ldw	r2,-4(fp)
 1004a80:	10bfff04 	addi	r2,r2,-4
 1004a84:	e0bfff15 	stw	r2,-4(fp)
 1004a88:	e0ffff17 	ldw	r3,-4(fp)
 1004a8c:	00804034 	movhi	r2,256
 1004a90:	1096cc04 	addi	r2,r2,23344
 1004a94:	18bff62e 	bgeu	r3,r2,1004a70 <_do_dtors+0x28>
        (*dtor) (); 
}
 1004a98:	e037883a 	mov	sp,fp
 1004a9c:	dfc00117 	ldw	ra,4(sp)
 1004aa0:	df000017 	ldw	fp,0(sp)
 1004aa4:	dec00204 	addi	sp,sp,8
 1004aa8:	f800283a 	ret

01004aac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1004aac:	defff904 	addi	sp,sp,-28
 1004ab0:	dfc00615 	stw	ra,24(sp)
 1004ab4:	df000515 	stw	fp,20(sp)
 1004ab8:	df000504 	addi	fp,sp,20
 1004abc:	e13ffd15 	stw	r4,-12(fp)
 1004ac0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1004ac4:	e0bffe17 	ldw	r2,-8(fp)
 1004ac8:	10800017 	ldw	r2,0(r2)
 1004acc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1004ad0:	e13ffd17 	ldw	r4,-12(fp)
 1004ad4:	10002e80 	call	10002e8 <strlen>
 1004ad8:	10800044 	addi	r2,r2,1
 1004adc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1004ae0:	00000d06 	br	1004b18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1004ae4:	e0bffc17 	ldw	r2,-16(fp)
 1004ae8:	11000217 	ldw	r4,8(r2)
 1004aec:	e1bffb17 	ldw	r6,-20(fp)
 1004af0:	e17ffd17 	ldw	r5,-12(fp)
 1004af4:	10056b40 	call	10056b4 <memcmp>
 1004af8:	1004c03a 	cmpne	r2,r2,zero
 1004afc:	1000031e 	bne	r2,zero,1004b0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1004b00:	e0bffc17 	ldw	r2,-16(fp)
 1004b04:	e0bfff15 	stw	r2,-4(fp)
 1004b08:	00000706 	br	1004b28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1004b0c:	e0bffc17 	ldw	r2,-16(fp)
 1004b10:	10800017 	ldw	r2,0(r2)
 1004b14:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1004b18:	e0fffe17 	ldw	r3,-8(fp)
 1004b1c:	e0bffc17 	ldw	r2,-16(fp)
 1004b20:	10fff01e 	bne	r2,r3,1004ae4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1004b24:	e03fff15 	stw	zero,-4(fp)
 1004b28:	e0bfff17 	ldw	r2,-4(fp)
}
 1004b2c:	e037883a 	mov	sp,fp
 1004b30:	dfc00117 	ldw	ra,4(sp)
 1004b34:	df000017 	ldw	fp,0(sp)
 1004b38:	dec00204 	addi	sp,sp,8
 1004b3c:	f800283a 	ret

01004b40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1004b40:	defffe04 	addi	sp,sp,-8
 1004b44:	dfc00115 	stw	ra,4(sp)
 1004b48:	df000015 	stw	fp,0(sp)
 1004b4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1004b50:	0009883a 	mov	r4,zero
 1004b54:	01440004 	movi	r5,4096
 1004b58:	10055d80 	call	10055d8 <alt_icache_flush>
#endif
}
 1004b5c:	e037883a 	mov	sp,fp
 1004b60:	dfc00117 	ldw	ra,4(sp)
 1004b64:	df000017 	ldw	fp,0(sp)
 1004b68:	dec00204 	addi	sp,sp,8
 1004b6c:	f800283a 	ret

01004b70 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1004b70:	defff904 	addi	sp,sp,-28
 1004b74:	dfc00615 	stw	ra,24(sp)
 1004b78:	df000515 	stw	fp,20(sp)
 1004b7c:	df000504 	addi	fp,sp,20
 1004b80:	e13ffc15 	stw	r4,-16(fp)
 1004b84:	e17ffd15 	stw	r5,-12(fp)
 1004b88:	e1bffe15 	stw	r6,-8(fp)
 1004b8c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1004b90:	e0800217 	ldw	r2,8(fp)
 1004b94:	d8800015 	stw	r2,0(sp)
 1004b98:	e13ffc17 	ldw	r4,-16(fp)
 1004b9c:	e17ffd17 	ldw	r5,-12(fp)
 1004ba0:	e1bffe17 	ldw	r6,-8(fp)
 1004ba4:	e1ffff17 	ldw	r7,-4(fp)
 1004ba8:	1004d440 	call	1004d44 <alt_iic_isr_register>
}  
 1004bac:	e037883a 	mov	sp,fp
 1004bb0:	dfc00117 	ldw	ra,4(sp)
 1004bb4:	df000017 	ldw	fp,0(sp)
 1004bb8:	dec00204 	addi	sp,sp,8
 1004bbc:	f800283a 	ret

01004bc0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1004bc0:	defff904 	addi	sp,sp,-28
 1004bc4:	df000615 	stw	fp,24(sp)
 1004bc8:	df000604 	addi	fp,sp,24
 1004bcc:	e13ffe15 	stw	r4,-8(fp)
 1004bd0:	e17fff15 	stw	r5,-4(fp)
 1004bd4:	e0bfff17 	ldw	r2,-4(fp)
 1004bd8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004bdc:	0005303a 	rdctl	r2,status
 1004be0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004be4:	e0fffb17 	ldw	r3,-20(fp)
 1004be8:	00bfff84 	movi	r2,-2
 1004bec:	1884703a 	and	r2,r3,r2
 1004bf0:	1001703a 	wrctl	status,r2
  
  return context;
 1004bf4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1004bf8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1004bfc:	e0fffc17 	ldw	r3,-16(fp)
 1004c00:	00800044 	movi	r2,1
 1004c04:	10c4983a 	sll	r2,r2,r3
 1004c08:	1007883a 	mov	r3,r2
 1004c0c:	00804074 	movhi	r2,257
 1004c10:	10a47804 	addi	r2,r2,-28192
 1004c14:	10800017 	ldw	r2,0(r2)
 1004c18:	1886b03a 	or	r3,r3,r2
 1004c1c:	00804074 	movhi	r2,257
 1004c20:	10a47804 	addi	r2,r2,-28192
 1004c24:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1004c28:	00804074 	movhi	r2,257
 1004c2c:	10a47804 	addi	r2,r2,-28192
 1004c30:	10800017 	ldw	r2,0(r2)
 1004c34:	100170fa 	wrctl	ienable,r2
 1004c38:	e0bffd17 	ldw	r2,-12(fp)
 1004c3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004c40:	e0bffa17 	ldw	r2,-24(fp)
 1004c44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1004c48:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1004c4c:	e037883a 	mov	sp,fp
 1004c50:	df000017 	ldw	fp,0(sp)
 1004c54:	dec00104 	addi	sp,sp,4
 1004c58:	f800283a 	ret

01004c5c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1004c5c:	defff904 	addi	sp,sp,-28
 1004c60:	df000615 	stw	fp,24(sp)
 1004c64:	df000604 	addi	fp,sp,24
 1004c68:	e13ffe15 	stw	r4,-8(fp)
 1004c6c:	e17fff15 	stw	r5,-4(fp)
 1004c70:	e0bfff17 	ldw	r2,-4(fp)
 1004c74:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004c78:	0005303a 	rdctl	r2,status
 1004c7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004c80:	e0fffb17 	ldw	r3,-20(fp)
 1004c84:	00bfff84 	movi	r2,-2
 1004c88:	1884703a 	and	r2,r3,r2
 1004c8c:	1001703a 	wrctl	status,r2
  
  return context;
 1004c90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1004c94:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1004c98:	e0fffc17 	ldw	r3,-16(fp)
 1004c9c:	00800044 	movi	r2,1
 1004ca0:	10c4983a 	sll	r2,r2,r3
 1004ca4:	0084303a 	nor	r2,zero,r2
 1004ca8:	1007883a 	mov	r3,r2
 1004cac:	00804074 	movhi	r2,257
 1004cb0:	10a47804 	addi	r2,r2,-28192
 1004cb4:	10800017 	ldw	r2,0(r2)
 1004cb8:	1886703a 	and	r3,r3,r2
 1004cbc:	00804074 	movhi	r2,257
 1004cc0:	10a47804 	addi	r2,r2,-28192
 1004cc4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1004cc8:	00804074 	movhi	r2,257
 1004ccc:	10a47804 	addi	r2,r2,-28192
 1004cd0:	10800017 	ldw	r2,0(r2)
 1004cd4:	100170fa 	wrctl	ienable,r2
 1004cd8:	e0bffd17 	ldw	r2,-12(fp)
 1004cdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004ce0:	e0bffa17 	ldw	r2,-24(fp)
 1004ce4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1004ce8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1004cec:	e037883a 	mov	sp,fp
 1004cf0:	df000017 	ldw	fp,0(sp)
 1004cf4:	dec00104 	addi	sp,sp,4
 1004cf8:	f800283a 	ret

01004cfc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1004cfc:	defffc04 	addi	sp,sp,-16
 1004d00:	df000315 	stw	fp,12(sp)
 1004d04:	df000304 	addi	fp,sp,12
 1004d08:	e13ffe15 	stw	r4,-8(fp)
 1004d0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1004d10:	000530fa 	rdctl	r2,ienable
 1004d14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1004d18:	e0ffff17 	ldw	r3,-4(fp)
 1004d1c:	00800044 	movi	r2,1
 1004d20:	10c4983a 	sll	r2,r2,r3
 1004d24:	1007883a 	mov	r3,r2
 1004d28:	e0bffd17 	ldw	r2,-12(fp)
 1004d2c:	1884703a 	and	r2,r3,r2
 1004d30:	1004c03a 	cmpne	r2,r2,zero
}
 1004d34:	e037883a 	mov	sp,fp
 1004d38:	df000017 	ldw	fp,0(sp)
 1004d3c:	dec00104 	addi	sp,sp,4
 1004d40:	f800283a 	ret

01004d44 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1004d44:	defff404 	addi	sp,sp,-48
 1004d48:	dfc00b15 	stw	ra,44(sp)
 1004d4c:	df000a15 	stw	fp,40(sp)
 1004d50:	df000a04 	addi	fp,sp,40
 1004d54:	e13ffb15 	stw	r4,-20(fp)
 1004d58:	e17ffc15 	stw	r5,-16(fp)
 1004d5c:	e1bffd15 	stw	r6,-12(fp)
 1004d60:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1004d64:	00bffa84 	movi	r2,-22
 1004d68:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1004d6c:	e0bffc17 	ldw	r2,-16(fp)
 1004d70:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1004d74:	e0bff917 	ldw	r2,-28(fp)
 1004d78:	10800808 	cmpgei	r2,r2,32
 1004d7c:	1000291e 	bne	r2,zero,1004e24 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004d80:	0005303a 	rdctl	r2,status
 1004d84:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004d88:	e0fff717 	ldw	r3,-36(fp)
 1004d8c:	00bfff84 	movi	r2,-2
 1004d90:	1884703a 	and	r2,r3,r2
 1004d94:	1001703a 	wrctl	status,r2
  
  return context;
 1004d98:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1004d9c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 1004da0:	e0bff917 	ldw	r2,-28(fp)
 1004da4:	00c04074 	movhi	r3,257
 1004da8:	18e48504 	addi	r3,r3,-28140
 1004dac:	100490fa 	slli	r2,r2,3
 1004db0:	10c7883a 	add	r3,r2,r3
 1004db4:	e0bffd17 	ldw	r2,-12(fp)
 1004db8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1004dbc:	e0bff917 	ldw	r2,-28(fp)
 1004dc0:	00c04074 	movhi	r3,257
 1004dc4:	18e48504 	addi	r3,r3,-28140
 1004dc8:	100490fa 	slli	r2,r2,3
 1004dcc:	10c5883a 	add	r2,r2,r3
 1004dd0:	10c00104 	addi	r3,r2,4
 1004dd4:	e0bffe17 	ldw	r2,-8(fp)
 1004dd8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1004ddc:	e0bffd17 	ldw	r2,-12(fp)
 1004de0:	1005003a 	cmpeq	r2,r2,zero
 1004de4:	1000051e 	bne	r2,zero,1004dfc <alt_iic_isr_register+0xb8>
 1004de8:	e17ff917 	ldw	r5,-28(fp)
 1004dec:	e13ffb17 	ldw	r4,-20(fp)
 1004df0:	1004bc00 	call	1004bc0 <alt_ic_irq_enable>
 1004df4:	e0bfff15 	stw	r2,-4(fp)
 1004df8:	00000406 	br	1004e0c <alt_iic_isr_register+0xc8>
 1004dfc:	e17ff917 	ldw	r5,-28(fp)
 1004e00:	e13ffb17 	ldw	r4,-20(fp)
 1004e04:	1004c5c0 	call	1004c5c <alt_ic_irq_disable>
 1004e08:	e0bfff15 	stw	r2,-4(fp)
 1004e0c:	e0bfff17 	ldw	r2,-4(fp)
 1004e10:	e0bffa15 	stw	r2,-24(fp)
 1004e14:	e0bff817 	ldw	r2,-32(fp)
 1004e18:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004e1c:	e0bff617 	ldw	r2,-40(fp)
 1004e20:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1004e24:	e0bffa17 	ldw	r2,-24(fp)
}
 1004e28:	e037883a 	mov	sp,fp
 1004e2c:	dfc00117 	ldw	ra,4(sp)
 1004e30:	df000017 	ldw	fp,0(sp)
 1004e34:	dec00204 	addi	sp,sp,8
 1004e38:	f800283a 	ret

01004e3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1004e3c:	defff904 	addi	sp,sp,-28
 1004e40:	dfc00615 	stw	ra,24(sp)
 1004e44:	df000515 	stw	fp,20(sp)
 1004e48:	df000504 	addi	fp,sp,20
 1004e4c:	e13ffc15 	stw	r4,-16(fp)
 1004e50:	e17ffd15 	stw	r5,-12(fp)
 1004e54:	e1bffe15 	stw	r6,-8(fp)
 1004e58:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1004e5c:	e13ffd17 	ldw	r4,-12(fp)
 1004e60:	e17ffe17 	ldw	r5,-8(fp)
 1004e64:	e1bfff17 	ldw	r6,-4(fp)
 1004e68:	10050540 	call	1005054 <open>
 1004e6c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1004e70:	e0bffb17 	ldw	r2,-20(fp)
 1004e74:	1004803a 	cmplt	r2,r2,zero
 1004e78:	10001c1e 	bne	r2,zero,1004eec <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1004e7c:	e0bffb17 	ldw	r2,-20(fp)
 1004e80:	00c04034 	movhi	r3,256
 1004e84:	18d90b04 	addi	r3,r3,25644
 1004e88:	10800324 	muli	r2,r2,12
 1004e8c:	10c5883a 	add	r2,r2,r3
 1004e90:	10c00017 	ldw	r3,0(r2)
 1004e94:	e0bffc17 	ldw	r2,-16(fp)
 1004e98:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1004e9c:	e0bffb17 	ldw	r2,-20(fp)
 1004ea0:	00c04034 	movhi	r3,256
 1004ea4:	18d90b04 	addi	r3,r3,25644
 1004ea8:	10800324 	muli	r2,r2,12
 1004eac:	10c5883a 	add	r2,r2,r3
 1004eb0:	10800104 	addi	r2,r2,4
 1004eb4:	10c00017 	ldw	r3,0(r2)
 1004eb8:	e0bffc17 	ldw	r2,-16(fp)
 1004ebc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1004ec0:	e0bffb17 	ldw	r2,-20(fp)
 1004ec4:	00c04034 	movhi	r3,256
 1004ec8:	18d90b04 	addi	r3,r3,25644
 1004ecc:	10800324 	muli	r2,r2,12
 1004ed0:	10c5883a 	add	r2,r2,r3
 1004ed4:	10800204 	addi	r2,r2,8
 1004ed8:	10c00017 	ldw	r3,0(r2)
 1004edc:	e0bffc17 	ldw	r2,-16(fp)
 1004ee0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1004ee4:	e13ffb17 	ldw	r4,-20(fp)
 1004ee8:	10033880 	call	1003388 <alt_release_fd>
  }
} 
 1004eec:	e037883a 	mov	sp,fp
 1004ef0:	dfc00117 	ldw	ra,4(sp)
 1004ef4:	df000017 	ldw	fp,0(sp)
 1004ef8:	dec00204 	addi	sp,sp,8
 1004efc:	f800283a 	ret

01004f00 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1004f00:	defffb04 	addi	sp,sp,-20
 1004f04:	dfc00415 	stw	ra,16(sp)
 1004f08:	df000315 	stw	fp,12(sp)
 1004f0c:	df000304 	addi	fp,sp,12
 1004f10:	e13ffd15 	stw	r4,-12(fp)
 1004f14:	e17ffe15 	stw	r5,-8(fp)
 1004f18:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1004f1c:	01004034 	movhi	r4,256
 1004f20:	21190e04 	addi	r4,r4,25656
 1004f24:	e17ffd17 	ldw	r5,-12(fp)
 1004f28:	01800044 	movi	r6,1
 1004f2c:	01c07fc4 	movi	r7,511
 1004f30:	1004e3c0 	call	1004e3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1004f34:	01004034 	movhi	r4,256
 1004f38:	21190b04 	addi	r4,r4,25644
 1004f3c:	e17ffe17 	ldw	r5,-8(fp)
 1004f40:	000d883a 	mov	r6,zero
 1004f44:	01c07fc4 	movi	r7,511
 1004f48:	1004e3c0 	call	1004e3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1004f4c:	01004034 	movhi	r4,256
 1004f50:	21191104 	addi	r4,r4,25668
 1004f54:	e17fff17 	ldw	r5,-4(fp)
 1004f58:	01800044 	movi	r6,1
 1004f5c:	01c07fc4 	movi	r7,511
 1004f60:	1004e3c0 	call	1004e3c <alt_open_fd>
}  
 1004f64:	e037883a 	mov	sp,fp
 1004f68:	dfc00117 	ldw	ra,4(sp)
 1004f6c:	df000017 	ldw	fp,0(sp)
 1004f70:	dec00204 	addi	sp,sp,8
 1004f74:	f800283a 	ret

01004f78 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1004f78:	defffc04 	addi	sp,sp,-16
 1004f7c:	df000315 	stw	fp,12(sp)
 1004f80:	df000304 	addi	fp,sp,12
 1004f84:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1004f88:	e0bffe17 	ldw	r2,-8(fp)
 1004f8c:	10800217 	ldw	r2,8(r2)
 1004f90:	10d00034 	orhi	r3,r2,16384
 1004f94:	e0bffe17 	ldw	r2,-8(fp)
 1004f98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1004f9c:	e03ffd15 	stw	zero,-12(fp)
 1004fa0:	00002006 	br	1005024 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1004fa4:	e0bffd17 	ldw	r2,-12(fp)
 1004fa8:	00c04034 	movhi	r3,256
 1004fac:	18d90b04 	addi	r3,r3,25644
 1004fb0:	10800324 	muli	r2,r2,12
 1004fb4:	10c5883a 	add	r2,r2,r3
 1004fb8:	10c00017 	ldw	r3,0(r2)
 1004fbc:	e0bffe17 	ldw	r2,-8(fp)
 1004fc0:	10800017 	ldw	r2,0(r2)
 1004fc4:	1880141e 	bne	r3,r2,1005018 <alt_file_locked+0xa0>
 1004fc8:	e0bffd17 	ldw	r2,-12(fp)
 1004fcc:	00c04034 	movhi	r3,256
 1004fd0:	18d90b04 	addi	r3,r3,25644
 1004fd4:	10800324 	muli	r2,r2,12
 1004fd8:	10c5883a 	add	r2,r2,r3
 1004fdc:	10800204 	addi	r2,r2,8
 1004fe0:	10800017 	ldw	r2,0(r2)
 1004fe4:	1004403a 	cmpge	r2,r2,zero
 1004fe8:	10000b1e 	bne	r2,zero,1005018 <alt_file_locked+0xa0>
 1004fec:	e0bffd17 	ldw	r2,-12(fp)
 1004ff0:	10800324 	muli	r2,r2,12
 1004ff4:	1007883a 	mov	r3,r2
 1004ff8:	00804034 	movhi	r2,256
 1004ffc:	10990b04 	addi	r2,r2,25644
 1005000:	1887883a 	add	r3,r3,r2
 1005004:	e0bffe17 	ldw	r2,-8(fp)
 1005008:	18800326 	beq	r3,r2,1005018 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100500c:	00bffcc4 	movi	r2,-13
 1005010:	e0bfff15 	stw	r2,-4(fp)
 1005014:	00000a06 	br	1005040 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1005018:	e0bffd17 	ldw	r2,-12(fp)
 100501c:	10800044 	addi	r2,r2,1
 1005020:	e0bffd15 	stw	r2,-12(fp)
 1005024:	00804034 	movhi	r2,256
 1005028:	109db204 	addi	r2,r2,30408
 100502c:	10800017 	ldw	r2,0(r2)
 1005030:	1007883a 	mov	r3,r2
 1005034:	e0bffd17 	ldw	r2,-12(fp)
 1005038:	18bfda2e 	bgeu	r3,r2,1004fa4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100503c:	e03fff15 	stw	zero,-4(fp)
 1005040:	e0bfff17 	ldw	r2,-4(fp)
}
 1005044:	e037883a 	mov	sp,fp
 1005048:	df000017 	ldw	fp,0(sp)
 100504c:	dec00104 	addi	sp,sp,4
 1005050:	f800283a 	ret

01005054 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1005054:	defff404 	addi	sp,sp,-48
 1005058:	dfc00b15 	stw	ra,44(sp)
 100505c:	df000a15 	stw	fp,40(sp)
 1005060:	df000a04 	addi	fp,sp,40
 1005064:	e13ffb15 	stw	r4,-20(fp)
 1005068:	e17ffc15 	stw	r5,-16(fp)
 100506c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1005070:	00bfffc4 	movi	r2,-1
 1005074:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1005078:	00bffb44 	movi	r2,-19
 100507c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1005080:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1005084:	e13ffb17 	ldw	r4,-20(fp)
 1005088:	01404034 	movhi	r5,256
 100508c:	295db004 	addi	r5,r5,30400
 1005090:	1004aac0 	call	1004aac <alt_find_dev>
 1005094:	e0bffa15 	stw	r2,-24(fp)
 1005098:	e0bffa17 	ldw	r2,-24(fp)
 100509c:	1004c03a 	cmpne	r2,r2,zero
 10050a0:	1000051e 	bne	r2,zero,10050b8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10050a4:	e13ffb17 	ldw	r4,-20(fp)
 10050a8:	10054000 	call	1005400 <alt_find_file>
 10050ac:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 10050b0:	00800044 	movi	r2,1
 10050b4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10050b8:	e0bffa17 	ldw	r2,-24(fp)
 10050bc:	1005003a 	cmpeq	r2,r2,zero
 10050c0:	1000301e 	bne	r2,zero,1005184 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10050c4:	e13ffa17 	ldw	r4,-24(fp)
 10050c8:	10055200 	call	1005520 <alt_get_fd>
 10050cc:	e0bff815 	stw	r2,-32(fp)
 10050d0:	e0bff817 	ldw	r2,-32(fp)
 10050d4:	1004403a 	cmpge	r2,r2,zero
 10050d8:	1000031e 	bne	r2,zero,10050e8 <open+0x94>
    {
      status = index;
 10050dc:	e0bff817 	ldw	r2,-32(fp)
 10050e0:	e0bff715 	stw	r2,-36(fp)
 10050e4:	00002906 	br	100518c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 10050e8:	e0bff817 	ldw	r2,-32(fp)
 10050ec:	10800324 	muli	r2,r2,12
 10050f0:	1007883a 	mov	r3,r2
 10050f4:	00804034 	movhi	r2,256
 10050f8:	10990b04 	addi	r2,r2,25644
 10050fc:	1885883a 	add	r2,r3,r2
 1005100:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1005104:	e0fffc17 	ldw	r3,-16(fp)
 1005108:	00900034 	movhi	r2,16384
 100510c:	10bfffc4 	addi	r2,r2,-1
 1005110:	1886703a 	and	r3,r3,r2
 1005114:	e0bff917 	ldw	r2,-28(fp)
 1005118:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100511c:	e0bff617 	ldw	r2,-40(fp)
 1005120:	1004c03a 	cmpne	r2,r2,zero
 1005124:	1000061e 	bne	r2,zero,1005140 <open+0xec>
 1005128:	e13ff917 	ldw	r4,-28(fp)
 100512c:	1004f780 	call	1004f78 <alt_file_locked>
 1005130:	e0bff715 	stw	r2,-36(fp)
 1005134:	e0bff717 	ldw	r2,-36(fp)
 1005138:	1004803a 	cmplt	r2,r2,zero
 100513c:	1000131e 	bne	r2,zero,100518c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1005140:	e0bffa17 	ldw	r2,-24(fp)
 1005144:	10800317 	ldw	r2,12(r2)
 1005148:	1005003a 	cmpeq	r2,r2,zero
 100514c:	1000091e 	bne	r2,zero,1005174 <open+0x120>
 1005150:	e0bffa17 	ldw	r2,-24(fp)
 1005154:	10800317 	ldw	r2,12(r2)
 1005158:	e13ff917 	ldw	r4,-28(fp)
 100515c:	e17ffb17 	ldw	r5,-20(fp)
 1005160:	e1bffc17 	ldw	r6,-16(fp)
 1005164:	e1fffd17 	ldw	r7,-12(fp)
 1005168:	103ee83a 	callr	r2
 100516c:	e0bfff15 	stw	r2,-4(fp)
 1005170:	00000106 	br	1005178 <open+0x124>
 1005174:	e03fff15 	stw	zero,-4(fp)
 1005178:	e0bfff17 	ldw	r2,-4(fp)
 100517c:	e0bff715 	stw	r2,-36(fp)
 1005180:	00000206 	br	100518c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1005184:	00bffb44 	movi	r2,-19
 1005188:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100518c:	e0bff717 	ldw	r2,-36(fp)
 1005190:	1004403a 	cmpge	r2,r2,zero
 1005194:	1000091e 	bne	r2,zero,10051bc <open+0x168>
  {
    alt_release_fd (index);  
 1005198:	e13ff817 	ldw	r4,-32(fp)
 100519c:	10033880 	call	1003388 <alt_release_fd>
    ALT_ERRNO = -status;
 10051a0:	10051dc0 	call	10051dc <alt_get_errno>
 10051a4:	e0fff717 	ldw	r3,-36(fp)
 10051a8:	00c7c83a 	sub	r3,zero,r3
 10051ac:	10c00015 	stw	r3,0(r2)
    return -1;
 10051b0:	00bfffc4 	movi	r2,-1
 10051b4:	e0bffe15 	stw	r2,-8(fp)
 10051b8:	00000206 	br	10051c4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 10051bc:	e0bff817 	ldw	r2,-32(fp)
 10051c0:	e0bffe15 	stw	r2,-8(fp)
 10051c4:	e0bffe17 	ldw	r2,-8(fp)
}
 10051c8:	e037883a 	mov	sp,fp
 10051cc:	dfc00117 	ldw	ra,4(sp)
 10051d0:	df000017 	ldw	fp,0(sp)
 10051d4:	dec00204 	addi	sp,sp,8
 10051d8:	f800283a 	ret

010051dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10051dc:	defffd04 	addi	sp,sp,-12
 10051e0:	dfc00215 	stw	ra,8(sp)
 10051e4:	df000115 	stw	fp,4(sp)
 10051e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10051ec:	00804034 	movhi	r2,256
 10051f0:	109db304 	addi	r2,r2,30412
 10051f4:	10800017 	ldw	r2,0(r2)
 10051f8:	1005003a 	cmpeq	r2,r2,zero
 10051fc:	1000061e 	bne	r2,zero,1005218 <alt_get_errno+0x3c>
 1005200:	00804034 	movhi	r2,256
 1005204:	109db304 	addi	r2,r2,30412
 1005208:	10800017 	ldw	r2,0(r2)
 100520c:	103ee83a 	callr	r2
 1005210:	e0bfff15 	stw	r2,-4(fp)
 1005214:	00000306 	br	1005224 <alt_get_errno+0x48>
 1005218:	00804074 	movhi	r2,257
 100521c:	10a47404 	addi	r2,r2,-28208
 1005220:	e0bfff15 	stw	r2,-4(fp)
 1005224:	e0bfff17 	ldw	r2,-4(fp)
}
 1005228:	e037883a 	mov	sp,fp
 100522c:	dfc00117 	ldw	ra,4(sp)
 1005230:	df000017 	ldw	fp,0(sp)
 1005234:	dec00204 	addi	sp,sp,8
 1005238:	f800283a 	ret

0100523c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100523c:	defffa04 	addi	sp,sp,-24
 1005240:	df000515 	stw	fp,20(sp)
 1005244:	df000504 	addi	fp,sp,20
 1005248:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100524c:	0005303a 	rdctl	r2,status
 1005250:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005254:	e0fffd17 	ldw	r3,-12(fp)
 1005258:	00bfff84 	movi	r2,-2
 100525c:	1884703a 	and	r2,r3,r2
 1005260:	1001703a 	wrctl	status,r2
  
  return context;
 1005264:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1005268:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100526c:	e0bfff17 	ldw	r2,-4(fp)
 1005270:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1005274:	e0bffc17 	ldw	r2,-16(fp)
 1005278:	10c00017 	ldw	r3,0(r2)
 100527c:	e0bffc17 	ldw	r2,-16(fp)
 1005280:	10800117 	ldw	r2,4(r2)
 1005284:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1005288:	e0bffc17 	ldw	r2,-16(fp)
 100528c:	10c00117 	ldw	r3,4(r2)
 1005290:	e0bffc17 	ldw	r2,-16(fp)
 1005294:	10800017 	ldw	r2,0(r2)
 1005298:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100529c:	e0fffc17 	ldw	r3,-16(fp)
 10052a0:	e0bffc17 	ldw	r2,-16(fp)
 10052a4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 10052a8:	e0fffc17 	ldw	r3,-16(fp)
 10052ac:	e0bffc17 	ldw	r2,-16(fp)
 10052b0:	18800015 	stw	r2,0(r3)
 10052b4:	e0bffe17 	ldw	r2,-8(fp)
 10052b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10052bc:	e0bffb17 	ldw	r2,-20(fp)
 10052c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10052c4:	e037883a 	mov	sp,fp
 10052c8:	df000017 	ldw	fp,0(sp)
 10052cc:	dec00104 	addi	sp,sp,4
 10052d0:	f800283a 	ret

010052d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10052d4:	defffb04 	addi	sp,sp,-20
 10052d8:	dfc00415 	stw	ra,16(sp)
 10052dc:	df000315 	stw	fp,12(sp)
 10052e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10052e4:	d0a00c17 	ldw	r2,-32720(gp)
 10052e8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10052ec:	d0a6d017 	ldw	r2,-25792(gp)
 10052f0:	10800044 	addi	r2,r2,1
 10052f4:	d0a6d015 	stw	r2,-25792(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10052f8:	00003106 	br	10053c0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 10052fc:	e0bffe17 	ldw	r2,-8(fp)
 1005300:	10800017 	ldw	r2,0(r2)
 1005304:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1005308:	e0bffe17 	ldw	r2,-8(fp)
 100530c:	10800403 	ldbu	r2,16(r2)
 1005310:	10803fcc 	andi	r2,r2,255
 1005314:	1005003a 	cmpeq	r2,r2,zero
 1005318:	1000051e 	bne	r2,zero,1005330 <alt_tick+0x5c>
 100531c:	d0a6d017 	ldw	r2,-25792(gp)
 1005320:	1004c03a 	cmpne	r2,r2,zero
 1005324:	1000021e 	bne	r2,zero,1005330 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1005328:	e0bffe17 	ldw	r2,-8(fp)
 100532c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1005330:	e0bffe17 	ldw	r2,-8(fp)
 1005334:	10c00217 	ldw	r3,8(r2)
 1005338:	d0a6d017 	ldw	r2,-25792(gp)
 100533c:	10c01e36 	bltu	r2,r3,10053b8 <alt_tick+0xe4>
 1005340:	e0bffe17 	ldw	r2,-8(fp)
 1005344:	10800403 	ldbu	r2,16(r2)
 1005348:	10803fcc 	andi	r2,r2,255
 100534c:	1004c03a 	cmpne	r2,r2,zero
 1005350:	1000191e 	bne	r2,zero,10053b8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1005354:	e0bffe17 	ldw	r2,-8(fp)
 1005358:	10c00317 	ldw	r3,12(r2)
 100535c:	e0bffe17 	ldw	r2,-8(fp)
 1005360:	11000517 	ldw	r4,20(r2)
 1005364:	183ee83a 	callr	r3
 1005368:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100536c:	e0bffd17 	ldw	r2,-12(fp)
 1005370:	1004c03a 	cmpne	r2,r2,zero
 1005374:	1000031e 	bne	r2,zero,1005384 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1005378:	e13ffe17 	ldw	r4,-8(fp)
 100537c:	100523c0 	call	100523c <alt_alarm_stop>
 1005380:	00000d06 	br	10053b8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1005384:	e0bffe17 	ldw	r2,-8(fp)
 1005388:	10c00217 	ldw	r3,8(r2)
 100538c:	e0bffd17 	ldw	r2,-12(fp)
 1005390:	1887883a 	add	r3,r3,r2
 1005394:	e0bffe17 	ldw	r2,-8(fp)
 1005398:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100539c:	e0bffe17 	ldw	r2,-8(fp)
 10053a0:	10c00217 	ldw	r3,8(r2)
 10053a4:	d0a6d017 	ldw	r2,-25792(gp)
 10053a8:	1880032e 	bgeu	r3,r2,10053b8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 10053ac:	e0fffe17 	ldw	r3,-8(fp)
 10053b0:	00800044 	movi	r2,1
 10053b4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10053b8:	e0bfff17 	ldw	r2,-4(fp)
 10053bc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10053c0:	d0e00c04 	addi	r3,gp,-32720
 10053c4:	e0bffe17 	ldw	r2,-8(fp)
 10053c8:	10ffcc1e 	bne	r2,r3,10052fc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 10053cc:	e037883a 	mov	sp,fp
 10053d0:	dfc00117 	ldw	ra,4(sp)
 10053d4:	df000017 	ldw	fp,0(sp)
 10053d8:	dec00204 	addi	sp,sp,8
 10053dc:	f800283a 	ret

010053e0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10053e0:	deffff04 	addi	sp,sp,-4
 10053e4:	df000015 	stw	fp,0(sp)
 10053e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10053ec:	000170fa 	wrctl	ienable,zero
}
 10053f0:	e037883a 	mov	sp,fp
 10053f4:	df000017 	ldw	fp,0(sp)
 10053f8:	dec00104 	addi	sp,sp,4
 10053fc:	f800283a 	ret

01005400 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1005400:	defffa04 	addi	sp,sp,-24
 1005404:	dfc00515 	stw	ra,20(sp)
 1005408:	df000415 	stw	fp,16(sp)
 100540c:	df000404 	addi	fp,sp,16
 1005410:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1005414:	00804034 	movhi	r2,256
 1005418:	109dae04 	addi	r2,r2,30392
 100541c:	10800017 	ldw	r2,0(r2)
 1005420:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1005424:	00003306 	br	10054f4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1005428:	e0bffd17 	ldw	r2,-12(fp)
 100542c:	11000217 	ldw	r4,8(r2)
 1005430:	10002e80 	call	10002e8 <strlen>
 1005434:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1005438:	e0bffd17 	ldw	r2,-12(fp)
 100543c:	10c00217 	ldw	r3,8(r2)
 1005440:	e0bffc17 	ldw	r2,-16(fp)
 1005444:	1885883a 	add	r2,r3,r2
 1005448:	10bfffc4 	addi	r2,r2,-1
 100544c:	10800003 	ldbu	r2,0(r2)
 1005450:	10803fcc 	andi	r2,r2,255
 1005454:	1080201c 	xori	r2,r2,128
 1005458:	10bfe004 	addi	r2,r2,-128
 100545c:	10800bd8 	cmpnei	r2,r2,47
 1005460:	1000031e 	bne	r2,zero,1005470 <alt_find_file+0x70>
    {
      len -= 1;
 1005464:	e0bffc17 	ldw	r2,-16(fp)
 1005468:	10bfffc4 	addi	r2,r2,-1
 100546c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1005470:	e0bffc17 	ldw	r2,-16(fp)
 1005474:	1007883a 	mov	r3,r2
 1005478:	e0bffe17 	ldw	r2,-8(fp)
 100547c:	1885883a 	add	r2,r3,r2
 1005480:	10800003 	ldbu	r2,0(r2)
 1005484:	10803fcc 	andi	r2,r2,255
 1005488:	1080201c 	xori	r2,r2,128
 100548c:	10bfe004 	addi	r2,r2,-128
 1005490:	10800be0 	cmpeqi	r2,r2,47
 1005494:	10000a1e 	bne	r2,zero,10054c0 <alt_find_file+0xc0>
 1005498:	e0bffc17 	ldw	r2,-16(fp)
 100549c:	1007883a 	mov	r3,r2
 10054a0:	e0bffe17 	ldw	r2,-8(fp)
 10054a4:	1885883a 	add	r2,r3,r2
 10054a8:	10800003 	ldbu	r2,0(r2)
 10054ac:	10803fcc 	andi	r2,r2,255
 10054b0:	1080201c 	xori	r2,r2,128
 10054b4:	10bfe004 	addi	r2,r2,-128
 10054b8:	1004c03a 	cmpne	r2,r2,zero
 10054bc:	10000a1e 	bne	r2,zero,10054e8 <alt_find_file+0xe8>
 10054c0:	e0bffd17 	ldw	r2,-12(fp)
 10054c4:	11000217 	ldw	r4,8(r2)
 10054c8:	e1bffc17 	ldw	r6,-16(fp)
 10054cc:	e17ffe17 	ldw	r5,-8(fp)
 10054d0:	10056b40 	call	10056b4 <memcmp>
 10054d4:	1004c03a 	cmpne	r2,r2,zero
 10054d8:	1000031e 	bne	r2,zero,10054e8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10054dc:	e0bffd17 	ldw	r2,-12(fp)
 10054e0:	e0bfff15 	stw	r2,-4(fp)
 10054e4:	00000806 	br	1005508 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 10054e8:	e0bffd17 	ldw	r2,-12(fp)
 10054ec:	10800017 	ldw	r2,0(r2)
 10054f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10054f4:	00c04034 	movhi	r3,256
 10054f8:	18ddae04 	addi	r3,r3,30392
 10054fc:	e0bffd17 	ldw	r2,-12(fp)
 1005500:	10ffc91e 	bne	r2,r3,1005428 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1005504:	e03fff15 	stw	zero,-4(fp)
 1005508:	e0bfff17 	ldw	r2,-4(fp)
}
 100550c:	e037883a 	mov	sp,fp
 1005510:	dfc00117 	ldw	ra,4(sp)
 1005514:	df000017 	ldw	fp,0(sp)
 1005518:	dec00204 	addi	sp,sp,8
 100551c:	f800283a 	ret

01005520 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1005520:	defffc04 	addi	sp,sp,-16
 1005524:	df000315 	stw	fp,12(sp)
 1005528:	df000304 	addi	fp,sp,12
 100552c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1005530:	00bffa04 	movi	r2,-24
 1005534:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1005538:	e03ffe15 	stw	zero,-8(fp)
 100553c:	00001e06 	br	10055b8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 1005540:	e0bffe17 	ldw	r2,-8(fp)
 1005544:	00c04034 	movhi	r3,256
 1005548:	18d90b04 	addi	r3,r3,25644
 100554c:	10800324 	muli	r2,r2,12
 1005550:	10c5883a 	add	r2,r2,r3
 1005554:	10800017 	ldw	r2,0(r2)
 1005558:	1004c03a 	cmpne	r2,r2,zero
 100555c:	1000131e 	bne	r2,zero,10055ac <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 1005560:	e0bffe17 	ldw	r2,-8(fp)
 1005564:	00c04034 	movhi	r3,256
 1005568:	18d90b04 	addi	r3,r3,25644
 100556c:	10800324 	muli	r2,r2,12
 1005570:	10c7883a 	add	r3,r2,r3
 1005574:	e0bfff17 	ldw	r2,-4(fp)
 1005578:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 100557c:	00804034 	movhi	r2,256
 1005580:	109db204 	addi	r2,r2,30408
 1005584:	10c00017 	ldw	r3,0(r2)
 1005588:	e0bffe17 	ldw	r2,-8(fp)
 100558c:	1880040e 	bge	r3,r2,10055a0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 1005590:	00c04034 	movhi	r3,256
 1005594:	18ddb204 	addi	r3,r3,30408
 1005598:	e0bffe17 	ldw	r2,-8(fp)
 100559c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 10055a0:	e0bffe17 	ldw	r2,-8(fp)
 10055a4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 10055a8:	00000606 	br	10055c4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10055ac:	e0bffe17 	ldw	r2,-8(fp)
 10055b0:	10800044 	addi	r2,r2,1
 10055b4:	e0bffe15 	stw	r2,-8(fp)
 10055b8:	e0bffe17 	ldw	r2,-8(fp)
 10055bc:	10800810 	cmplti	r2,r2,32
 10055c0:	103fdf1e 	bne	r2,zero,1005540 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10055c4:	e0bffd17 	ldw	r2,-12(fp)
}
 10055c8:	e037883a 	mov	sp,fp
 10055cc:	df000017 	ldw	fp,0(sp)
 10055d0:	dec00104 	addi	sp,sp,4
 10055d4:	f800283a 	ret

010055d8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10055d8:	defffb04 	addi	sp,sp,-20
 10055dc:	df000415 	stw	fp,16(sp)
 10055e0:	df000404 	addi	fp,sp,16
 10055e4:	e13ffe15 	stw	r4,-8(fp)
 10055e8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10055ec:	e0bfff17 	ldw	r2,-4(fp)
 10055f0:	10840070 	cmpltui	r2,r2,4097
 10055f4:	1000021e 	bne	r2,zero,1005600 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 10055f8:	00840004 	movi	r2,4096
 10055fc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1005600:	e0fffe17 	ldw	r3,-8(fp)
 1005604:	e0bfff17 	ldw	r2,-4(fp)
 1005608:	1885883a 	add	r2,r3,r2
 100560c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1005610:	e0bffe17 	ldw	r2,-8(fp)
 1005614:	e0bffd15 	stw	r2,-12(fp)
 1005618:	00000506 	br	1005630 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100561c:	e0bffd17 	ldw	r2,-12(fp)
 1005620:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1005624:	e0bffd17 	ldw	r2,-12(fp)
 1005628:	10800804 	addi	r2,r2,32
 100562c:	e0bffd15 	stw	r2,-12(fp)
 1005630:	e0fffd17 	ldw	r3,-12(fp)
 1005634:	e0bffc17 	ldw	r2,-16(fp)
 1005638:	18bff836 	bltu	r3,r2,100561c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100563c:	e0bffe17 	ldw	r2,-8(fp)
 1005640:	108007cc 	andi	r2,r2,31
 1005644:	1005003a 	cmpeq	r2,r2,zero
 1005648:	1000021e 	bne	r2,zero,1005654 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100564c:	e0bffd17 	ldw	r2,-12(fp)
 1005650:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1005654:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1005658:	e037883a 	mov	sp,fp
 100565c:	df000017 	ldw	fp,0(sp)
 1005660:	dec00104 	addi	sp,sp,4
 1005664:	f800283a 	ret

01005668 <atexit>:
 1005668:	200b883a 	mov	r5,r4
 100566c:	000d883a 	mov	r6,zero
 1005670:	0009883a 	mov	r4,zero
 1005674:	000f883a 	mov	r7,zero
 1005678:	10057e41 	jmpi	10057e4 <__register_exitproc>

0100567c <exit>:
 100567c:	defffe04 	addi	sp,sp,-8
 1005680:	000b883a 	mov	r5,zero
 1005684:	dc000015 	stw	r16,0(sp)
 1005688:	dfc00115 	stw	ra,4(sp)
 100568c:	2021883a 	mov	r16,r4
 1005690:	100591c0 	call	100591c <__call_exitprocs>
 1005694:	00804034 	movhi	r2,256
 1005698:	109dab04 	addi	r2,r2,30380
 100569c:	11000017 	ldw	r4,0(r2)
 10056a0:	20800f17 	ldw	r2,60(r4)
 10056a4:	10000126 	beq	r2,zero,10056ac <exit+0x30>
 10056a8:	103ee83a 	callr	r2
 10056ac:	8009883a 	mov	r4,r16
 10056b0:	1005b0c0 	call	1005b0c <_exit>

010056b4 <memcmp>:
 10056b4:	00c000c4 	movi	r3,3
 10056b8:	1980032e 	bgeu	r3,r6,10056c8 <memcmp+0x14>
 10056bc:	2144b03a 	or	r2,r4,r5
 10056c0:	10c4703a 	and	r2,r2,r3
 10056c4:	10000f26 	beq	r2,zero,1005704 <memcmp+0x50>
 10056c8:	31ffffc4 	addi	r7,r6,-1
 10056cc:	3000061e 	bne	r6,zero,10056e8 <memcmp+0x34>
 10056d0:	00000a06 	br	10056fc <memcmp+0x48>
 10056d4:	39ffffc4 	addi	r7,r7,-1
 10056d8:	00bfffc4 	movi	r2,-1
 10056dc:	21000044 	addi	r4,r4,1
 10056e0:	29400044 	addi	r5,r5,1
 10056e4:	38800526 	beq	r7,r2,10056fc <memcmp+0x48>
 10056e8:	20c00003 	ldbu	r3,0(r4)
 10056ec:	28800003 	ldbu	r2,0(r5)
 10056f0:	18bff826 	beq	r3,r2,10056d4 <memcmp+0x20>
 10056f4:	1885c83a 	sub	r2,r3,r2
 10056f8:	f800283a 	ret
 10056fc:	0005883a 	mov	r2,zero
 1005700:	f800283a 	ret
 1005704:	180f883a 	mov	r7,r3
 1005708:	20c00017 	ldw	r3,0(r4)
 100570c:	28800017 	ldw	r2,0(r5)
 1005710:	18bfed1e 	bne	r3,r2,10056c8 <memcmp+0x14>
 1005714:	31bfff04 	addi	r6,r6,-4
 1005718:	21000104 	addi	r4,r4,4
 100571c:	29400104 	addi	r5,r5,4
 1005720:	39bff936 	bltu	r7,r6,1005708 <memcmp+0x54>
 1005724:	003fe806 	br	10056c8 <memcmp+0x14>

01005728 <strcmp>:
 1005728:	2144b03a 	or	r2,r4,r5
 100572c:	108000cc 	andi	r2,r2,3
 1005730:	10001d1e 	bne	r2,zero,10057a8 <strcmp+0x80>
 1005734:	200f883a 	mov	r7,r4
 1005738:	28800017 	ldw	r2,0(r5)
 100573c:	21000017 	ldw	r4,0(r4)
 1005740:	280d883a 	mov	r6,r5
 1005744:	2080161e 	bne	r4,r2,10057a0 <strcmp+0x78>
 1005748:	023fbff4 	movhi	r8,65279
 100574c:	423fbfc4 	addi	r8,r8,-257
 1005750:	2207883a 	add	r3,r4,r8
 1005754:	01602074 	movhi	r5,32897
 1005758:	29602004 	addi	r5,r5,-32640
 100575c:	1946703a 	and	r3,r3,r5
 1005760:	0104303a 	nor	r2,zero,r4
 1005764:	10c4703a 	and	r2,r2,r3
 1005768:	10001c1e 	bne	r2,zero,10057dc <strcmp+0xb4>
 100576c:	4013883a 	mov	r9,r8
 1005770:	2811883a 	mov	r8,r5
 1005774:	00000106 	br	100577c <strcmp+0x54>
 1005778:	1800181e 	bne	r3,zero,10057dc <strcmp+0xb4>
 100577c:	39c00104 	addi	r7,r7,4
 1005780:	39000017 	ldw	r4,0(r7)
 1005784:	31800104 	addi	r6,r6,4
 1005788:	31400017 	ldw	r5,0(r6)
 100578c:	2245883a 	add	r2,r4,r9
 1005790:	1204703a 	and	r2,r2,r8
 1005794:	0106303a 	nor	r3,zero,r4
 1005798:	1886703a 	and	r3,r3,r2
 100579c:	217ff626 	beq	r4,r5,1005778 <strcmp+0x50>
 10057a0:	3809883a 	mov	r4,r7
 10057a4:	300b883a 	mov	r5,r6
 10057a8:	20c00007 	ldb	r3,0(r4)
 10057ac:	1800051e 	bne	r3,zero,10057c4 <strcmp+0x9c>
 10057b0:	00000606 	br	10057cc <strcmp+0xa4>
 10057b4:	21000044 	addi	r4,r4,1
 10057b8:	20c00007 	ldb	r3,0(r4)
 10057bc:	29400044 	addi	r5,r5,1
 10057c0:	18000226 	beq	r3,zero,10057cc <strcmp+0xa4>
 10057c4:	28800007 	ldb	r2,0(r5)
 10057c8:	18bffa26 	beq	r3,r2,10057b4 <strcmp+0x8c>
 10057cc:	20c00003 	ldbu	r3,0(r4)
 10057d0:	28800003 	ldbu	r2,0(r5)
 10057d4:	1885c83a 	sub	r2,r3,r2
 10057d8:	f800283a 	ret
 10057dc:	0005883a 	mov	r2,zero
 10057e0:	f800283a 	ret

010057e4 <__register_exitproc>:
 10057e4:	defffa04 	addi	sp,sp,-24
 10057e8:	00804034 	movhi	r2,256
 10057ec:	109dab04 	addi	r2,r2,30380
 10057f0:	dc000015 	stw	r16,0(sp)
 10057f4:	14000017 	ldw	r16,0(r2)
 10057f8:	dd000415 	stw	r20,16(sp)
 10057fc:	2829883a 	mov	r20,r5
 1005800:	81405217 	ldw	r5,328(r16)
 1005804:	dcc00315 	stw	r19,12(sp)
 1005808:	dc800215 	stw	r18,8(sp)
 100580c:	dc400115 	stw	r17,4(sp)
 1005810:	dfc00515 	stw	ra,20(sp)
 1005814:	2023883a 	mov	r17,r4
 1005818:	3027883a 	mov	r19,r6
 100581c:	3825883a 	mov	r18,r7
 1005820:	28002526 	beq	r5,zero,10058b8 <__register_exitproc+0xd4>
 1005824:	29000117 	ldw	r4,4(r5)
 1005828:	008007c4 	movi	r2,31
 100582c:	11002716 	blt	r2,r4,10058cc <__register_exitproc+0xe8>
 1005830:	8800101e 	bne	r17,zero,1005874 <__register_exitproc+0x90>
 1005834:	2105883a 	add	r2,r4,r4
 1005838:	1085883a 	add	r2,r2,r2
 100583c:	20c00044 	addi	r3,r4,1
 1005840:	1145883a 	add	r2,r2,r5
 1005844:	0009883a 	mov	r4,zero
 1005848:	15000215 	stw	r20,8(r2)
 100584c:	28c00115 	stw	r3,4(r5)
 1005850:	2005883a 	mov	r2,r4
 1005854:	dfc00517 	ldw	ra,20(sp)
 1005858:	dd000417 	ldw	r20,16(sp)
 100585c:	dcc00317 	ldw	r19,12(sp)
 1005860:	dc800217 	ldw	r18,8(sp)
 1005864:	dc400117 	ldw	r17,4(sp)
 1005868:	dc000017 	ldw	r16,0(sp)
 100586c:	dec00604 	addi	sp,sp,24
 1005870:	f800283a 	ret
 1005874:	29802204 	addi	r6,r5,136
 1005878:	00800044 	movi	r2,1
 100587c:	110e983a 	sll	r7,r2,r4
 1005880:	30c04017 	ldw	r3,256(r6)
 1005884:	2105883a 	add	r2,r4,r4
 1005888:	1085883a 	add	r2,r2,r2
 100588c:	1185883a 	add	r2,r2,r6
 1005890:	19c6b03a 	or	r3,r3,r7
 1005894:	14802015 	stw	r18,128(r2)
 1005898:	14c00015 	stw	r19,0(r2)
 100589c:	00800084 	movi	r2,2
 10058a0:	30c04015 	stw	r3,256(r6)
 10058a4:	88bfe31e 	bne	r17,r2,1005834 <__register_exitproc+0x50>
 10058a8:	30804117 	ldw	r2,260(r6)
 10058ac:	11c4b03a 	or	r2,r2,r7
 10058b0:	30804115 	stw	r2,260(r6)
 10058b4:	003fdf06 	br	1005834 <__register_exitproc+0x50>
 10058b8:	00804074 	movhi	r2,257
 10058bc:	10a4c504 	addi	r2,r2,-27884
 10058c0:	100b883a 	mov	r5,r2
 10058c4:	80805215 	stw	r2,328(r16)
 10058c8:	003fd606 	br	1005824 <__register_exitproc+0x40>
 10058cc:	00800034 	movhi	r2,0
 10058d0:	10800004 	addi	r2,r2,0
 10058d4:	1000021e 	bne	r2,zero,10058e0 <__register_exitproc+0xfc>
 10058d8:	013fffc4 	movi	r4,-1
 10058dc:	003fdc06 	br	1005850 <__register_exitproc+0x6c>
 10058e0:	01006404 	movi	r4,400
 10058e4:	103ee83a 	callr	r2
 10058e8:	1007883a 	mov	r3,r2
 10058ec:	103ffa26 	beq	r2,zero,10058d8 <__register_exitproc+0xf4>
 10058f0:	80805217 	ldw	r2,328(r16)
 10058f4:	180b883a 	mov	r5,r3
 10058f8:	18000115 	stw	zero,4(r3)
 10058fc:	18800015 	stw	r2,0(r3)
 1005900:	80c05215 	stw	r3,328(r16)
 1005904:	18006215 	stw	zero,392(r3)
 1005908:	18006315 	stw	zero,396(r3)
 100590c:	0009883a 	mov	r4,zero
 1005910:	883fc826 	beq	r17,zero,1005834 <__register_exitproc+0x50>
 1005914:	003fd706 	br	1005874 <__register_exitproc+0x90>

01005918 <register_fini>:
 1005918:	f800283a 	ret

0100591c <__call_exitprocs>:
 100591c:	00804034 	movhi	r2,256
 1005920:	109dab04 	addi	r2,r2,30380
 1005924:	10800017 	ldw	r2,0(r2)
 1005928:	defff304 	addi	sp,sp,-52
 100592c:	df000b15 	stw	fp,44(sp)
 1005930:	d8800115 	stw	r2,4(sp)
 1005934:	00800034 	movhi	r2,0
 1005938:	10800004 	addi	r2,r2,0
 100593c:	1005003a 	cmpeq	r2,r2,zero
 1005940:	d8800215 	stw	r2,8(sp)
 1005944:	d8800117 	ldw	r2,4(sp)
 1005948:	dd400815 	stw	r21,32(sp)
 100594c:	dd000715 	stw	r20,28(sp)
 1005950:	10805204 	addi	r2,r2,328
 1005954:	dfc00c15 	stw	ra,48(sp)
 1005958:	ddc00a15 	stw	r23,40(sp)
 100595c:	dd800915 	stw	r22,36(sp)
 1005960:	dcc00615 	stw	r19,24(sp)
 1005964:	dc800515 	stw	r18,20(sp)
 1005968:	dc400415 	stw	r17,16(sp)
 100596c:	dc000315 	stw	r16,12(sp)
 1005970:	282b883a 	mov	r21,r5
 1005974:	2039883a 	mov	fp,r4
 1005978:	d8800015 	stw	r2,0(sp)
 100597c:	2829003a 	cmpeq	r20,r5,zero
 1005980:	d8800117 	ldw	r2,4(sp)
 1005984:	14405217 	ldw	r17,328(r2)
 1005988:	88001026 	beq	r17,zero,10059cc <__call_exitprocs+0xb0>
 100598c:	ddc00017 	ldw	r23,0(sp)
 1005990:	88800117 	ldw	r2,4(r17)
 1005994:	8c802204 	addi	r18,r17,136
 1005998:	143fffc4 	addi	r16,r2,-1
 100599c:	80000916 	blt	r16,zero,10059c4 <__call_exitprocs+0xa8>
 10059a0:	05bfffc4 	movi	r22,-1
 10059a4:	a000151e 	bne	r20,zero,10059fc <__call_exitprocs+0xe0>
 10059a8:	8409883a 	add	r4,r16,r16
 10059ac:	2105883a 	add	r2,r4,r4
 10059b0:	1485883a 	add	r2,r2,r18
 10059b4:	10c02017 	ldw	r3,128(r2)
 10059b8:	a8c01126 	beq	r21,r3,1005a00 <__call_exitprocs+0xe4>
 10059bc:	843fffc4 	addi	r16,r16,-1
 10059c0:	85bff81e 	bne	r16,r22,10059a4 <__call_exitprocs+0x88>
 10059c4:	d8800217 	ldw	r2,8(sp)
 10059c8:	10003126 	beq	r2,zero,1005a90 <__call_exitprocs+0x174>
 10059cc:	dfc00c17 	ldw	ra,48(sp)
 10059d0:	df000b17 	ldw	fp,44(sp)
 10059d4:	ddc00a17 	ldw	r23,40(sp)
 10059d8:	dd800917 	ldw	r22,36(sp)
 10059dc:	dd400817 	ldw	r21,32(sp)
 10059e0:	dd000717 	ldw	r20,28(sp)
 10059e4:	dcc00617 	ldw	r19,24(sp)
 10059e8:	dc800517 	ldw	r18,20(sp)
 10059ec:	dc400417 	ldw	r17,16(sp)
 10059f0:	dc000317 	ldw	r16,12(sp)
 10059f4:	dec00d04 	addi	sp,sp,52
 10059f8:	f800283a 	ret
 10059fc:	8409883a 	add	r4,r16,r16
 1005a00:	88c00117 	ldw	r3,4(r17)
 1005a04:	2105883a 	add	r2,r4,r4
 1005a08:	1445883a 	add	r2,r2,r17
 1005a0c:	18ffffc4 	addi	r3,r3,-1
 1005a10:	11800217 	ldw	r6,8(r2)
 1005a14:	1c001526 	beq	r3,r16,1005a6c <__call_exitprocs+0x150>
 1005a18:	10000215 	stw	zero,8(r2)
 1005a1c:	303fe726 	beq	r6,zero,10059bc <__call_exitprocs+0xa0>
 1005a20:	00c00044 	movi	r3,1
 1005a24:	1c06983a 	sll	r3,r3,r16
 1005a28:	90804017 	ldw	r2,256(r18)
 1005a2c:	8cc00117 	ldw	r19,4(r17)
 1005a30:	1884703a 	and	r2,r3,r2
 1005a34:	10001426 	beq	r2,zero,1005a88 <__call_exitprocs+0x16c>
 1005a38:	90804117 	ldw	r2,260(r18)
 1005a3c:	1884703a 	and	r2,r3,r2
 1005a40:	10000c1e 	bne	r2,zero,1005a74 <__call_exitprocs+0x158>
 1005a44:	2105883a 	add	r2,r4,r4
 1005a48:	1485883a 	add	r2,r2,r18
 1005a4c:	11400017 	ldw	r5,0(r2)
 1005a50:	e009883a 	mov	r4,fp
 1005a54:	303ee83a 	callr	r6
 1005a58:	88800117 	ldw	r2,4(r17)
 1005a5c:	98bfc81e 	bne	r19,r2,1005980 <__call_exitprocs+0x64>
 1005a60:	b8800017 	ldw	r2,0(r23)
 1005a64:	147fd526 	beq	r2,r17,10059bc <__call_exitprocs+0xa0>
 1005a68:	003fc506 	br	1005980 <__call_exitprocs+0x64>
 1005a6c:	8c000115 	stw	r16,4(r17)
 1005a70:	003fea06 	br	1005a1c <__call_exitprocs+0x100>
 1005a74:	2105883a 	add	r2,r4,r4
 1005a78:	1485883a 	add	r2,r2,r18
 1005a7c:	11000017 	ldw	r4,0(r2)
 1005a80:	303ee83a 	callr	r6
 1005a84:	003ff406 	br	1005a58 <__call_exitprocs+0x13c>
 1005a88:	303ee83a 	callr	r6
 1005a8c:	003ff206 	br	1005a58 <__call_exitprocs+0x13c>
 1005a90:	88800117 	ldw	r2,4(r17)
 1005a94:	1000081e 	bne	r2,zero,1005ab8 <__call_exitprocs+0x19c>
 1005a98:	89000017 	ldw	r4,0(r17)
 1005a9c:	20000726 	beq	r4,zero,1005abc <__call_exitprocs+0x1a0>
 1005aa0:	b9000015 	stw	r4,0(r23)
 1005aa4:	8809883a 	mov	r4,r17
 1005aa8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1005aac:	bc400017 	ldw	r17,0(r23)
 1005ab0:	883fb71e 	bne	r17,zero,1005990 <__call_exitprocs+0x74>
 1005ab4:	003fc506 	br	10059cc <__call_exitprocs+0xb0>
 1005ab8:	89000017 	ldw	r4,0(r17)
 1005abc:	882f883a 	mov	r23,r17
 1005ac0:	2023883a 	mov	r17,r4
 1005ac4:	883fb21e 	bne	r17,zero,1005990 <__call_exitprocs+0x74>
 1005ac8:	003fc006 	br	10059cc <__call_exitprocs+0xb0>

01005acc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1005acc:	defffd04 	addi	sp,sp,-12
 1005ad0:	df000215 	stw	fp,8(sp)
 1005ad4:	df000204 	addi	fp,sp,8
 1005ad8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1005adc:	e0bfff17 	ldw	r2,-4(fp)
 1005ae0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1005ae4:	e0bffe17 	ldw	r2,-8(fp)
 1005ae8:	1005003a 	cmpeq	r2,r2,zero
 1005aec:	1000021e 	bne	r2,zero,1005af8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1005af0:	002af070 	cmpltui	zero,zero,43969
 1005af4:	00000106 	br	1005afc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1005af8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1005afc:	e037883a 	mov	sp,fp
 1005b00:	df000017 	ldw	fp,0(sp)
 1005b04:	dec00104 	addi	sp,sp,4
 1005b08:	f800283a 	ret

01005b0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1005b0c:	defffd04 	addi	sp,sp,-12
 1005b10:	dfc00215 	stw	ra,8(sp)
 1005b14:	df000115 	stw	fp,4(sp)
 1005b18:	df000104 	addi	fp,sp,4
 1005b1c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1005b20:	e13fff17 	ldw	r4,-4(fp)
 1005b24:	1005acc0 	call	1005acc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1005b28:	003fff06 	br	1005b28 <_exit+0x1c>
 1005b2c:	01005918 	cmpnei	r4,zero,356
